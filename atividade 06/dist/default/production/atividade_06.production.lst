

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Sun Jun 06 20:04:40 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    39                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    40                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    41                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    42  0000                     
    43                           ; Version 2.20
    44                           ; Generated 12/02/2020 GMT
    45                           ; 
    46                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC18F4550 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     
    78                           	psect	idataBANK0
    79  001756                     __pidataBANK0:
    80                           	callstack 0
    81                           
    82                           ;initializer for _cont
    83  001756  0001               	dw	1
    84  0000                     _ADCON1bits	set	4033
    85  0000                     _TRISE	set	3990
    86  0000                     _TRISB	set	3987
    87  0000                     _TRISD	set	3989
    88  0000                     _OSCCON	set	4051
    89  0000                     _LATDbits	set	3980
    90  0000                     _TMR0L	set	4054
    91  0000                     _TMR0H	set	4055
    92  0000                     _TMR0IE	set	32661
    93  0000                     _TMR0IF	set	32658
    94  0000                     _TMR0ON	set	32431
    95  0000                     _PSA	set	32427
    96  0000                     _T0CS	set	32429
    97  0000                     _T08BIT	set	32430
    98  0000                     _INTEDG0	set	32654
    99  0000                     _INT0IF	set	32657
   100  0000                     _INT0IE	set	32660
   101  0000                     _GIE	set	32663
   102  0000                     _LATD3	set	31843
   103  0000                     _LATD2	set	31842
   104  0000                     _LATD7	set	31847
   105  0000                     _LATD6	set	31846
   106  0000                     _LATD5	set	31845
   107  0000                     _LATD4	set	31844
   108                           
   109                           	psect	smallconst
   110  000800                     __psmallconst:
   111                           	callstack 0
   112  000800  00                 	db	0
   113  000801                     STR_4:
   114  000801  54                 	db	84	;'T'
   115  000802  65                 	db	101	;'e'
   116  000803  6D                 	db	109	;'m'
   117  000804  70                 	db	112	;'p'
   118  000805  6F                 	db	111	;'o'
   119  000806  3A                 	db	58	;':'
   120  000807  20                 	db	32
   121  000808  20                 	db	32
   122  000809  30                 	db	48	;'0'
   123  00080A  20                 	db	32
   124  00080B  73                 	db	115	;'s'
   125  00080C  20                 	db	32
   126  00080D  00                 	db	0
   127  00080E                     STR_3:
   128  00080E  54                 	db	84	;'T'
   129  00080F  65                 	db	101	;'e'
   130  000810  6D                 	db	109	;'m'
   131  000811  70                 	db	112	;'p'
   132  000812  6F                 	db	111	;'o'
   133  000813  3A                 	db	58	;':'
   134  000814  20                 	db	32
   135  000815  20                 	db	32
   136  000816  25                 	db	37
   137  000817  69                 	db	105	;'i'
   138  000818  20                 	db	32
   139  000819  73                 	db	115	;'s'
   140  00081A  00                 	db	0
   141  00081B                     STR_2:
   142  00081B  54                 	db	84	;'T'
   143  00081C  65                 	db	101	;'e'
   144  00081D  6D                 	db	109	;'m'
   145  00081E  70                 	db	112	;'p'
   146  00081F  6F                 	db	111	;'o'
   147  000820  3A                 	db	58	;':'
   148  000821  20                 	db	32
   149  000822  20                 	db	32
   150  000823  30                 	db	48	;'0'
   151  000824  20                 	db	32
   152  000825  73                 	db	115	;'s'
   153  000826  00                 	db	0
   154  000827                     STR_1:
   155  000827  53                 	db	83	;'S'
   156  000828  65                 	db	101	;'e'
   157  000829  6E                 	db	110	;'n'
   158  00082A  73                 	db	115	;'s'
   159  00082B  6F                 	db	111	;'o'
   160  00082C  72                 	db	114	;'r'
   161  00082D  00                 	db	0
   162  00082E  00                 	db	0	; dummy byte at the end
   163  0000                     
   164                           ; #config settings
   165                           
   166                           	psect	cinit
   167  00166E                     __pcinit:
   168                           	callstack 0
   169  00166E                     start_initialization:
   170                           	callstack 0
   171  00166E                     __initialization:
   172                           	callstack 0
   173                           
   174                           ; Initialize objects allocated to BANK0 (2 bytes)
   175                           ; load TBLPTR registers with __pidataBANK0
   176  00166E  0E56               	movlw	low __pidataBANK0
   177  001670  6EF6               	movwf	tblptrl,c
   178  001672  0E17               	movlw	high __pidataBANK0
   179  001674  6EF7               	movwf	tblptrh,c
   180  001676  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   181  001678  6EF8               	movwf	tblptru,c
   182  00167A  0009               	tblrd		*+	;fetch initializer
   183  00167C  CFF5 F0C0          	movff	tablat,__pdataBANK0
   184  001680  0009               	tblrd		*+	;fetch initializer
   185  001682  CFF5 F0C1          	movff	tablat,__pdataBANK0+1
   186                           
   187                           ; Clear objects allocated to BANK0 (80 bytes)
   188  001686  EE00  F060         	lfsr	0,__pbssBANK0
   189  00168A  0E50               	movlw	80
   190  00168C                     clear_0:
   191  00168C  6AEE               	clrf	postinc0,c
   192  00168E  06E8               	decf	wreg,f,c
   193  001690  E1FD               	bnz	clear_0
   194                           
   195                           ; Clear objects allocated to COMRAM (6 bytes)
   196  001692  6A5C               	clrf	(__pbssCOMRAM+5)& (0+255),c
   197  001694  6A5B               	clrf	(__pbssCOMRAM+4)& (0+255),c
   198  001696  6A5A               	clrf	(__pbssCOMRAM+3)& (0+255),c
   199  001698  6A59               	clrf	(__pbssCOMRAM+2)& (0+255),c
   200  00169A  6A58               	clrf	(__pbssCOMRAM+1)& (0+255),c
   201  00169C  6A57               	clrf	__pbssCOMRAM& (0+255),c
   202  00169E                     end_of_initialization:
   203                           	callstack 0
   204  00169E                     __end_of__initialization:
   205                           	callstack 0
   206  00169E  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   207  0016A0  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   208  0016A2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   209  0016A4  6EF8               	movwf	tblptru,c
   210  0016A6  0100               	movlb	0
   211  0016A8  EFD6  F007         	goto	_main	;jump to C main() function
   212                           
   213                           	psect	bssCOMRAM
   214  000057                     __pbssCOMRAM:
   215                           	callstack 0
   216  000057                     _width:
   217                           	callstack 0
   218  000057                     	ds	2
   219  000059                     _prec:
   220                           	callstack 0
   221  000059                     	ds	2
   222  00005B                     _flags:
   223                           	callstack 0
   224  00005B                     	ds	2
   225                           
   226                           	psect	bssBANK0
   227  000060                     __pbssBANK0:
   228                           	callstack 0
   229  000060                     _linha1:
   230                           	callstack 0
   231  000060                     	ds	16
   232  000070                     _nout:
   233                           	callstack 0
   234  000070                     	ds	2
   235  000072                     _periodo_anterior:
   236                           	callstack 0
   237  000072                     	ds	2
   238  000074                     _periodo:
   239                           	callstack 0
   240  000074                     	ds	2
   241  000076                     _tecla:
   242                           	callstack 0
   243  000076                     	ds	2
   244  000078                     _resultado:
   245                           	callstack 0
   246  000078                     	ds	2
   247  00007A                     _controle:
   248                           	callstack 0
   249  00007A                     	ds	2
   250  00007C                     _Numero2:
   251                           	callstack 0
   252  00007C                     	ds	2
   253  00007E                     _Numero1:
   254                           	callstack 0
   255  00007E                     	ds	2
   256  000080                     _dbuf:
   257                           	callstack 0
   258  000080                     	ds	32
   259  0000A0                     _linha2:
   260                           	callstack 0
   261  0000A0                     	ds	16
   262                           
   263                           	psect	dataBANK0
   264  0000C0                     __pdataBANK0:
   265                           	callstack 0
   266  0000C0                     _cont:
   267                           	callstack 0
   268  0000C0                     	ds	2
   269                           
   270                           	psect	cstackBANK0
   271  0000B0                     __pcstackBANK0:
   272                           	callstack 0
   273  0000B0                     vfprintf@cfmt:
   274                           	callstack 0
   275                           
   276                           ; 2 bytes @ 0x0
   277  0000B0                     	ds	2
   278  0000B2                     ?_sprintf:
   279                           	callstack 0
   280  0000B2                     sprintf@s:
   281                           	callstack 0
   282                           
   283                           ; 2 bytes @ 0x2
   284  0000B2                     	ds	2
   285  0000B4                     sprintf@fmt:
   286                           	callstack 0
   287                           
   288                           ; 2 bytes @ 0x4
   289  0000B4                     	ds	4
   290  0000B8                     sprintf@ap:
   291                           	callstack 0
   292                           
   293                           ; 2 bytes @ 0x8
   294  0000B8                     	ds	2
   295  0000BA                     sprintf@f:
   296                           	callstack 0
   297                           
   298                           ; 6 bytes @ 0xA
   299  0000BA                     	ds	6
   300                           
   301                           	psect	cstackCOMRAM
   302  000001                     __pcstackCOMRAM:
   303                           	callstack 0
   304  000001                     ??_interrupcao:
   305  000001                     
   306                           ; 1 bytes @ 0x0
   307  000001                     	ds	1
   308  000002                     ?_strlen:
   309                           	callstack 0
   310  000002                     ?___awdiv:
   311                           	callstack 0
   312  000002                     ?___aodiv:
   313                           	callstack 0
   314  000002                     ?___aomod:
   315                           	callstack 0
   316  000002                     Lcd_Port@a:
   317                           	callstack 0
   318  000002                     ___awdiv@dividend:
   319                           	callstack 0
   320  000002                     fputc@c:
   321                           	callstack 0
   322  000002                     strlen@s:
   323                           	callstack 0
   324  000002                     ___aodiv@dividend:
   325                           	callstack 0
   326  000002                     ___aomod@dividend:
   327                           	callstack 0
   328                           
   329                           ; 8 bytes @ 0x1
   330  000002                     	ds	1
   331  000003                     ??_Lcd_Cmd:
   332  000003                     Lcd_Write_Char@temp:
   333                           	callstack 0
   334                           
   335                           ; 1 bytes @ 0x2
   336  000003                     	ds	1
   337  000004                     Lcd_Cmd@a:
   338                           	callstack 0
   339  000004                     Lcd_Write_Char@y:
   340                           	callstack 0
   341  000004                     ___awdiv@divisor:
   342                           	callstack 0
   343  000004                     fputc@fp:
   344                           	callstack 0
   345  000004                     strlen@a:
   346                           	callstack 0
   347                           
   348                           ; 2 bytes @ 0x3
   349  000004                     	ds	1
   350  000005                     ??_Lcd_Init:
   351  000005                     Lcd_Set_Cursor@b:
   352                           	callstack 0
   353  000005                     Lcd_Write_Char@a:
   354                           	callstack 0
   355                           
   356                           ; 1 bytes @ 0x4
   357  000005                     	ds	1
   358  000006                     ??_fputc:
   359  000006                     Lcd_Set_Cursor@a:
   360                           	callstack 0
   361  000006                     ___awdiv@counter:
   362                           	callstack 0
   363  000006                     Lcd_Write_String@a:
   364                           	callstack 0
   365                           
   366                           ; 2 bytes @ 0x5
   367  000006                     	ds	1
   368  000007                     Lcd_Set_Cursor@z:
   369                           	callstack 0
   370  000007                     ___awdiv@sign:
   371                           	callstack 0
   372                           
   373                           ; 1 bytes @ 0x6
   374  000007                     	ds	1
   375  000008                     ??_Lcd_Write_String:
   376  000008                     Lcd_Set_Cursor@y:
   377                           	callstack 0
   378  000008                     ___awdiv@quotient:
   379                           	callstack 0
   380                           
   381                           ; 2 bytes @ 0x7
   382  000008                     	ds	1
   383  000009                     Lcd_Set_Cursor@temp:
   384                           	callstack 0
   385                           
   386                           ; 1 bytes @ 0x8
   387  000009                     	ds	1
   388  00000A                     Lcd_Write_String@i:
   389                           	callstack 0
   390  00000A                     ___aodiv@divisor:
   391                           	callstack 0
   392  00000A                     ___aomod@divisor:
   393                           	callstack 0
   394                           
   395                           ; 8 bytes @ 0x9
   396  00000A                     	ds	1
   397  00000B                     fputs@s:
   398                           	callstack 0
   399                           
   400                           ; 2 bytes @ 0xA
   401  00000B                     	ds	2
   402  00000D                     fputs@fp:
   403                           	callstack 0
   404                           
   405                           ; 2 bytes @ 0xC
   406  00000D                     	ds	2
   407  00000F                     fputs@c:
   408                           	callstack 0
   409                           
   410                           ; 1 bytes @ 0xE
   411  00000F                     	ds	1
   412  000010                     fputs@i:
   413                           	callstack 0
   414                           
   415                           ; 2 bytes @ 0xF
   416  000010                     	ds	2
   417  000012                     ?_pad:
   418                           	callstack 0
   419  000012                     ___aodiv@counter:
   420                           	callstack 0
   421  000012                     ___aomod@counter:
   422                           	callstack 0
   423  000012                     pad@fp:
   424                           	callstack 0
   425                           
   426                           ; 2 bytes @ 0x11
   427  000012                     	ds	1
   428  000013                     ___aodiv@sign:
   429                           	callstack 0
   430  000013                     ___aomod@sign:
   431                           	callstack 0
   432                           
   433                           ; 1 bytes @ 0x12
   434  000013                     	ds	1
   435  000014                     ?_abs:
   436                           	callstack 0
   437  000014                     pad@buf:
   438                           	callstack 0
   439  000014                     abs@a:
   440                           	callstack 0
   441  000014                     ___aodiv@quotient:
   442                           	callstack 0
   443                           
   444                           ; 8 bytes @ 0x13
   445  000014                     	ds	2
   446  000016                     ??_abs:
   447  000016                     pad@p:
   448                           	callstack 0
   449                           
   450                           ; 2 bytes @ 0x15
   451  000016                     	ds	2
   452  000018                     ??_pad:
   453                           
   454                           ; 1 bytes @ 0x17
   455  000018                     	ds	1
   456  000019                     pad@i:
   457                           	callstack 0
   458                           
   459                           ; 2 bytes @ 0x18
   460  000019                     	ds	2
   461  00001B                     pad@w:
   462                           	callstack 0
   463                           
   464                           ; 2 bytes @ 0x1A
   465  00001B                     	ds	2
   466  00001D                     ?_dtoa:
   467                           	callstack 0
   468  00001D                     dtoa@fp:
   469                           	callstack 0
   470                           
   471                           ; 2 bytes @ 0x1C
   472  00001D                     	ds	2
   473  00001F                     dtoa@d:
   474                           	callstack 0
   475                           
   476                           ; 8 bytes @ 0x1E
   477  00001F                     	ds	8
   478  000027                     ??_dtoa:
   479                           
   480                           ; 1 bytes @ 0x26
   481  000027                     	ds	8
   482  00002F                     _dtoa$708:
   483                           	callstack 0
   484                           
   485                           ; 2 bytes @ 0x2E
   486  00002F                     	ds	2
   487  000031                     dtoa@p:
   488                           	callstack 0
   489                           
   490                           ; 2 bytes @ 0x30
   491  000031                     	ds	2
   492  000033                     dtoa@w:
   493                           	callstack 0
   494                           
   495                           ; 2 bytes @ 0x32
   496  000033                     	ds	2
   497  000035                     dtoa@s:
   498                           	callstack 0
   499                           
   500                           ; 2 bytes @ 0x34
   501  000035                     	ds	2
   502  000037                     dtoa@n:
   503                           	callstack 0
   504                           
   505                           ; 8 bytes @ 0x36
   506  000037                     	ds	8
   507  00003F                     dtoa@i:
   508                           	callstack 0
   509                           
   510                           ; 2 bytes @ 0x3E
   511  00003F                     	ds	2
   512  000041                     ?_vfpfcnvrt:
   513                           	callstack 0
   514  000041                     vfpfcnvrt@fp:
   515                           	callstack 0
   516                           
   517                           ; 2 bytes @ 0x40
   518  000041                     	ds	2
   519  000043                     vfpfcnvrt@fmt:
   520                           	callstack 0
   521                           
   522                           ; 2 bytes @ 0x42
   523  000043                     	ds	2
   524  000045                     vfpfcnvrt@ap:
   525                           	callstack 0
   526                           
   527                           ; 2 bytes @ 0x44
   528  000045                     	ds	2
   529  000047                     ??_vfpfcnvrt:
   530                           
   531                           ; 1 bytes @ 0x46
   532  000047                     	ds	2
   533  000049                     vfpfcnvrt@ll:
   534                           	callstack 0
   535                           
   536                           ; 8 bytes @ 0x48
   537  000049                     	ds	8
   538  000051                     ?_vfprintf:
   539                           	callstack 0
   540  000051                     vfprintf@fp:
   541                           	callstack 0
   542                           
   543                           ; 2 bytes @ 0x50
   544  000051                     	ds	2
   545  000053                     vfprintf@fmt:
   546                           	callstack 0
   547                           
   548                           ; 2 bytes @ 0x52
   549  000053                     	ds	2
   550  000055                     vfprintf@ap:
   551                           	callstack 0
   552                           
   553                           ; 2 bytes @ 0x54
   554  000055                     	ds	2
   555  000057                     
   556                           ; 1 bytes @ 0x56
   557 ;;
   558 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   559 ;;
   560 ;; *************** function _main *****************
   561 ;; Defined at:
   562 ;;		line 79 in file "main.c"
   563 ;; Parameters:    Size  Location     Type
   564 ;;		None
   565 ;; Auto vars:     Size  Location     Type
   566 ;;		None
   567 ;; Return value:  Size  Location     Type
   568 ;;                  1    wreg      void 
   569 ;; Registers used:
   570 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   571 ;; Tracked objects:
   572 ;;		On entry : 0/0
   573 ;;		On exit  : 0/0
   574 ;;		Unchanged: 0/0
   575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   576 ;;      Params:         0       0       0       0       0       0       0       0       0
   577 ;;      Locals:         0       0       0       0       0       0       0       0       0
   578 ;;      Temps:          0       0       0       0       0       0       0       0       0
   579 ;;      Totals:         0       0       0       0       0       0       0       0       0
   580 ;;Total ram usage:        0 bytes
   581 ;; Hardware stack levels required when called: 9
   582 ;; This function calls:
   583 ;;		_Lcd_Init
   584 ;;		_Lcd_Set_Cursor
   585 ;;		_Lcd_Write_String
   586 ;;		___awdiv
   587 ;;		_setupInt
   588 ;;		_setupTmr0
   589 ;;		_sprintf
   590 ;; This function is called by:
   591 ;;		Startup code after reset
   592 ;; This function uses a non-reentrant model
   593 ;;
   594                           
   595                           	psect	text0
   596  000FAC                     __ptext0:
   597                           	callstack 0
   598  000FAC                     _main:
   599                           	callstack 22
   600  000FAC                     
   601                           ;main.c: 80:   OSCCON = 0b01100000;
   602  000FAC  0E60               	movlw	96
   603  000FAE  6ED3               	movwf	211,c	;volatile
   604                           
   605                           ;main.c: 81:   TRISD = 0;
   606  000FB0  0E00               	movlw	0
   607  000FB2  6E95               	movwf	149,c	;volatile
   608                           
   609                           ;main.c: 82:   TRISB = 0x03;
   610  000FB4  0E03               	movlw	3
   611  000FB6  6E93               	movwf	147,c	;volatile
   612                           
   613                           ;main.c: 83:   TRISE = 0x07;
   614  000FB8  0E07               	movlw	7
   615  000FBA  6E96               	movwf	150,c	;volatile
   616                           
   617                           ;main.c: 84:   ADCON1bits.PCFG = 0b1010;
   618  000FBC  50C1               	movf	193,w,c	;volatile
   619  000FBE  0BF0               	andlw	-16
   620  000FC0  090A               	iorlw	10
   621  000FC2  6EC1               	movwf	193,c	;volatile
   622  000FC4                     
   623                           ;main.c: 86:   Lcd_Init();
   624  000FC4  EC01  F00A         	call	_Lcd_Init	;wreg free
   625  000FC8                     
   626                           ;main.c: 87:   setupTmr0();
   627  000FC8  EC9D  F00B         	call	_setupTmr0	;wreg free
   628  000FCC                     
   629                           ;main.c: 89:   Lcd_Set_Cursor(1, 1);
   630  000FCC  0E01               	movlw	1
   631  000FCE  6E05               	movwf	Lcd_Set_Cursor@b^0,c
   632  000FD0  0E01               	movlw	1
   633  000FD2  EC3A  F00A         	call	_Lcd_Set_Cursor
   634  000FD6                     
   635                           ;main.c: 90:   Lcd_Write_String("Sensor");
   636  000FD6  0E27               	movlw	low STR_1
   637  000FD8  6E06               	movwf	Lcd_Write_String@a^0,c
   638  000FDA  0E08               	movlw	high STR_1
   639  000FDC  6E07               	movwf	(Lcd_Write_String@a+1)^0,c
   640  000FDE  ECC2  F009         	call	_Lcd_Write_String	;wreg free
   641  000FE2                     
   642                           ;main.c: 91:   Lcd_Set_Cursor(2, 1);
   643  000FE2  0E01               	movlw	1
   644  000FE4  6E05               	movwf	Lcd_Set_Cursor@b^0,c
   645  000FE6  0E02               	movlw	2
   646  000FE8  EC3A  F00A         	call	_Lcd_Set_Cursor
   647  000FEC                     
   648                           ;main.c: 92:   Lcd_Write_String("Tempo:  0 s");
   649  000FEC  0E1B               	movlw	low STR_2
   650  000FEE  6E06               	movwf	Lcd_Write_String@a^0,c
   651  000FF0  0E08               	movlw	high STR_2
   652  000FF2  6E07               	movwf	(Lcd_Write_String@a+1)^0,c
   653  000FF4  ECC2  F009         	call	_Lcd_Write_String	;wreg free
   654  000FF8                     
   655                           ;main.c: 94:   setupInt();
   656  000FF8  ECA6  F00B         	call	_setupInt	;wreg free
   657  000FFC                     l2165:
   658                           
   659                           ;main.c: 97:     if (cont > 1) {
   660  000FFC  0100               	movlb	0	; () banked
   661  000FFE  BFC1               	btfsc	(_cont+1)& (0+255),7,b
   662  001000  EF0B  F008         	goto	u1751
   663  001004  51C1               	movf	(_cont+1)& (0+255),w,b
   664  001006  E109               	bnz	u1750
   665  001008  0E02               	movlw	2
   666  00100A  5DC0               	subwf	_cont& (0+255),w,b
   667  00100C  A0D8               	btfss	status,0,c
   668  00100E  EF0B  F008         	goto	u1751
   669  001012  EF0D  F008         	goto	u1750
   670  001016                     u1751:
   671  001016  EF32  F008         	goto	l2173
   672  00101A                     u1750:
   673  00101A                     
   674                           ; BSR set to: 0
   675                           ;main.c: 98:        sprintf(linha2, "Tempo:  %i s", (cont /10));
   676  00101A  0EA0               	movlw	low _linha2
   677  00101C  6FB2               	movwf	sprintf@s& (0+255),b
   678  00101E  0E00               	movlw	high _linha2
   679  001020  6FB3               	movwf	(sprintf@s+1)& (0+255),b
   680  001022  0E0E               	movlw	low STR_3
   681  001024  6FB4               	movwf	sprintf@fmt& (0+255),b
   682  001026  0E08               	movlw	high STR_3
   683  001028  6FB5               	movwf	(sprintf@fmt+1)& (0+255),b
   684  00102A  C0C0  F002         	movff	_cont,___awdiv@dividend
   685  00102E  C0C1  F003         	movff	_cont+1,___awdiv@dividend+1
   686  001032  0E00               	movlw	0
   687  001034  6E05               	movwf	(___awdiv@divisor+1)^0,c
   688  001036  0E0A               	movlw	10
   689  001038  6E04               	movwf	___awdiv@divisor^0,c
   690  00103A  ECB3  F008         	call	___awdiv	;wreg free
   691  00103E  C002  F0B6         	movff	?___awdiv,?_sprintf+4
   692  001042  C003  F0B7         	movff	?___awdiv+1,?_sprintf+5
   693  001046  ECCC  F00A         	call	_sprintf	;wreg free
   694  00104A                     
   695                           ;main.c: 99:        Lcd_Set_Cursor(2, 1);
   696  00104A  0E01               	movlw	1
   697  00104C  6E05               	movwf	Lcd_Set_Cursor@b^0,c
   698  00104E  0E02               	movlw	2
   699  001050  EC3A  F00A         	call	_Lcd_Set_Cursor
   700  001054                     l2171:
   701                           
   702                           ;main.c: 100:        Lcd_Write_String(linha2);
   703  001054  0EA0               	movlw	low _linha2
   704  001056  6E06               	movwf	Lcd_Write_String@a^0,c
   705  001058  0E00               	movlw	high _linha2
   706  00105A  6E07               	movwf	(Lcd_Write_String@a+1)^0,c
   707  00105C  ECC2  F009         	call	_Lcd_Write_String	;wreg free
   708                           
   709                           ;main.c: 101:     } else if (periodo == 0) {
   710  001060  EFFE  F007         	goto	l2165
   711  001064                     l2173:
   712                           
   713                           ; BSR set to: 0
   714  001064  5174               	movf	_periodo& (0+255),w,b
   715  001066  1175               	iorwf	(_periodo+1)& (0+255),w,b
   716  001068  A4D8               	btfss	status,2,c
   717  00106A  EF39  F008         	goto	u1761
   718  00106E  EF3B  F008         	goto	u1760
   719  001072                     u1761:
   720  001072  EFFE  F007         	goto	l2165
   721  001076                     u1760:
   722  001076                     
   723                           ; BSR set to: 0
   724                           ;main.c: 102:         sprintf(linha2, "Tempo:  0 s ");
   725  001076  0EA0               	movlw	low _linha2
   726  001078  6FB2               	movwf	sprintf@s& (0+255),b
   727  00107A  0E00               	movlw	high _linha2
   728  00107C  6FB3               	movwf	(sprintf@s+1)& (0+255),b
   729  00107E  0E01               	movlw	low STR_4
   730  001080  6FB4               	movwf	sprintf@fmt& (0+255),b
   731  001082  0E08               	movlw	high STR_4
   732  001084  6FB5               	movwf	(sprintf@fmt+1)& (0+255),b
   733  001086  ECCC  F00A         	call	_sprintf	;wreg free
   734  00108A                     
   735                           ;main.c: 103:        Lcd_Set_Cursor(2, 1);
   736  00108A  0E01               	movlw	1
   737  00108C  6E05               	movwf	Lcd_Set_Cursor@b^0,c
   738  00108E  0E02               	movlw	2
   739  001090  EC3A  F00A         	call	_Lcd_Set_Cursor
   740  001094  EF2A  F008         	goto	l2171
   741  001098  EF07  F000         	goto	start
   742  00109C                     __end_of_main:
   743                           	callstack 0
   744                           
   745 ;; *************** function _sprintf *****************
   746 ;; Defined at:
   747 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_sprintf.c"
   748 ;; Parameters:    Size  Location     Type
   749 ;;  s               2    2[BANK0 ] PTR unsigned char 
   750 ;;		 -> linha2(16), 
   751 ;;  fmt             2    4[BANK0 ] PTR const unsigned char 
   752 ;;		 -> STR_4(13), STR_3(13), 
   753 ;; Auto vars:     Size  Location     Type
   754 ;;  f               6   10[BANK0 ] struct _IO_FILE
   755 ;;  ap              2    8[BANK0 ] PTR void [1]
   756 ;;		 -> ?_sprintf(2), 
   757 ;;  ret             2    0        int 
   758 ;; Return value:  Size  Location     Type
   759 ;;                  2    2[BANK0 ] int 
   760 ;; Registers used:
   761 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   762 ;; Tracked objects:
   763 ;;		On entry : 0/0
   764 ;;		On exit  : 0/0
   765 ;;		Unchanged: 0/0
   766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   767 ;;      Params:         0       6       0       0       0       0       0       0       0
   768 ;;      Locals:         0       8       0       0       0       0       0       0       0
   769 ;;      Temps:          0       0       0       0       0       0       0       0       0
   770 ;;      Totals:         0      14       0       0       0       0       0       0       0
   771 ;;Total ram usage:       14 bytes
   772 ;; Hardware stack levels used: 1
   773 ;; Hardware stack levels required when called: 8
   774 ;; This function calls:
   775 ;;		_vfprintf
   776 ;; This function is called by:
   777 ;;		_main
   778 ;; This function uses a non-reentrant model
   779 ;;
   780                           
   781                           	psect	text1
   782  001598                     __ptext1:
   783                           	callstack 0
   784  001598                     _sprintf:
   785                           	callstack 22
   786  001598  0EB6               	movlw	low (?_sprintf+4)
   787  00159A  0100               	movlb	0	; () banked
   788  00159C  6FB8               	movwf	sprintf@ap& (0+255),b
   789  00159E  0E00               	movlw	high (?_sprintf+4)
   790  0015A0  6FB9               	movwf	(sprintf@ap+1)& (0+255),b
   791  0015A2  C0B2  F0BA         	movff	sprintf@s,sprintf@f
   792  0015A6  C0B3  F0BB         	movff	sprintf@s+1,sprintf@f+1
   793  0015AA                     
   794                           ; BSR set to: 0
   795  0015AA  0E00               	movlw	0
   796  0015AC  6FBD               	movwf	(sprintf@f+3)& (0+255),b
   797  0015AE  0E00               	movlw	0
   798  0015B0  6FBC               	movwf	(sprintf@f+2)& (0+255),b
   799  0015B2                     
   800                           ; BSR set to: 0
   801  0015B2  0E00               	movlw	0
   802  0015B4  6FBF               	movwf	(sprintf@f+5)& (0+255),b
   803  0015B6  0E00               	movlw	0
   804  0015B8  6FBE               	movwf	(sprintf@f+4)& (0+255),b
   805  0015BA                     
   806                           ; BSR set to: 0
   807  0015BA  0EBA               	movlw	low sprintf@f
   808  0015BC  6E51               	movwf	vfprintf@fp^0,c
   809  0015BE  0E00               	movlw	high sprintf@f
   810  0015C0  6E52               	movwf	(vfprintf@fp+1)^0,c
   811  0015C2  C0B4  F053         	movff	sprintf@fmt,vfprintf@fmt
   812  0015C6  C0B5  F054         	movff	sprintf@fmt+1,vfprintf@fmt+1
   813  0015CA  0EB8               	movlw	low sprintf@ap
   814  0015CC  6E55               	movwf	vfprintf@ap^0,c
   815  0015CE  0E00               	movlw	high sprintf@ap
   816  0015D0  6E56               	movwf	(vfprintf@ap+1)^0,c
   817  0015D2  EC6D  F00A         	call	_vfprintf	;wreg free
   818  0015D6  0100               	movlb	0	; () banked
   819  0015D8  51BC               	movf	(sprintf@f+2)& (0+255),w,b
   820  0015DA  25B2               	addwf	sprintf@s& (0+255),w,b
   821  0015DC  6ED9               	movwf	fsr2l,c
   822  0015DE  51BD               	movf	(sprintf@f+3)& (0+255),w,b
   823  0015E0  21B3               	addwfc	(sprintf@s+1)& (0+255),w,b
   824  0015E2  6EDA               	movwf	fsr2h,c
   825  0015E4  0E00               	movlw	0
   826  0015E6  6EDF               	movwf	indf2,c
   827  0015E8                     
   828                           ; BSR set to: 0
   829  0015E8  0012               	return		;funcret
   830  0015EA                     __end_of_sprintf:
   831                           	callstack 0
   832                           
   833 ;; *************** function _vfprintf *****************
   834 ;; Defined at:
   835 ;;		line 1390 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
   836 ;; Parameters:    Size  Location     Type
   837 ;;  fp              2   80[COMRAM] PTR struct _IO_FILE
   838 ;;		 -> sprintf@f(6), 
   839 ;;  fmt             2   82[COMRAM] PTR const unsigned char 
   840 ;;		 -> STR_4(13), STR_3(13), 
   841 ;;  ap              2   84[COMRAM] PTR PTR void 
   842 ;;		 -> sprintf@ap(2), 
   843 ;; Auto vars:     Size  Location     Type
   844 ;;  cfmt            2    0[BANK0 ] PTR unsigned char 
   845 ;;		 -> STR_4(13), STR_3(13), 
   846 ;; Return value:  Size  Location     Type
   847 ;;                  2   80[COMRAM] int 
   848 ;; Registers used:
   849 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   850 ;; Tracked objects:
   851 ;;		On entry : 0/0
   852 ;;		On exit  : 0/0
   853 ;;		Unchanged: 0/0
   854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   855 ;;      Params:         6       0       0       0       0       0       0       0       0
   856 ;;      Locals:         0       2       0       0       0       0       0       0       0
   857 ;;      Temps:          0       0       0       0       0       0       0       0       0
   858 ;;      Totals:         6       2       0       0       0       0       0       0       0
   859 ;;Total ram usage:        8 bytes
   860 ;; Hardware stack levels used: 1
   861 ;; Hardware stack levels required when called: 7
   862 ;; This function calls:
   863 ;;		_vfpfcnvrt
   864 ;; This function is called by:
   865 ;;		_sprintf
   866 ;; This function uses a non-reentrant model
   867 ;;
   868                           
   869                           	psect	text2
   870  0014DA                     __ptext2:
   871                           	callstack 0
   872  0014DA                     _vfprintf:
   873                           	callstack 22
   874  0014DA                     
   875                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1390: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.32\pic\source
      +                          s\c99\common\doprnt.c: 1391: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\comm
      +                          on\doprnt.c: 1393:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\
      +                          common\doprnt.c: 1395:     cfmt = (char *)fmt;
   876  0014DA  C053  F0B0         	movff	vfprintf@fmt,vfprintf@cfmt
   877  0014DE  C054  F0B1         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   878  0014E2                     
   879                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1396:     nout = 
      +                          0;
   880  0014E2  0E00               	movlw	0
   881  0014E4  0100               	movlb	0	; () banked
   882  0014E6  6F71               	movwf	(_nout+1)& (0+255),b
   883  0014E8  0E00               	movlw	0
   884  0014EA  6F70               	movwf	_nout& (0+255),b
   885                           
   886                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
   887  0014EC  EF8B  F00A         	goto	l2135
   888  0014F0                     l2133:
   889                           
   890                           ; BSR set to: 0
   891                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1398:         nou
      +                          t += vfpfcnvrt(fp, &cfmt, ap);
   892  0014F0  C051  F041         	movff	vfprintf@fp,vfpfcnvrt@fp
   893  0014F4  C052  F042         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   894  0014F8  0EB0               	movlw	low vfprintf@cfmt
   895  0014FA  6E43               	movwf	vfpfcnvrt@fmt^0,c
   896  0014FC  0E00               	movlw	high vfprintf@cfmt
   897  0014FE  6E44               	movwf	(vfpfcnvrt@fmt+1)^0,c
   898  001500  C055  F045         	movff	vfprintf@ap,vfpfcnvrt@ap
   899  001504  C056  F046         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   900  001508  EC87  F005         	call	_vfpfcnvrt	;wreg free
   901  00150C  5041               	movf	?_vfpfcnvrt^0,w,c
   902  00150E  0100               	movlb	0	; () banked
   903  001510  2770               	addwf	_nout& (0+255),f,b
   904  001512  5042               	movf	(?_vfpfcnvrt+1)^0,w,c
   905  001514  2371               	addwfc	(_nout+1)& (0+255),f,b
   906  001516                     l2135:
   907                           
   908                           ; BSR set to: 0
   909                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
   910  001516  C0B0  FFF6         	movff	vfprintf@cfmt,tblptrl
   911  00151A  C0B1  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   912  00151E                     	if	0	;tblptru may be non-zero
   913  00151E                     	endif
   914  00151E                     	if	0	;tblptru may be non-zero
   915  00151E                     	endif
   916  00151E  0008               	tblrd		*
   917  001520  50F5               	movf	tablat,w,c
   918  001522  0900               	iorlw	0
   919  001524  A4D8               	btfss	status,2,c
   920  001526  EF97  F00A         	goto	u1741
   921  00152A  EF99  F00A         	goto	u1740
   922  00152E                     u1741:
   923  00152E  EF78  F00A         	goto	l2133
   924  001532                     u1740:
   925  001532                     
   926                           ; BSR set to: 0
   927                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1400:     return 
      +                          nout;
   928  001532  C070  F051         	movff	_nout,?_vfprintf
   929  001536  C071  F052         	movff	_nout+1,?_vfprintf+1
   930  00153A                     
   931                           ; BSR set to: 0
   932  00153A  0012               	return		;funcret
   933  00153C                     __end_of_vfprintf:
   934                           	callstack 0
   935                           
   936 ;; *************** function _vfpfcnvrt *****************
   937 ;; Defined at:
   938 ;;		line 692 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
   939 ;; Parameters:    Size  Location     Type
   940 ;;  fp              2   64[COMRAM] PTR struct _IO_FILE
   941 ;;		 -> sprintf@f(6), 
   942 ;;  fmt             2   66[COMRAM] PTR PTR unsigned char 
   943 ;;		 -> vfprintf@cfmt(2), 
   944 ;;  ap              2   68[COMRAM] PTR PTR void 
   945 ;;		 -> sprintf@ap(2), 
   946 ;; Auto vars:     Size  Location     Type
   947 ;;  ll              8   72[COMRAM] long long 
   948 ;;  llu             8    0        unsigned long long 
   949 ;;  f               4    0        unsigned long long 
   950 ;;  vp              3    0        PTR void 
   951 ;;  ct              3    0        unsigned char [3]
   952 ;;  cp              3    0        PTR unsigned char 
   953 ;;  i               2    0        int 
   954 ;;  done            2    0        int 
   955 ;;  c               1    0        unsigned char 
   956 ;; Return value:  Size  Location     Type
   957 ;;                  2   64[COMRAM] int 
   958 ;; Registers used:
   959 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   960 ;; Tracked objects:
   961 ;;		On entry : 0/0
   962 ;;		On exit  : 0/0
   963 ;;		Unchanged: 0/0
   964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   965 ;;      Params:         6       0       0       0       0       0       0       0       0
   966 ;;      Locals:         8       0       0       0       0       0       0       0       0
   967 ;;      Temps:          2       0       0       0       0       0       0       0       0
   968 ;;      Totals:        16       0       0       0       0       0       0       0       0
   969 ;;Total ram usage:       16 bytes
   970 ;; Hardware stack levels used: 1
   971 ;; Hardware stack levels required when called: 6
   972 ;; This function calls:
   973 ;;		_dtoa
   974 ;;		_fputc
   975 ;; This function is called by:
   976 ;;		_vfprintf
   977 ;; This function uses a non-reentrant model
   978 ;;
   979                           
   980                           	psect	text3
   981  000B0E                     __ptext3:
   982                           	callstack 0
   983  000B0E                     _vfpfcnvrt:
   984                           	callstack 22
   985  000B0E                     
   986                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 692: static int v
      +                          fpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.32\pic\sou
      +                          rces\c99\common\doprnt.c: 693: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\co
      +                          mmon\doprnt.c: 694:     char c, *cp, ct[3];;C:\Program Files\Microchip\xc8\v2.32\pic\sou
      +                          rces\c99\common\doprnt.c: 695:     int done, i;;C:\Program Files\Microchip\xc8\v2.32\pic
      +                          \sources\c99\common\doprnt.c: 696:     long long ll;;C:\Program Files\Microchip\xc8\v2.3
      +                          2\pic\sources\c99\common\doprnt.c: 697:     unsigned long long llu;
   987  000B0E  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   988  000B12  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   989  000B16  CFDE FFF6          	movff	postinc2,tblptrl
   990  000B1A  CFDD FFF7          	movff	postdec2,tblptrh
   991  000B1E                     	if	0	;tblptru may be non-zero
   992  000B1E                     	endif
   993  000B1E                     	if	0	;tblptru may be non-zero
   994  000B1E                     	endif
   995  000B1E  0008               	tblrd		*
   996  000B20  50F5               	movf	tablat,w,c
   997  000B22  0A25               	xorlw	37
   998  000B24  A4D8               	btfss	status,2,c
   999  000B26  EF97  F005         	goto	u1701
  1000  000B2A  EF99  F005         	goto	u1700
  1001  000B2E                     u1701:
  1002  000B2E  EF44  F006         	goto	l2121
  1003  000B32                     u1700:
  1004  000B32                     
  1005                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 703:         ++*f
      +                          mt;
  1006  000B32  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1007  000B36  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1008  000B3A  2ADE               	incf	postinc2,f,c
  1009  000B3C  0E00               	movlw	0
  1010  000B3E  22DD               	addwfc	postdec2,f,c
  1011  000B40                     
  1012                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 705:         flag
      +                          s = width = 0;
  1013  000B40  0E00               	movlw	0
  1014  000B42  6E58               	movwf	(_width+1)^0,c
  1015  000B44  0E00               	movlw	0
  1016  000B46  6E57               	movwf	_width^0,c
  1017  000B48  C057  F05B         	movff	_width,_flags
  1018  000B4C  C058  F05C         	movff	_width+1,_flags+1
  1019  000B50                     
  1020                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 706:         prec
      +                           = -1;
  1021  000B50  6859               	setf	_prec^0,c
  1022  000B52  685A               	setf	(_prec+1)^0,c
  1023  000B54                     
  1024                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 847:         if (
      +                          (*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  1025  000B54  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1026  000B58  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1027  000B5C  CFDE FFF6          	movff	postinc2,tblptrl
  1028  000B60  CFDD FFF7          	movff	postdec2,tblptrh
  1029  000B64                     	if	0	;tblptru may be non-zero
  1030  000B64                     	endif
  1031  000B64                     	if	0	;tblptru may be non-zero
  1032  000B64                     	endif
  1033  000B64  0008               	tblrd		*
  1034  000B66  50F5               	movf	tablat,w,c
  1035  000B68  0A64               	xorlw	100
  1036  000B6A  B4D8               	btfsc	status,2,c
  1037  000B6C  EFBA  F005         	goto	u1711
  1038  000B70  EFBC  F005         	goto	u1710
  1039  000B74                     u1711:
  1040  000B74  EFCE  F005         	goto	l2099
  1041  000B78                     u1710:
  1042  000B78  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1043  000B7C  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1044  000B80  CFDE FFF6          	movff	postinc2,tblptrl
  1045  000B84  CFDD FFF7          	movff	postdec2,tblptrh
  1046  000B88                     	if	0	;tblptru may be non-zero
  1047  000B88                     	endif
  1048  000B88                     	if	0	;tblptru may be non-zero
  1049  000B88                     	endif
  1050  000B88  0008               	tblrd		*
  1051  000B8A  50F5               	movf	tablat,w,c
  1052  000B8C  0A69               	xorlw	105
  1053  000B8E  A4D8               	btfss	status,2,c
  1054  000B90  EFCC  F005         	goto	u1721
  1055  000B94  EFCE  F005         	goto	u1720
  1056  000B98                     u1721:
  1057  000B98  EF0E  F006         	goto	l2105
  1058  000B9C                     u1720:
  1059  000B9C                     l2099:
  1060                           
  1061                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 849:             
      +                          ++*fmt;
  1062  000B9C  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1063  000BA0  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1064  000BA4  2ADE               	incf	postinc2,f,c
  1065  000BA6  0E00               	movlw	0
  1066  000BA8  22DD               	addwfc	postdec2,f,c
  1067                           
  1068                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 850:             
      +                          ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1069  000BAA  C045  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1070  000BAE  C046  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1071  000BB2  CFDF F047          	movff	indf2,??_vfpfcnvrt
  1072  000BB6  0E02               	movlw	2
  1073  000BB8  26DE               	addwf	postinc2,f,c
  1074  000BBA  CFDF F048          	movff	indf2,??_vfpfcnvrt+1
  1075  000BBE  0E00               	movlw	0
  1076  000BC0  22DD               	addwfc	postdec2,f,c
  1077  000BC2  C047  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1078  000BC6  C048  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1079  000BCA  CFDE F049          	movff	postinc2,vfpfcnvrt@ll
  1080  000BCE  CFDD F04A          	movff	postdec2,vfpfcnvrt@ll+1
  1081  000BD2  0E00               	movlw	0
  1082  000BD4  BE4A               	btfsc	(vfpfcnvrt@ll+1)^0,7,c
  1083  000BD6  0EFF               	movlw	-1
  1084  000BD8  6E4B               	movwf	(vfpfcnvrt@ll+2)^0,c
  1085  000BDA  6E4C               	movwf	(vfpfcnvrt@ll+3)^0,c
  1086  000BDC  6E4D               	movwf	(vfpfcnvrt@ll+4)^0,c
  1087  000BDE  6E4E               	movwf	(vfpfcnvrt@ll+5)^0,c
  1088  000BE0  6E4F               	movwf	(vfpfcnvrt@ll+6)^0,c
  1089  000BE2  6E50               	movwf	(vfpfcnvrt@ll+7)^0,c
  1090  000BE4                     
  1091                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 852:             
      +                          return dtoa(fp, ll);
  1092  000BE4  C041  F01D         	movff	vfpfcnvrt@fp,dtoa@fp
  1093  000BE8  C042  F01E         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1094  000BEC  C049  F01F         	movff	vfpfcnvrt@ll,dtoa@d
  1095  000BF0  C04A  F020         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1096  000BF4  C04B  F021         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1097  000BF8  C04C  F022         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1098  000BFC  C04D  F023         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1099  000C00  C04E  F024         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1100  000C04  C04F  F025         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1101  000C08  C050  F026         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1102  000C0C  EC18  F004         	call	_dtoa	;wreg free
  1103  000C10  C01D  F041         	movff	?_dtoa,?_vfpfcnvrt
  1104  000C14  C01E  F042         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1105  000C18  EF5F  F006         	goto	l886
  1106  000C1C                     l2105:
  1107                           
  1108                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1372:         if 
      +                          ((*fmt)[0] == '%') {
  1109  000C1C  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1110  000C20  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1111  000C24  CFDE FFF6          	movff	postinc2,tblptrl
  1112  000C28  CFDD FFF7          	movff	postdec2,tblptrh
  1113  000C2C                     	if	0	;tblptru may be non-zero
  1114  000C2C                     	endif
  1115  000C2C                     	if	0	;tblptru may be non-zero
  1116  000C2C                     	endif
  1117  000C2C  0008               	tblrd		*
  1118  000C2E  50F5               	movf	tablat,w,c
  1119  000C30  0A25               	xorlw	37
  1120  000C32  A4D8               	btfss	status,2,c
  1121  000C34  EF1E  F006         	goto	u1731
  1122  000C38  EF20  F006         	goto	u1730
  1123  000C3C                     u1731:
  1124  000C3C  EF37  F006         	goto	l2115
  1125  000C40                     u1730:
  1126  000C40                     
  1127                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1373:            
      +                           ++*fmt;
  1128  000C40  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1129  000C44  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1130  000C48  2ADE               	incf	postinc2,f,c
  1131  000C4A  0E00               	movlw	0
  1132  000C4C  22DD               	addwfc	postdec2,f,c
  1133  000C4E                     
  1134                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1374:            
      +                           fputc((int)'%', fp);
  1135  000C4E  0E00               	movlw	0
  1136  000C50  6E03               	movwf	(fputc@c+1)^0,c
  1137  000C52  0E25               	movlw	37
  1138  000C54  6E02               	movwf	fputc@c^0,c
  1139  000C56  C041  F004         	movff	vfpfcnvrt@fp,fputc@fp
  1140  000C5A  C042  F005         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1141  000C5E  EC4E  F008         	call	_fputc	;wreg free
  1142  000C62                     l2111:
  1143                           
  1144                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1375:            
      +                           return 1;
  1145  000C62  0E00               	movlw	0
  1146  000C64  6E42               	movwf	(?_vfpfcnvrt+1)^0,c
  1147  000C66  0E01               	movlw	1
  1148  000C68  6E41               	movwf	?_vfpfcnvrt^0,c
  1149  000C6A  EF5F  F006         	goto	l886
  1150  000C6E                     l2115:
  1151                           
  1152                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1379:         ++*
      +                          fmt;
  1153  000C6E  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1154  000C72  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1155  000C76  2ADE               	incf	postinc2,f,c
  1156  000C78  0E00               	movlw	0
  1157  000C7A  22DD               	addwfc	postdec2,f,c
  1158  000C7C                     
  1159                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1380:         ret
      +                          urn 0;
  1160  000C7C  0E00               	movlw	0
  1161  000C7E  6E42               	movwf	(?_vfpfcnvrt+1)^0,c
  1162  000C80  0E00               	movlw	0
  1163  000C82  6E41               	movwf	?_vfpfcnvrt^0,c
  1164  000C84  EF5F  F006         	goto	l886
  1165  000C88                     l2121:
  1166                           
  1167                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1384:     fputc((
      +                          int)(*fmt)[0], fp);
  1168  000C88  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1169  000C8C  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1170  000C90  CFDE FFF6          	movff	postinc2,tblptrl
  1171  000C94  CFDD FFF7          	movff	postdec2,tblptrh
  1172  000C98                     	if	0	;tblptru may be non-zero
  1173  000C98                     	endif
  1174  000C98                     	if	0	;tblptru may be non-zero
  1175  000C98                     	endif
  1176  000C98  0008               	tblrd		*
  1177  000C9A  50F5               	movf	tablat,w,c
  1178  000C9C  6E02               	movwf	fputc@c^0,c
  1179  000C9E  6A03               	clrf	(fputc@c+1)^0,c
  1180  000CA0  C041  F004         	movff	vfpfcnvrt@fp,fputc@fp
  1181  000CA4  C042  F005         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1182  000CA8  EC4E  F008         	call	_fputc	;wreg free
  1183  000CAC                     
  1184                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1385:     ++*fmt;
  1185  000CAC  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1186  000CB0  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1187  000CB4  2ADE               	incf	postinc2,f,c
  1188  000CB6  0E00               	movlw	0
  1189  000CB8  22DD               	addwfc	postdec2,f,c
  1190  000CBA  EF31  F006         	goto	l2111
  1191  000CBE                     l886:
  1192  000CBE  0012               	return		;funcret
  1193  000CC0                     __end_of_vfpfcnvrt:
  1194                           	callstack 0
  1195                           
  1196 ;; *************** function _dtoa *****************
  1197 ;; Defined at:
  1198 ;;		line 287 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
  1199 ;; Parameters:    Size  Location     Type
  1200 ;;  fp              2   28[COMRAM] PTR struct _IO_FILE
  1201 ;;		 -> sprintf@f(6), 
  1202 ;;  d               8   30[COMRAM] long long 
  1203 ;; Auto vars:     Size  Location     Type
  1204 ;;  n               8   54[COMRAM] long long 
  1205 ;;  i               2   62[COMRAM] int 
  1206 ;;  s               2   52[COMRAM] int 
  1207 ;;  w               2   50[COMRAM] int 
  1208 ;;  p               2   48[COMRAM] int 
  1209 ;; Return value:  Size  Location     Type
  1210 ;;                  2   28[COMRAM] int 
  1211 ;; Registers used:
  1212 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1213 ;; Tracked objects:
  1214 ;;		On entry : 0/0
  1215 ;;		On exit  : 0/0
  1216 ;;		Unchanged: 0/0
  1217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1218 ;;      Params:        10       0       0       0       0       0       0       0       0
  1219 ;;      Locals:        18       0       0       0       0       0       0       0       0
  1220 ;;      Temps:          8       0       0       0       0       0       0       0       0
  1221 ;;      Totals:        36       0       0       0       0       0       0       0       0
  1222 ;;Total ram usage:       36 bytes
  1223 ;; Hardware stack levels used: 1
  1224 ;; Hardware stack levels required when called: 5
  1225 ;; This function calls:
  1226 ;;		___aodiv
  1227 ;;		___aomod
  1228 ;;		_abs
  1229 ;;		_pad
  1230 ;; This function is called by:
  1231 ;;		_vfpfcnvrt
  1232 ;; This function uses a non-reentrant model
  1233 ;;
  1234                           
  1235                           	psect	text4
  1236  000830                     __ptext4:
  1237                           	callstack 0
  1238  000830                     _dtoa:
  1239                           	callstack 22
  1240  000830                     
  1241                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 287: static int d
      +                          toa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\d
      +                          oprnt.c: 288: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 28
      +                          9:     int i, p, s, w;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprn
      +                          t.c: 290:     long long n;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\d
      +                          oprnt.c: 293:     n = d;
  1242  000830  C01F  F037         	movff	dtoa@d,dtoa@n
  1243  000834  C020  F038         	movff	dtoa@d+1,dtoa@n+1
  1244  000838  C021  F039         	movff	dtoa@d+2,dtoa@n+2
  1245  00083C  C022  F03A         	movff	dtoa@d+3,dtoa@n+3
  1246  000840  C023  F03B         	movff	dtoa@d+4,dtoa@n+4
  1247  000844  C024  F03C         	movff	dtoa@d+5,dtoa@n+5
  1248  000848  C025  F03D         	movff	dtoa@d+6,dtoa@n+6
  1249  00084C  C026  F03E         	movff	dtoa@d+7,dtoa@n+7
  1250  000850                     
  1251                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 294:     s = n < 
      +                          0 ? 1 : 0;
  1252  000850  BE3E               	btfsc	(dtoa@n+7)^0,7,c
  1253  000852  EF2D  F004         	goto	u1551
  1254  000856  EF30  F004         	goto	u1550
  1255  00085A                     u1551:
  1256  00085A  0E01               	movlw	1
  1257  00085C  EF31  F004         	goto	u1560
  1258  000860                     u1550:
  1259  000860  0E00               	movlw	0
  1260  000862                     u1560:
  1261  000862  6E35               	movwf	dtoa@s^0,c
  1262  000864  6A36               	clrf	(dtoa@s+1)^0,c
  1263                           
  1264                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 295:     if (s) {
  1265  000866  5035               	movf	dtoa@s^0,w,c
  1266  000868  1036               	iorwf	(dtoa@s+1)^0,w,c
  1267  00086A  B4D8               	btfsc	status,2,c
  1268  00086C  EF3A  F004         	goto	u1571
  1269  000870  EF3C  F004         	goto	u1570
  1270  000874                     u1571:
  1271  000874  EF4C  F004         	goto	l2031
  1272  000878                     u1570:
  1273  000878                     
  1274                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 296:         n = 
      +                          -n;
  1275  000878  1E3E               	comf	(dtoa@n+7)^0,f,c
  1276  00087A  1E3D               	comf	(dtoa@n+6)^0,f,c
  1277  00087C  1E3C               	comf	(dtoa@n+5)^0,f,c
  1278  00087E  1E3B               	comf	(dtoa@n+4)^0,f,c
  1279  000880  1E3A               	comf	(dtoa@n+3)^0,f,c
  1280  000882  1E39               	comf	(dtoa@n+2)^0,f,c
  1281  000884  1E38               	comf	(dtoa@n+1)^0,f,c
  1282  000886  6C37               	negf	dtoa@n^0,c
  1283  000888  0E00               	movlw	0
  1284  00088A  2238               	addwfc	(dtoa@n+1)^0,f,c
  1285  00088C  2239               	addwfc	(dtoa@n+2)^0,f,c
  1286  00088E  223A               	addwfc	(dtoa@n+3)^0,f,c
  1287  000890  223B               	addwfc	(dtoa@n+4)^0,f,c
  1288  000892  223C               	addwfc	(dtoa@n+5)^0,f,c
  1289  000894  223D               	addwfc	(dtoa@n+6)^0,f,c
  1290  000896  223E               	addwfc	(dtoa@n+7)^0,f,c
  1291  000898                     l2031:
  1292                           
  1293                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 300:     if (!(pr
      +                          ec < 0)) {
  1294  000898  BE5A               	btfsc	(_prec+1)^0,7,c
  1295  00089A  EF51  F004         	goto	u1581
  1296  00089E  EF53  F004         	goto	u1580
  1297  0008A2                     u1581:
  1298  0008A2  EF54  F004         	goto	l2035
  1299  0008A6                     u1580:
  1300  0008A6                     
  1301                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 301:         flag
      +                          s &= ~(1 << 1);
  1302  0008A6  925B               	bcf	_flags^0,1,c
  1303  0008A8                     l2035:
  1304                           
  1305                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 303:     p = (0 <
      +                           prec) ? prec : 1;
  1306  0008A8  BE5A               	btfsc	(_prec+1)^0,7,c
  1307  0008AA  EF61  F004         	goto	u1590
  1308  0008AE  505A               	movf	(_prec+1)^0,w,c
  1309  0008B0  E106               	bnz	u1591
  1310  0008B2  0459               	decf	_prec^0,w,c
  1311  0008B4  B0D8               	btfsc	status,0,c
  1312  0008B6  EF5F  F004         	goto	u1591
  1313  0008BA  EF61  F004         	goto	u1590
  1314  0008BE                     u1591:
  1315  0008BE  EF67  F004         	goto	l859
  1316  0008C2                     u1590:
  1317  0008C2  0E00               	movlw	0
  1318  0008C4  6E32               	movwf	(dtoa@p+1)^0,c
  1319  0008C6  0E01               	movlw	1
  1320  0008C8  6E31               	movwf	dtoa@p^0,c
  1321  0008CA  EF6B  F004         	goto	l861
  1322  0008CE                     l859:
  1323  0008CE  C059  F031         	movff	_prec,dtoa@p
  1324  0008D2  C05A  F032         	movff	_prec+1,dtoa@p+1
  1325  0008D6                     l861:
  1326                           
  1327                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 304:     w = widt
      +                          h;
  1328  0008D6  C057  F033         	movff	_width,dtoa@w
  1329  0008DA  C058  F034         	movff	_width+1,dtoa@w+1
  1330  0008DE                     
  1331                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 305:     if (s ||
      +                           (flags & (1 << 2))) {
  1332  0008DE  5035               	movf	dtoa@s^0,w,c
  1333  0008E0  1036               	iorwf	(dtoa@s+1)^0,w,c
  1334  0008E2  A4D8               	btfss	status,2,c
  1335  0008E4  EF76  F004         	goto	u1601
  1336  0008E8  EF78  F004         	goto	u1600
  1337  0008EC                     u1601:
  1338  0008EC  EF7F  F004         	goto	l2043
  1339  0008F0                     u1600:
  1340  0008F0  A45B               	btfss	_flags^0,2,c
  1341  0008F2  EF7D  F004         	goto	u1611
  1342  0008F6  EF7F  F004         	goto	u1610
  1343  0008FA                     u1611:
  1344  0008FA  EF82  F004         	goto	l2045
  1345  0008FE                     u1610:
  1346  0008FE                     l2043:
  1347                           
  1348                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 306:         --w;
  1349  0008FE  0633               	decf	dtoa@w^0,f,c
  1350  000900  A0D8               	btfss	status,0,c
  1351  000902  0634               	decf	(dtoa@w+1)^0,f,c
  1352  000904                     l2045:
  1353                           
  1354                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 310:     i = size
      +                          of(dbuf) - 1;
  1355  000904  0E00               	movlw	0
  1356  000906  6E40               	movwf	(dtoa@i+1)^0,c
  1357  000908  0E1F               	movlw	31
  1358  00090A  6E3F               	movwf	dtoa@i^0,c
  1359  00090C                     
  1360                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 311:     dbuf[i] 
      +                          = '\0';
  1361  00090C  0E00               	movlw	0
  1362  00090E  0100               	movlb	0	; () banked
  1363  000910  6F9F               	movwf	(_dbuf+31)& (0+255),b
  1364                           
  1365                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1366  000912  EF07  F005         	goto	l2059
  1367  000916                     l2049:
  1368                           
  1369                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 313:         --i;
  1370  000916  063F               	decf	dtoa@i^0,f,c
  1371  000918  A0D8               	btfss	status,0,c
  1372  00091A  0640               	decf	(dtoa@i+1)^0,f,c
  1373  00091C                     
  1374                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 314:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  1375  00091C  0E80               	movlw	low _dbuf
  1376  00091E  243F               	addwf	dtoa@i^0,w,c
  1377  000920  6ED9               	movwf	fsr2l,c
  1378  000922  0E00               	movlw	high _dbuf
  1379  000924  2040               	addwfc	(dtoa@i+1)^0,w,c
  1380  000926  6EDA               	movwf	fsr2h,c
  1381  000928  C037  F002         	movff	dtoa@n,___aomod@dividend
  1382  00092C  C038  F003         	movff	dtoa@n+1,___aomod@dividend+1
  1383  000930  C039  F004         	movff	dtoa@n+2,___aomod@dividend+2
  1384  000934  C03A  F005         	movff	dtoa@n+3,___aomod@dividend+3
  1385  000938  C03B  F006         	movff	dtoa@n+4,___aomod@dividend+4
  1386  00093C  C03C  F007         	movff	dtoa@n+5,___aomod@dividend+5
  1387  000940  C03D  F008         	movff	dtoa@n+6,___aomod@dividend+6
  1388  000944  C03E  F009         	movff	dtoa@n+7,___aomod@dividend+7
  1389  000948  0E0A               	movlw	10
  1390  00094A  6E0A               	movwf	___aomod@divisor^0,c
  1391  00094C  0E00               	movlw	0
  1392  00094E  6E0B               	movwf	(___aomod@divisor+1)^0,c
  1393  000950  0E00               	movlw	0
  1394  000952  6E0C               	movwf	(___aomod@divisor+2)^0,c
  1395  000954  0E00               	movlw	0
  1396  000956  6E0D               	movwf	(___aomod@divisor+3)^0,c
  1397  000958  0E00               	movlw	0
  1398  00095A  6E0E               	movwf	(___aomod@divisor+4)^0,c
  1399  00095C  0E00               	movlw	0
  1400  00095E  6E0F               	movwf	(___aomod@divisor+5)^0,c
  1401  000960  0E00               	movlw	0
  1402  000962  6E10               	movwf	(___aomod@divisor+6)^0,c
  1403  000964  0E00               	movlw	0
  1404  000966  6E11               	movwf	(___aomod@divisor+7)^0,c
  1405  000968  EC24  F007         	call	___aomod	;wreg free
  1406  00096C  C002  F027         	movff	?___aomod,??_dtoa
  1407  000970  C003  F028         	movff	?___aomod+1,??_dtoa+1
  1408  000974  C004  F029         	movff	?___aomod+2,??_dtoa+2
  1409  000978  C005  F02A         	movff	?___aomod+3,??_dtoa+3
  1410  00097C  C006  F02B         	movff	?___aomod+4,??_dtoa+4
  1411  000980  C007  F02C         	movff	?___aomod+5,??_dtoa+5
  1412  000984  C008  F02D         	movff	?___aomod+6,??_dtoa+6
  1413  000988  C009  F02E         	movff	?___aomod+7,??_dtoa+7
  1414  00098C  C027  F014         	movff	??_dtoa,abs@a
  1415  000990  C029  F015         	movff	??_dtoa+2,abs@a+1
  1416  000994  EC17  F00B         	call	_abs	;wreg free
  1417  000998  5014               	movf	?_abs^0,w,c
  1418  00099A  0F30               	addlw	48
  1419  00099C  6EDF               	movwf	indf2,c
  1420  00099E                     
  1421                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 315:         --p;
  1422  00099E  0631               	decf	dtoa@p^0,f,c
  1423  0009A0  A0D8               	btfss	status,0,c
  1424  0009A2  0632               	decf	(dtoa@p+1)^0,f,c
  1425  0009A4                     
  1426                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 316:         --w;
  1427  0009A4  0633               	decf	dtoa@w^0,f,c
  1428  0009A6  A0D8               	btfss	status,0,c
  1429  0009A8  0634               	decf	(dtoa@w+1)^0,f,c
  1430  0009AA                     
  1431                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 317:         n = 
      +                          n / 10;
  1432  0009AA  C037  F002         	movff	dtoa@n,___aodiv@dividend
  1433  0009AE  C038  F003         	movff	dtoa@n+1,___aodiv@dividend+1
  1434  0009B2  C039  F004         	movff	dtoa@n+2,___aodiv@dividend+2
  1435  0009B6  C03A  F005         	movff	dtoa@n+3,___aodiv@dividend+3
  1436  0009BA  C03B  F006         	movff	dtoa@n+4,___aodiv@dividend+4
  1437  0009BE  C03C  F007         	movff	dtoa@n+5,___aodiv@dividend+5
  1438  0009C2  C03D  F008         	movff	dtoa@n+6,___aodiv@dividend+6
  1439  0009C6  C03E  F009         	movff	dtoa@n+7,___aodiv@dividend+7
  1440  0009CA  0E0A               	movlw	10
  1441  0009CC  6E0A               	movwf	___aodiv@divisor^0,c
  1442  0009CE  0E00               	movlw	0
  1443  0009D0  6E0B               	movwf	(___aodiv@divisor+1)^0,c
  1444  0009D2  0E00               	movlw	0
  1445  0009D4  6E0C               	movwf	(___aodiv@divisor+2)^0,c
  1446  0009D6  0E00               	movlw	0
  1447  0009D8  6E0D               	movwf	(___aodiv@divisor+3)^0,c
  1448  0009DA  0E00               	movlw	0
  1449  0009DC  6E0E               	movwf	(___aodiv@divisor+4)^0,c
  1450  0009DE  0E00               	movlw	0
  1451  0009E0  6E0F               	movwf	(___aodiv@divisor+5)^0,c
  1452  0009E2  0E00               	movlw	0
  1453  0009E4  6E10               	movwf	(___aodiv@divisor+6)^0,c
  1454  0009E6  0E00               	movlw	0
  1455  0009E8  6E11               	movwf	(___aodiv@divisor+7)^0,c
  1456  0009EA  EC60  F006         	call	___aodiv	;wreg free
  1457  0009EE  C002  F037         	movff	?___aodiv,dtoa@n
  1458  0009F2  C003  F038         	movff	?___aodiv+1,dtoa@n+1
  1459  0009F6  C004  F039         	movff	?___aodiv+2,dtoa@n+2
  1460  0009FA  C005  F03A         	movff	?___aodiv+3,dtoa@n+3
  1461  0009FE  C006  F03B         	movff	?___aodiv+4,dtoa@n+4
  1462  000A02  C007  F03C         	movff	?___aodiv+5,dtoa@n+5
  1463  000A06  C008  F03D         	movff	?___aodiv+6,dtoa@n+6
  1464  000A0A  C009  F03E         	movff	?___aodiv+7,dtoa@n+7
  1465  000A0E                     l2059:
  1466                           
  1467                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1468  000A0E  BE40               	btfsc	(dtoa@i+1)^0,7,c
  1469  000A10  EF12  F005         	goto	u1621
  1470  000A14  5040               	movf	(dtoa@i+1)^0,w,c
  1471  000A16  E108               	bnz	u1620
  1472  000A18  043F               	decf	dtoa@i^0,w,c
  1473  000A1A  A0D8               	btfss	status,0,c
  1474  000A1C  EF12  F005         	goto	u1621
  1475  000A20  EF14  F005         	goto	u1620
  1476  000A24                     u1621:
  1477  000A24  EF44  F005         	goto	l2069
  1478  000A28                     u1620:
  1479  000A28  5037               	movf	dtoa@n^0,w,c
  1480  000A2A  1038               	iorwf	(dtoa@n+1)^0,w,c
  1481  000A2C  1039               	iorwf	(dtoa@n+2)^0,w,c
  1482  000A2E  103A               	iorwf	(dtoa@n+3)^0,w,c
  1483  000A30  103B               	iorwf	(dtoa@n+4)^0,w,c
  1484  000A32  103C               	iorwf	(dtoa@n+5)^0,w,c
  1485  000A34  103D               	iorwf	(dtoa@n+6)^0,w,c
  1486  000A36  103E               	iorwf	(dtoa@n+7)^0,w,c
  1487  000A38  A4D8               	btfss	status,2,c
  1488  000A3A  EF21  F005         	goto	u1631
  1489  000A3E  EF23  F005         	goto	u1630
  1490  000A42                     u1631:
  1491  000A42  EF8B  F004         	goto	l2049
  1492  000A46                     u1630:
  1493  000A46  BE32               	btfsc	(dtoa@p+1)^0,7,c
  1494  000A48  EF30  F005         	goto	u1640
  1495  000A4C  5032               	movf	(dtoa@p+1)^0,w,c
  1496  000A4E  E106               	bnz	u1641
  1497  000A50  0431               	decf	dtoa@p^0,w,c
  1498  000A52  B0D8               	btfsc	status,0,c
  1499  000A54  EF2E  F005         	goto	u1641
  1500  000A58  EF30  F005         	goto	u1640
  1501  000A5C                     u1641:
  1502  000A5C  EF8B  F004         	goto	l2049
  1503  000A60                     u1640:
  1504  000A60  BE34               	btfsc	(dtoa@w+1)^0,7,c
  1505  000A62  EF3B  F005         	goto	u1651
  1506  000A66  5034               	movf	(dtoa@w+1)^0,w,c
  1507  000A68  E108               	bnz	u1650
  1508  000A6A  0433               	decf	dtoa@w^0,w,c
  1509  000A6C  A0D8               	btfss	status,0,c
  1510  000A6E  EF3B  F005         	goto	u1651
  1511  000A72  EF3D  F005         	goto	u1650
  1512  000A76                     u1651:
  1513  000A76  EF44  F005         	goto	l2069
  1514  000A7A                     u1650:
  1515  000A7A  B25B               	btfsc	_flags^0,1,c
  1516  000A7C  EF42  F005         	goto	u1661
  1517  000A80  EF44  F005         	goto	u1660
  1518  000A84                     u1661:
  1519  000A84  EF8B  F004         	goto	l2049
  1520  000A88                     u1660:
  1521  000A88                     l2069:
  1522                           
  1523                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 321:     if (s ||
      +                           (flags & (1 << 2))) {
  1524  000A88  5035               	movf	dtoa@s^0,w,c
  1525  000A8A  1036               	iorwf	(dtoa@s+1)^0,w,c
  1526  000A8C  A4D8               	btfss	status,2,c
  1527  000A8E  EF4B  F005         	goto	u1671
  1528  000A92  EF4D  F005         	goto	u1670
  1529  000A96                     u1671:
  1530  000A96  EF54  F005         	goto	l2073
  1531  000A9A                     u1670:
  1532  000A9A  A45B               	btfss	_flags^0,2,c
  1533  000A9C  EF52  F005         	goto	u1681
  1534  000AA0  EF54  F005         	goto	u1680
  1535  000AA4                     u1681:
  1536  000AA4  EF72  F005         	goto	l2083
  1537  000AA8                     u1680:
  1538  000AA8                     l2073:
  1539                           
  1540                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 322:         --i;
  1541  000AA8  063F               	decf	dtoa@i^0,f,c
  1542  000AAA  A0D8               	btfss	status,0,c
  1543  000AAC  0640               	decf	(dtoa@i+1)^0,f,c
  1544  000AAE                     
  1545                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 323:         dbuf
      +                          [i] = s ? '-' : '+';
  1546  000AAE  5035               	movf	dtoa@s^0,w,c
  1547  000AB0  1036               	iorwf	(dtoa@s+1)^0,w,c
  1548  000AB2  A4D8               	btfss	status,2,c
  1549  000AB4  EF5E  F005         	goto	u1691
  1550  000AB8  EF60  F005         	goto	u1690
  1551  000ABC                     u1691:
  1552  000ABC  EF66  F005         	goto	l2079
  1553  000AC0                     u1690:
  1554  000AC0  0E00               	movlw	0
  1555  000AC2  6E30               	movwf	(_dtoa$708+1)^0,c
  1556  000AC4  0E2B               	movlw	43
  1557  000AC6  6E2F               	movwf	_dtoa$708^0,c
  1558  000AC8  EF6A  F005         	goto	l2081
  1559  000ACC                     l2079:
  1560  000ACC  0E00               	movlw	0
  1561  000ACE  6E30               	movwf	(_dtoa$708+1)^0,c
  1562  000AD0  0E2D               	movlw	45
  1563  000AD2  6E2F               	movwf	_dtoa$708^0,c
  1564  000AD4                     l2081:
  1565  000AD4  0E80               	movlw	low _dbuf
  1566  000AD6  243F               	addwf	dtoa@i^0,w,c
  1567  000AD8  6ED9               	movwf	fsr2l,c
  1568  000ADA  0E00               	movlw	high _dbuf
  1569  000ADC  2040               	addwfc	(dtoa@i+1)^0,w,c
  1570  000ADE  6EDA               	movwf	fsr2h,c
  1571  000AE0  C02F  FFDF         	movff	_dtoa$708,indf2
  1572  000AE4                     l2083:
  1573                           
  1574                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 327:     return p
      +                          ad(fp, &dbuf[i], w);
  1575  000AE4  C01D  F012         	movff	dtoa@fp,pad@fp
  1576  000AE8  C01E  F013         	movff	dtoa@fp+1,pad@fp+1
  1577  000AEC  0E80               	movlw	low _dbuf
  1578  000AEE  243F               	addwf	dtoa@i^0,w,c
  1579  000AF0  6E14               	movwf	pad@buf^0,c
  1580  000AF2  0E00               	movlw	high _dbuf
  1581  000AF4  2040               	addwfc	(dtoa@i+1)^0,w,c
  1582  000AF6  6E15               	movwf	(pad@buf+1)^0,c
  1583  000AF8  C033  F016         	movff	dtoa@w,pad@p
  1584  000AFC  C034  F017         	movff	dtoa@w+1,pad@p+1
  1585  000B00  EC15  F009         	call	_pad	;wreg free
  1586  000B04  C012  F01D         	movff	?_pad,?_dtoa
  1587  000B08  C013  F01E         	movff	?_pad+1,?_dtoa+1
  1588  000B0C  0012               	return		;funcret
  1589  000B0E                     __end_of_dtoa:
  1590                           	callstack 0
  1591                           
  1592 ;; *************** function _pad *****************
  1593 ;; Defined at:
  1594 ;;		line 72 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
  1595 ;; Parameters:    Size  Location     Type
  1596 ;;  fp              2   17[COMRAM] PTR struct _IO_FILE
  1597 ;;		 -> sprintf@f(6), 
  1598 ;;  buf             2   19[COMRAM] PTR unsigned char 
  1599 ;;		 -> dbuf(32), 
  1600 ;;  p               2   21[COMRAM] int 
  1601 ;; Auto vars:     Size  Location     Type
  1602 ;;  w               2   26[COMRAM] int 
  1603 ;;  i               2   24[COMRAM] int 
  1604 ;; Return value:  Size  Location     Type
  1605 ;;                  2   17[COMRAM] int 
  1606 ;; Registers used:
  1607 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1608 ;; Tracked objects:
  1609 ;;		On entry : 0/0
  1610 ;;		On exit  : 0/0
  1611 ;;		Unchanged: 0/0
  1612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1613 ;;      Params:         6       0       0       0       0       0       0       0       0
  1614 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1615 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1616 ;;      Totals:        11       0       0       0       0       0       0       0       0
  1617 ;;Total ram usage:       11 bytes
  1618 ;; Hardware stack levels used: 1
  1619 ;; Hardware stack levels required when called: 4
  1620 ;; This function calls:
  1621 ;;		_fputc
  1622 ;;		_fputs
  1623 ;;		_strlen
  1624 ;; This function is called by:
  1625 ;;		_dtoa
  1626 ;; This function uses a non-reentrant model
  1627 ;;
  1628                           
  1629                           	psect	text5
  1630  00122A                     __ptext5:
  1631                           	callstack 0
  1632  00122A                     _pad:
  1633                           	callstack 22
  1634  00122A                     
  1635                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 72: static int pa
      +                          d(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\commo
      +                          n\doprnt.c: 73: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 
      +                          74:     int i, w;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 
      +                          77:     if (flags & (1 << 0)) {
  1636  00122A  A05B               	btfss	_flags^0,0,c
  1637  00122C  EF1A  F009         	goto	u1501
  1638  001230  EF1C  F009         	goto	u1500
  1639  001234                     u1501:
  1640  001234  EF26  F009         	goto	l2003
  1641  001238                     u1500:
  1642  001238                     
  1643                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 78:         fputs
      +                          ((const char *)buf, fp);
  1644  001238  C014  F00B         	movff	pad@buf,fputs@s
  1645  00123C  C015  F00C         	movff	pad@buf+1,fputs@s+1
  1646  001240  C012  F00D         	movff	pad@fp,fputs@fp
  1647  001244  C013  F00E         	movff	pad@fp+1,fputs@fp+1
  1648  001248  ECF5  F00A         	call	_fputs	;wreg free
  1649  00124C                     l2003:
  1650                           
  1651                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 82:     w = (p < 
      +                          0) ? 0 : p;
  1652  00124C  BE17               	btfsc	(pad@p+1)^0,7,c
  1653  00124E  EF2B  F009         	goto	u1511
  1654  001252  EF2D  F009         	goto	u1510
  1655  001256                     u1511:
  1656  001256  EF33  F009         	goto	l2007
  1657  00125A                     u1510:
  1658  00125A  C016  F01B         	movff	pad@p,pad@w
  1659  00125E  C017  F01C         	movff	pad@p+1,pad@w+1
  1660  001262  EF37  F009         	goto	l848
  1661  001266                     l2007:
  1662  001266  0E00               	movlw	0
  1663  001268  6E1C               	movwf	(pad@w+1)^0,c
  1664  00126A  0E00               	movlw	0
  1665  00126C  6E1B               	movwf	pad@w^0,c
  1666  00126E                     l848:
  1667                           
  1668                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 83:     i = 0;
  1669  00126E  0E00               	movlw	0
  1670  001270  6E1A               	movwf	(pad@i+1)^0,c
  1671  001272  0E00               	movlw	0
  1672  001274  6E19               	movwf	pad@i^0,c
  1673                           
  1674                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  1675  001276  EF49  F009         	goto	l2013
  1676  00127A                     l2009:
  1677                           
  1678                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 85:         fputc
      +                          (' ', fp);
  1679  00127A  0E00               	movlw	0
  1680  00127C  6E03               	movwf	(fputc@c+1)^0,c
  1681  00127E  0E20               	movlw	32
  1682  001280  6E02               	movwf	fputc@c^0,c
  1683  001282  C012  F004         	movff	pad@fp,fputc@fp
  1684  001286  C013  F005         	movff	pad@fp+1,fputc@fp+1
  1685  00128A  EC4E  F008         	call	_fputc	;wreg free
  1686  00128E                     
  1687                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 86:         ++i;
  1688  00128E  4A19               	infsnz	pad@i^0,f,c
  1689  001290  2A1A               	incf	(pad@i+1)^0,f,c
  1690  001292                     l2013:
  1691                           
  1692                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  1693  001292  501B               	movf	pad@w^0,w,c
  1694  001294  5C19               	subwf	pad@i^0,w,c
  1695  001296  501A               	movf	(pad@i+1)^0,w,c
  1696  001298  0A80               	xorlw	128
  1697  00129A  6E18               	movwf	??_pad^0,c
  1698  00129C  501C               	movf	(pad@w+1)^0,w,c
  1699  00129E  0A80               	xorlw	128
  1700  0012A0  5818               	subwfb	??_pad^0,w,c
  1701  0012A2  A0D8               	btfss	status,0,c
  1702  0012A4  EF56  F009         	goto	u1521
  1703  0012A8  EF58  F009         	goto	u1520
  1704  0012AC                     u1521:
  1705  0012AC  EF3D  F009         	goto	l2009
  1706  0012B0                     u1520:
  1707  0012B0                     
  1708                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 90:     if (!(fla
      +                          gs & (1 << 0))) {
  1709  0012B0  B05B               	btfsc	_flags^0,0,c
  1710  0012B2  EF5D  F009         	goto	u1531
  1711  0012B6  EF5F  F009         	goto	u1530
  1712  0012BA                     u1531:
  1713  0012BA  EF69  F009         	goto	l2017
  1714  0012BE                     u1530:
  1715  0012BE                     
  1716                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 91:         fputs
      +                          ((const char *)buf, fp);
  1717  0012BE  C014  F00B         	movff	pad@buf,fputs@s
  1718  0012C2  C015  F00C         	movff	pad@buf+1,fputs@s+1
  1719  0012C6  C012  F00D         	movff	pad@fp,fputs@fp
  1720  0012CA  C013  F00E         	movff	pad@fp+1,fputs@fp+1
  1721  0012CE  ECF5  F00A         	call	_fputs	;wreg free
  1722  0012D2                     l2017:
  1723                           
  1724                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 94:     return (i
      +                          nt)(strlen(buf) + (size_t)w);
  1725  0012D2  C014  F002         	movff	pad@buf,strlen@s
  1726  0012D6  C015  F003         	movff	pad@buf+1,strlen@s+1
  1727  0012DA  EC72  F00B         	call	_strlen	;wreg free
  1728  0012DE  501B               	movf	pad@w^0,w,c
  1729  0012E0  2402               	addwf	?_strlen^0,w,c
  1730  0012E2  6E12               	movwf	?_pad^0,c
  1731  0012E4  501C               	movf	(pad@w+1)^0,w,c
  1732  0012E6  2003               	addwfc	(?_strlen+1)^0,w,c
  1733  0012E8  6E13               	movwf	(?_pad+1)^0,c
  1734  0012EA  0012               	return		;funcret
  1735  0012EC                     __end_of_pad:
  1736                           	callstack 0
  1737                           
  1738 ;; *************** function _strlen *****************
  1739 ;; Defined at:
  1740 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\strlen.c"
  1741 ;; Parameters:    Size  Location     Type
  1742 ;;  s               2    1[COMRAM] PTR const unsigned char 
  1743 ;;		 -> dbuf(32), 
  1744 ;; Auto vars:     Size  Location     Type
  1745 ;;  a               2    3[COMRAM] PTR const unsigned char 
  1746 ;;		 -> dbuf(32), 
  1747 ;; Return value:  Size  Location     Type
  1748 ;;                  2    1[COMRAM] unsigned int 
  1749 ;; Registers used:
  1750 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1751 ;; Tracked objects:
  1752 ;;		On entry : 0/0
  1753 ;;		On exit  : 0/0
  1754 ;;		Unchanged: 0/0
  1755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1756 ;;      Params:         2       0       0       0       0       0       0       0       0
  1757 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1758 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1759 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1760 ;;Total ram usage:        4 bytes
  1761 ;; Hardware stack levels used: 1
  1762 ;; Hardware stack levels required when called: 1
  1763 ;; This function calls:
  1764 ;;		Nothing
  1765 ;; This function is called by:
  1766 ;;		_pad
  1767 ;; This function uses a non-reentrant model
  1768 ;;
  1769                           
  1770                           	psect	text6
  1771  0016E4                     __ptext6:
  1772                           	callstack 0
  1773  0016E4                     _strlen:
  1774                           	callstack 24
  1775  0016E4  C002  F004         	movff	strlen@s,strlen@a
  1776  0016E8  C003  F005         	movff	strlen@s+1,strlen@a+1
  1777  0016EC  EF7A  F00B         	goto	l1913
  1778  0016F0                     l1911:
  1779  0016F0  4A02               	infsnz	strlen@s^0,f,c
  1780  0016F2  2A03               	incf	(strlen@s+1)^0,f,c
  1781  0016F4                     l1913:
  1782  0016F4  C002  FFD9         	movff	strlen@s,fsr2l
  1783  0016F8  C003  FFDA         	movff	strlen@s+1,fsr2h
  1784  0016FC  50DF               	movf	indf2,w,c
  1785  0016FE  A4D8               	btfss	status,2,c
  1786  001700  EF84  F00B         	goto	u1361
  1787  001704  EF86  F00B         	goto	u1360
  1788  001708                     u1361:
  1789  001708  EF78  F00B         	goto	l1911
  1790  00170C                     u1360:
  1791  00170C  5004               	movf	strlen@a^0,w,c
  1792  00170E  5C02               	subwf	strlen@s^0,w,c
  1793  001710  6E02               	movwf	?_strlen^0,c
  1794  001712  5005               	movf	(strlen@a+1)^0,w,c
  1795  001714  5803               	subwfb	(strlen@s+1)^0,w,c
  1796  001716  6E03               	movwf	(?_strlen+1)^0,c
  1797  001718  0012               	return		;funcret
  1798  00171A                     __end_of_strlen:
  1799                           	callstack 0
  1800                           
  1801 ;; *************** function _fputs *****************
  1802 ;; Defined at:
  1803 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_fputs.c"
  1804 ;; Parameters:    Size  Location     Type
  1805 ;;  s               2   10[COMRAM] PTR const unsigned char 
  1806 ;;		 -> dbuf(32), 
  1807 ;;  fp              2   12[COMRAM] PTR struct _IO_FILE
  1808 ;;		 -> sprintf@f(6), 
  1809 ;; Auto vars:     Size  Location     Type
  1810 ;;  i               2   15[COMRAM] int 
  1811 ;;  c               1   14[COMRAM] unsigned char 
  1812 ;; Return value:  Size  Location     Type
  1813 ;;                  2   10[COMRAM] int 
  1814 ;; Registers used:
  1815 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1816 ;; Tracked objects:
  1817 ;;		On entry : 0/0
  1818 ;;		On exit  : 0/0
  1819 ;;		Unchanged: 0/0
  1820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1821 ;;      Params:         4       0       0       0       0       0       0       0       0
  1822 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1823 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1824 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1825 ;;Total ram usage:        7 bytes
  1826 ;; Hardware stack levels used: 1
  1827 ;; Hardware stack levels required when called: 3
  1828 ;; This function calls:
  1829 ;;		_fputc
  1830 ;; This function is called by:
  1831 ;;		_pad
  1832 ;; This function uses a non-reentrant model
  1833 ;;
  1834                           
  1835                           	psect	text7
  1836  0015EA                     __ptext7:
  1837                           	callstack 0
  1838  0015EA                     _fputs:
  1839                           	callstack 22
  1840  0015EA  0E00               	movlw	0
  1841  0015EC  6E11               	movwf	(fputs@i+1)^0,c
  1842  0015EE  0E00               	movlw	0
  1843  0015F0  6E10               	movwf	fputs@i^0,c
  1844  0015F2  EF06  F00B         	goto	l1907
  1845  0015F6                     l1903:
  1846  0015F6  C00F  F002         	movff	fputs@c,fputc@c
  1847  0015FA  6A03               	clrf	(fputc@c+1)^0,c
  1848  0015FC  C00D  F004         	movff	fputs@fp,fputc@fp
  1849  001600  C00E  F005         	movff	fputs@fp+1,fputc@fp+1
  1850  001604  EC4E  F008         	call	_fputc	;wreg free
  1851  001608  4A10               	infsnz	fputs@i^0,f,c
  1852  00160A  2A11               	incf	(fputs@i+1)^0,f,c
  1853  00160C                     l1907:
  1854  00160C  5010               	movf	fputs@i^0,w,c
  1855  00160E  240B               	addwf	fputs@s^0,w,c
  1856  001610  6ED9               	movwf	fsr2l,c
  1857  001612  5011               	movf	(fputs@i+1)^0,w,c
  1858  001614  200C               	addwfc	(fputs@s+1)^0,w,c
  1859  001616  6EDA               	movwf	fsr2h,c
  1860  001618  50DF               	movf	indf2,w,c
  1861  00161A  6E0F               	movwf	fputs@c^0,c
  1862  00161C  500F               	movf	fputs@c^0,w,c
  1863  00161E  A4D8               	btfss	status,2,c
  1864  001620  EF14  F00B         	goto	u1351
  1865  001624  EF16  F00B         	goto	u1350
  1866  001628                     u1351:
  1867  001628  EFFB  F00A         	goto	l1903
  1868  00162C                     u1350:
  1869  00162C  0012               	return		;funcret
  1870  00162E                     __end_of_fputs:
  1871                           	callstack 0
  1872                           
  1873 ;; *************** function _fputc *****************
  1874 ;; Defined at:
  1875 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_fputc.c"
  1876 ;; Parameters:    Size  Location     Type
  1877 ;;  c               2    1[COMRAM] int 
  1878 ;;  fp              2    3[COMRAM] PTR struct _IO_FILE
  1879 ;;		 -> sprintf@f(6), 
  1880 ;; Auto vars:     Size  Location     Type
  1881 ;;		None
  1882 ;; Return value:  Size  Location     Type
  1883 ;;                  2    1[COMRAM] int 
  1884 ;; Registers used:
  1885 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1886 ;; Tracked objects:
  1887 ;;		On entry : 0/0
  1888 ;;		On exit  : 0/0
  1889 ;;		Unchanged: 0/0
  1890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1891 ;;      Params:         4       0       0       0       0       0       0       0       0
  1892 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1893 ;;      Temps:          5       0       0       0       0       0       0       0       0
  1894 ;;      Totals:         9       0       0       0       0       0       0       0       0
  1895 ;;Total ram usage:        9 bytes
  1896 ;; Hardware stack levels used: 1
  1897 ;; Hardware stack levels required when called: 2
  1898 ;; This function calls:
  1899 ;;		_putch
  1900 ;; This function is called by:
  1901 ;;		_pad
  1902 ;;		_vfpfcnvrt
  1903 ;;		_fputs
  1904 ;; This function uses a non-reentrant model
  1905 ;;
  1906                           
  1907                           	psect	text8
  1908  00109C                     __ptext8:
  1909                           	callstack 0
  1910  00109C                     _fputc:
  1911                           	callstack 25
  1912  00109C  5004               	movf	fputc@fp^0,w,c
  1913  00109E  1005               	iorwf	(fputc@fp+1)^0,w,c
  1914  0010A0  B4D8               	btfsc	status,2,c
  1915  0010A2  EF55  F008         	goto	u1311
  1916  0010A6  EF57  F008         	goto	u1310
  1917  0010AA                     u1311:
  1918  0010AA  EF60  F008         	goto	l1891
  1919  0010AE                     u1310:
  1920  0010AE  5004               	movf	fputc@fp^0,w,c
  1921  0010B0  1005               	iorwf	(fputc@fp+1)^0,w,c
  1922  0010B2  A4D8               	btfss	status,2,c
  1923  0010B4  EF5E  F008         	goto	u1321
  1924  0010B8  EF60  F008         	goto	u1320
  1925  0010BC                     u1321:
  1926  0010BC  EF65  F008         	goto	l1893
  1927  0010C0                     u1320:
  1928  0010C0                     l1891:
  1929  0010C0  5002               	movf	fputc@c^0,w,c
  1930  0010C2  ECAC  F00B         	call	_putch
  1931  0010C6  EFB2  F008         	goto	l912
  1932  0010CA                     l1893:
  1933  0010CA  EE20 F004          	lfsr	2,4
  1934  0010CE  5004               	movf	fputc@fp^0,w,c
  1935  0010D0  26D9               	addwf	fsr2l,f,c
  1936  0010D2  5005               	movf	(fputc@fp+1)^0,w,c
  1937  0010D4  22DA               	addwfc	fsr2h,f,c
  1938  0010D6  50DE               	movf	postinc2,w,c
  1939  0010D8  10DE               	iorwf	postinc2,w,c
  1940  0010DA  B4D8               	btfsc	status,2,c
  1941  0010DC  EF72  F008         	goto	u1331
  1942  0010E0  EF74  F008         	goto	u1330
  1943  0010E4                     u1331:
  1944  0010E4  EF8F  F008         	goto	l1897
  1945  0010E8                     u1330:
  1946  0010E8  EE20 F004          	lfsr	2,4
  1947  0010EC  5004               	movf	fputc@fp^0,w,c
  1948  0010EE  26D9               	addwf	fsr2l,f,c
  1949  0010F0  5005               	movf	(fputc@fp+1)^0,w,c
  1950  0010F2  22DA               	addwfc	fsr2h,f,c
  1951  0010F4  EE10 F002          	lfsr	1,2
  1952  0010F8  5004               	movf	fputc@fp^0,w,c
  1953  0010FA  26E1               	addwf	fsr1l,f,c
  1954  0010FC  5005               	movf	(fputc@fp+1)^0,w,c
  1955  0010FE  22E2               	addwfc	fsr1h,f,c
  1956  001100  50DE               	movf	postinc2,w,c
  1957  001102  5CE6               	subwf	postinc1,w,c
  1958  001104  50E6               	movf	postinc1,w,c
  1959  001106  0A80               	xorlw	128
  1960  001108  6E0A               	movwf	(??_fputc+4)^0,c
  1961  00110A  50DE               	movf	postinc2,w,c
  1962  00110C  0A80               	xorlw	128
  1963  00110E  580A               	subwfb	(??_fputc+4)^0,w,c
  1964  001110  B0D8               	btfsc	status,0,c
  1965  001112  EF8D  F008         	goto	u1341
  1966  001116  EF8F  F008         	goto	u1340
  1967  00111A                     u1341:
  1968  00111A  EFB2  F008         	goto	l912
  1969  00111E                     u1340:
  1970  00111E                     l1897:
  1971  00111E  EE20 F002          	lfsr	2,2
  1972  001122  5004               	movf	fputc@fp^0,w,c
  1973  001124  26D9               	addwf	fsr2l,f,c
  1974  001126  5005               	movf	(fputc@fp+1)^0,w,c
  1975  001128  22DA               	addwfc	fsr2h,f,c
  1976  00112A  CFDE F006          	movff	postinc2,??_fputc
  1977  00112E  CFDD F007          	movff	postdec2,??_fputc+1
  1978  001132  C004  FFD9         	movff	fputc@fp,fsr2l
  1979  001136  C005  FFDA         	movff	fputc@fp+1,fsr2h
  1980  00113A  CFDE F008          	movff	postinc2,??_fputc+2
  1981  00113E  CFDD F009          	movff	postdec2,??_fputc+3
  1982  001142  5006               	movf	??_fputc^0,w,c
  1983  001144  2408               	addwf	(??_fputc+2)^0,w,c
  1984  001146  6ED9               	movwf	fsr2l,c
  1985  001148  5007               	movf	(??_fputc+1)^0,w,c
  1986  00114A  2009               	addwfc	(??_fputc+3)^0,w,c
  1987  00114C  6EDA               	movwf	fsr2h,c
  1988  00114E  C002  FFDF         	movff	fputc@c,indf2
  1989  001152  EE20 F002          	lfsr	2,2
  1990  001156  5004               	movf	fputc@fp^0,w,c
  1991  001158  26D9               	addwf	fsr2l,f,c
  1992  00115A  5005               	movf	(fputc@fp+1)^0,w,c
  1993  00115C  22DA               	addwfc	fsr2h,f,c
  1994  00115E  2ADE               	incf	postinc2,f,c
  1995  001160  0E00               	movlw	0
  1996  001162  22DD               	addwfc	postdec2,f,c
  1997  001164                     l912:
  1998  001164  0012               	return		;funcret
  1999  001166                     __end_of_fputc:
  2000                           	callstack 0
  2001                           
  2002 ;; *************** function _putch *****************
  2003 ;; Defined at:
  2004 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\putch.c"
  2005 ;; Parameters:    Size  Location     Type
  2006 ;;  c               1    wreg     unsigned char 
  2007 ;; Auto vars:     Size  Location     Type
  2008 ;;  c               1    0[COMRAM] unsigned char 
  2009 ;; Return value:  Size  Location     Type
  2010 ;;                  1    wreg      void 
  2011 ;; Registers used:
  2012 ;;		wreg
  2013 ;; Tracked objects:
  2014 ;;		On entry : 0/0
  2015 ;;		On exit  : 0/0
  2016 ;;		Unchanged: 0/0
  2017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2018 ;;      Params:         0       0       0       0       0       0       0       0       0
  2019 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2020 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2021 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2022 ;;Total ram usage:        0 bytes
  2023 ;; Hardware stack levels used: 1
  2024 ;; Hardware stack levels required when called: 1
  2025 ;; This function calls:
  2026 ;;		Nothing
  2027 ;; This function is called by:
  2028 ;;		_fputc
  2029 ;; This function uses a non-reentrant model
  2030 ;;
  2031                           
  2032                           	psect	text9
  2033  001758                     __ptext9:
  2034                           	callstack 0
  2035  001758                     _putch:
  2036                           	callstack 25
  2037  001758  0012               	return		;funcret
  2038  00175A                     __end_of_putch:
  2039                           	callstack 0
  2040                           
  2041 ;; *************** function _abs *****************
  2042 ;; Defined at:
  2043 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\abs.c"
  2044 ;; Parameters:    Size  Location     Type
  2045 ;;  a               2   19[COMRAM] int 
  2046 ;; Auto vars:     Size  Location     Type
  2047 ;;		None
  2048 ;; Return value:  Size  Location     Type
  2049 ;;                  2   19[COMRAM] int 
  2050 ;; Registers used:
  2051 ;;		wreg, status,2, status,0
  2052 ;; Tracked objects:
  2053 ;;		On entry : 0/0
  2054 ;;		On exit  : 0/0
  2055 ;;		Unchanged: 0/0
  2056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2057 ;;      Params:         2       0       0       0       0       0       0       0       0
  2058 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2059 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2060 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2061 ;;Total ram usage:        4 bytes
  2062 ;; Hardware stack levels used: 1
  2063 ;; Hardware stack levels required when called: 1
  2064 ;; This function calls:
  2065 ;;		Nothing
  2066 ;; This function is called by:
  2067 ;;		_dtoa
  2068 ;; This function uses a non-reentrant model
  2069 ;;
  2070                           
  2071                           	psect	text10
  2072  00162E                     __ptext10:
  2073                           	callstack 0
  2074  00162E                     _abs:
  2075                           	callstack 25
  2076  00162E  BE15               	btfsc	(abs@a+1)^0,7,c
  2077  001630  EF24  F00B         	goto	u1540
  2078  001634  5015               	movf	(abs@a+1)^0,w,c
  2079  001636  E106               	bnz	u1541
  2080  001638  0414               	decf	abs@a^0,w,c
  2081  00163A  B0D8               	btfsc	status,0,c
  2082  00163C  EF22  F00B         	goto	u1541
  2083  001640  EF24  F00B         	goto	u1540
  2084  001644                     u1541:
  2085  001644  EF32  F00B         	goto	l897
  2086  001648                     u1540:
  2087  001648  C014  F016         	movff	abs@a,??_abs
  2088  00164C  C015  F017         	movff	abs@a+1,??_abs+1
  2089  001650  1E16               	comf	??_abs^0,f,c
  2090  001652  1E17               	comf	(??_abs+1)^0,f,c
  2091  001654  4A16               	infsnz	??_abs^0,f,c
  2092  001656  2A17               	incf	(??_abs+1)^0,f,c
  2093  001658  C016  F014         	movff	??_abs,?_abs
  2094  00165C  C017  F015         	movff	??_abs+1,?_abs+1
  2095  001660  EF36  F00B         	goto	l900
  2096  001664                     l897:
  2097  001664  C014  F014         	movff	abs@a,?_abs
  2098  001668  C015  F015         	movff	abs@a+1,?_abs+1
  2099  00166C                     l900:
  2100  00166C  0012               	return		;funcret
  2101  00166E                     __end_of_abs:
  2102                           	callstack 0
  2103                           
  2104 ;; *************** function ___aomod *****************
  2105 ;; Defined at:
  2106 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\aomod.c"
  2107 ;; Parameters:    Size  Location     Type
  2108 ;;  dividend        8    1[COMRAM] long long 
  2109 ;;  divisor         8    9[COMRAM] long long 
  2110 ;; Auto vars:     Size  Location     Type
  2111 ;;  sign            1   18[COMRAM] unsigned char 
  2112 ;;  counter         1   17[COMRAM] unsigned char 
  2113 ;; Return value:  Size  Location     Type
  2114 ;;                  8    1[COMRAM] long long 
  2115 ;; Registers used:
  2116 ;;		wreg, status,2, status,0
  2117 ;; Tracked objects:
  2118 ;;		On entry : 0/0
  2119 ;;		On exit  : 0/0
  2120 ;;		Unchanged: 0/0
  2121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2122 ;;      Params:        16       0       0       0       0       0       0       0       0
  2123 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2124 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2125 ;;      Totals:        18       0       0       0       0       0       0       0       0
  2126 ;;Total ram usage:       18 bytes
  2127 ;; Hardware stack levels used: 1
  2128 ;; Hardware stack levels required when called: 1
  2129 ;; This function calls:
  2130 ;;		Nothing
  2131 ;; This function is called by:
  2132 ;;		_dtoa
  2133 ;; This function uses a non-reentrant model
  2134 ;;
  2135                           
  2136                           	psect	text11
  2137  000E48                     __ptext11:
  2138                           	callstack 0
  2139  000E48                     ___aomod:
  2140                           	callstack 25
  2141  000E48  0E00               	movlw	0
  2142  000E4A  6E13               	movwf	___aomod@sign^0,c
  2143  000E4C  BE09               	btfsc	(___aomod@dividend+7)^0,7,c
  2144  000E4E  EF2D  F007         	goto	u1440
  2145  000E52  EF2B  F007         	goto	u1441
  2146  000E56                     u1441:
  2147  000E56  EF3F  F007         	goto	l1971
  2148  000E5A                     u1440:
  2149  000E5A  1E09               	comf	(___aomod@dividend+7)^0,f,c
  2150  000E5C  1E08               	comf	(___aomod@dividend+6)^0,f,c
  2151  000E5E  1E07               	comf	(___aomod@dividend+5)^0,f,c
  2152  000E60  1E06               	comf	(___aomod@dividend+4)^0,f,c
  2153  000E62  1E05               	comf	(___aomod@dividend+3)^0,f,c
  2154  000E64  1E04               	comf	(___aomod@dividend+2)^0,f,c
  2155  000E66  1E03               	comf	(___aomod@dividend+1)^0,f,c
  2156  000E68  6C02               	negf	___aomod@dividend^0,c
  2157  000E6A  0E00               	movlw	0
  2158  000E6C  2203               	addwfc	(___aomod@dividend+1)^0,f,c
  2159  000E6E  2204               	addwfc	(___aomod@dividend+2)^0,f,c
  2160  000E70  2205               	addwfc	(___aomod@dividend+3)^0,f,c
  2161  000E72  2206               	addwfc	(___aomod@dividend+4)^0,f,c
  2162  000E74  2207               	addwfc	(___aomod@dividend+5)^0,f,c
  2163  000E76  2208               	addwfc	(___aomod@dividend+6)^0,f,c
  2164  000E78  2209               	addwfc	(___aomod@dividend+7)^0,f,c
  2165  000E7A  0E01               	movlw	1
  2166  000E7C  6E13               	movwf	___aomod@sign^0,c
  2167  000E7E                     l1971:
  2168  000E7E  BE11               	btfsc	(___aomod@divisor+7)^0,7,c
  2169  000E80  EF46  F007         	goto	u1450
  2170  000E84  EF44  F007         	goto	u1451
  2171  000E88                     u1451:
  2172  000E88  EF56  F007         	goto	l1975
  2173  000E8C                     u1450:
  2174  000E8C  1E11               	comf	(___aomod@divisor+7)^0,f,c
  2175  000E8E  1E10               	comf	(___aomod@divisor+6)^0,f,c
  2176  000E90  1E0F               	comf	(___aomod@divisor+5)^0,f,c
  2177  000E92  1E0E               	comf	(___aomod@divisor+4)^0,f,c
  2178  000E94  1E0D               	comf	(___aomod@divisor+3)^0,f,c
  2179  000E96  1E0C               	comf	(___aomod@divisor+2)^0,f,c
  2180  000E98  1E0B               	comf	(___aomod@divisor+1)^0,f,c
  2181  000E9A  6C0A               	negf	___aomod@divisor^0,c
  2182  000E9C  0E00               	movlw	0
  2183  000E9E  220B               	addwfc	(___aomod@divisor+1)^0,f,c
  2184  000EA0  220C               	addwfc	(___aomod@divisor+2)^0,f,c
  2185  000EA2  220D               	addwfc	(___aomod@divisor+3)^0,f,c
  2186  000EA4  220E               	addwfc	(___aomod@divisor+4)^0,f,c
  2187  000EA6  220F               	addwfc	(___aomod@divisor+5)^0,f,c
  2188  000EA8  2210               	addwfc	(___aomod@divisor+6)^0,f,c
  2189  000EAA  2211               	addwfc	(___aomod@divisor+7)^0,f,c
  2190  000EAC                     l1975:
  2191  000EAC  500A               	movf	___aomod@divisor^0,w,c
  2192  000EAE  100B               	iorwf	(___aomod@divisor+1)^0,w,c
  2193  000EB0  100C               	iorwf	(___aomod@divisor+2)^0,w,c
  2194  000EB2  100D               	iorwf	(___aomod@divisor+3)^0,w,c
  2195  000EB4  100E               	iorwf	(___aomod@divisor+4)^0,w,c
  2196  000EB6  100F               	iorwf	(___aomod@divisor+5)^0,w,c
  2197  000EB8  1010               	iorwf	(___aomod@divisor+6)^0,w,c
  2198  000EBA  1011               	iorwf	(___aomod@divisor+7)^0,w,c
  2199  000EBC  B4D8               	btfsc	status,2,c
  2200  000EBE  EF63  F007         	goto	u1461
  2201  000EC2  EF65  F007         	goto	u1460
  2202  000EC6                     u1461:
  2203  000EC6  EFAD  F007         	goto	l1991
  2204  000ECA                     u1460:
  2205  000ECA  0E01               	movlw	1
  2206  000ECC  6E12               	movwf	___aomod@counter^0,c
  2207  000ECE  EF73  F007         	goto	l1981
  2208  000ED2                     l1979:
  2209  000ED2  90D8               	bcf	status,0,c
  2210  000ED4  360A               	rlcf	___aomod@divisor^0,f,c
  2211  000ED6  360B               	rlcf	(___aomod@divisor+1)^0,f,c
  2212  000ED8  360C               	rlcf	(___aomod@divisor+2)^0,f,c
  2213  000EDA  360D               	rlcf	(___aomod@divisor+3)^0,f,c
  2214  000EDC  360E               	rlcf	(___aomod@divisor+4)^0,f,c
  2215  000EDE  360F               	rlcf	(___aomod@divisor+5)^0,f,c
  2216  000EE0  3610               	rlcf	(___aomod@divisor+6)^0,f,c
  2217  000EE2  3611               	rlcf	(___aomod@divisor+7)^0,f,c
  2218  000EE4  2A12               	incf	___aomod@counter^0,f,c
  2219  000EE6                     l1981:
  2220  000EE6  AE11               	btfss	(___aomod@divisor+7)^0,7,c
  2221  000EE8  EF78  F007         	goto	u1471
  2222  000EEC  EF7A  F007         	goto	u1470
  2223  000EF0                     u1471:
  2224  000EF0  EF69  F007         	goto	l1979
  2225  000EF4                     u1470:
  2226  000EF4                     l1983:
  2227  000EF4  500A               	movf	___aomod@divisor^0,w,c
  2228  000EF6  5C02               	subwf	___aomod@dividend^0,w,c
  2229  000EF8  500B               	movf	(___aomod@divisor+1)^0,w,c
  2230  000EFA  5803               	subwfb	(___aomod@dividend+1)^0,w,c
  2231  000EFC  500C               	movf	(___aomod@divisor+2)^0,w,c
  2232  000EFE  5804               	subwfb	(___aomod@dividend+2)^0,w,c
  2233  000F00  500D               	movf	(___aomod@divisor+3)^0,w,c
  2234  000F02  5805               	subwfb	(___aomod@dividend+3)^0,w,c
  2235  000F04  500E               	movf	(___aomod@divisor+4)^0,w,c
  2236  000F06  5806               	subwfb	(___aomod@dividend+4)^0,w,c
  2237  000F08  500F               	movf	(___aomod@divisor+5)^0,w,c
  2238  000F0A  5807               	subwfb	(___aomod@dividend+5)^0,w,c
  2239  000F0C  5010               	movf	(___aomod@divisor+6)^0,w,c
  2240  000F0E  5808               	subwfb	(___aomod@dividend+6)^0,w,c
  2241  000F10  5011               	movf	(___aomod@divisor+7)^0,w,c
  2242  000F12  5809               	subwfb	(___aomod@dividend+7)^0,w,c
  2243  000F14  A0D8               	btfss	status,0,c
  2244  000F16  EF8F  F007         	goto	u1481
  2245  000F1A  EF91  F007         	goto	u1480
  2246  000F1E                     u1481:
  2247  000F1E  EFA1  F007         	goto	l1987
  2248  000F22                     u1480:
  2249  000F22  500A               	movf	___aomod@divisor^0,w,c
  2250  000F24  5E02               	subwf	___aomod@dividend^0,f,c
  2251  000F26  500B               	movf	(___aomod@divisor+1)^0,w,c
  2252  000F28  5A03               	subwfb	(___aomod@dividend+1)^0,f,c
  2253  000F2A  500C               	movf	(___aomod@divisor+2)^0,w,c
  2254  000F2C  5A04               	subwfb	(___aomod@dividend+2)^0,f,c
  2255  000F2E  500D               	movf	(___aomod@divisor+3)^0,w,c
  2256  000F30  5A05               	subwfb	(___aomod@dividend+3)^0,f,c
  2257  000F32  500E               	movf	(___aomod@divisor+4)^0,w,c
  2258  000F34  5A06               	subwfb	(___aomod@dividend+4)^0,f,c
  2259  000F36  500F               	movf	(___aomod@divisor+5)^0,w,c
  2260  000F38  5A07               	subwfb	(___aomod@dividend+5)^0,f,c
  2261  000F3A  5010               	movf	(___aomod@divisor+6)^0,w,c
  2262  000F3C  5A08               	subwfb	(___aomod@dividend+6)^0,f,c
  2263  000F3E  5011               	movf	(___aomod@divisor+7)^0,w,c
  2264  000F40  5A09               	subwfb	(___aomod@dividend+7)^0,f,c
  2265  000F42                     l1987:
  2266  000F42  90D8               	bcf	status,0,c
  2267  000F44  3211               	rrcf	(___aomod@divisor+7)^0,f,c
  2268  000F46  3210               	rrcf	(___aomod@divisor+6)^0,f,c
  2269  000F48  320F               	rrcf	(___aomod@divisor+5)^0,f,c
  2270  000F4A  320E               	rrcf	(___aomod@divisor+4)^0,f,c
  2271  000F4C  320D               	rrcf	(___aomod@divisor+3)^0,f,c
  2272  000F4E  320C               	rrcf	(___aomod@divisor+2)^0,f,c
  2273  000F50  320B               	rrcf	(___aomod@divisor+1)^0,f,c
  2274  000F52  320A               	rrcf	___aomod@divisor^0,f,c
  2275  000F54  2E12               	decfsz	___aomod@counter^0,f,c
  2276  000F56  EF7A  F007         	goto	l1983
  2277  000F5A                     l1991:
  2278  000F5A  5013               	movf	___aomod@sign^0,w,c
  2279  000F5C  B4D8               	btfsc	status,2,c
  2280  000F5E  EFB3  F007         	goto	u1491
  2281  000F62  EFB5  F007         	goto	u1490
  2282  000F66                     u1491:
  2283  000F66  EFC5  F007         	goto	l1995
  2284  000F6A                     u1490:
  2285  000F6A  1E09               	comf	(___aomod@dividend+7)^0,f,c
  2286  000F6C  1E08               	comf	(___aomod@dividend+6)^0,f,c
  2287  000F6E  1E07               	comf	(___aomod@dividend+5)^0,f,c
  2288  000F70  1E06               	comf	(___aomod@dividend+4)^0,f,c
  2289  000F72  1E05               	comf	(___aomod@dividend+3)^0,f,c
  2290  000F74  1E04               	comf	(___aomod@dividend+2)^0,f,c
  2291  000F76  1E03               	comf	(___aomod@dividend+1)^0,f,c
  2292  000F78  6C02               	negf	___aomod@dividend^0,c
  2293  000F7A  0E00               	movlw	0
  2294  000F7C  2203               	addwfc	(___aomod@dividend+1)^0,f,c
  2295  000F7E  2204               	addwfc	(___aomod@dividend+2)^0,f,c
  2296  000F80  2205               	addwfc	(___aomod@dividend+3)^0,f,c
  2297  000F82  2206               	addwfc	(___aomod@dividend+4)^0,f,c
  2298  000F84  2207               	addwfc	(___aomod@dividend+5)^0,f,c
  2299  000F86  2208               	addwfc	(___aomod@dividend+6)^0,f,c
  2300  000F88  2209               	addwfc	(___aomod@dividend+7)^0,f,c
  2301  000F8A                     l1995:
  2302  000F8A  C002  F002         	movff	___aomod@dividend,?___aomod
  2303  000F8E  C003  F003         	movff	___aomod@dividend+1,?___aomod+1
  2304  000F92  C004  F004         	movff	___aomod@dividend+2,?___aomod+2
  2305  000F96  C005  F005         	movff	___aomod@dividend+3,?___aomod+3
  2306  000F9A  C006  F006         	movff	___aomod@dividend+4,?___aomod+4
  2307  000F9E  C007  F007         	movff	___aomod@dividend+5,?___aomod+5
  2308  000FA2  C008  F008         	movff	___aomod@dividend+6,?___aomod+6
  2309  000FA6  C009  F009         	movff	___aomod@dividend+7,?___aomod+7
  2310  000FAA  0012               	return		;funcret
  2311  000FAC                     __end_of___aomod:
  2312                           	callstack 0
  2313                           
  2314 ;; *************** function ___aodiv *****************
  2315 ;; Defined at:
  2316 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\aodiv.c"
  2317 ;; Parameters:    Size  Location     Type
  2318 ;;  dividend        8    1[COMRAM] long long 
  2319 ;;  divisor         8    9[COMRAM] long long 
  2320 ;; Auto vars:     Size  Location     Type
  2321 ;;  quotient        8   19[COMRAM] long long 
  2322 ;;  sign            1   18[COMRAM] unsigned char 
  2323 ;;  counter         1   17[COMRAM] unsigned char 
  2324 ;; Return value:  Size  Location     Type
  2325 ;;                  8    1[COMRAM] long long 
  2326 ;; Registers used:
  2327 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2328 ;; Tracked objects:
  2329 ;;		On entry : 0/0
  2330 ;;		On exit  : 0/0
  2331 ;;		Unchanged: 0/0
  2332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2333 ;;      Params:        16       0       0       0       0       0       0       0       0
  2334 ;;      Locals:        10       0       0       0       0       0       0       0       0
  2335 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2336 ;;      Totals:        26       0       0       0       0       0       0       0       0
  2337 ;;Total ram usage:       26 bytes
  2338 ;; Hardware stack levels used: 1
  2339 ;; Hardware stack levels required when called: 1
  2340 ;; This function calls:
  2341 ;;		Nothing
  2342 ;; This function is called by:
  2343 ;;		_dtoa
  2344 ;; This function uses a non-reentrant model
  2345 ;;
  2346                           
  2347                           	psect	text12
  2348  000CC0                     __ptext12:
  2349                           	callstack 0
  2350  000CC0                     ___aodiv:
  2351                           	callstack 25
  2352  000CC0  0E00               	movlw	0
  2353  000CC2  6E13               	movwf	___aodiv@sign^0,c
  2354  000CC4  BE11               	btfsc	(___aodiv@divisor+7)^0,7,c
  2355  000CC6  EF69  F006         	goto	u1370
  2356  000CCA  EF67  F006         	goto	u1371
  2357  000CCE                     u1371:
  2358  000CCE  EF7B  F006         	goto	l1927
  2359  000CD2                     u1370:
  2360  000CD2  1E11               	comf	(___aodiv@divisor+7)^0,f,c
  2361  000CD4  1E10               	comf	(___aodiv@divisor+6)^0,f,c
  2362  000CD6  1E0F               	comf	(___aodiv@divisor+5)^0,f,c
  2363  000CD8  1E0E               	comf	(___aodiv@divisor+4)^0,f,c
  2364  000CDA  1E0D               	comf	(___aodiv@divisor+3)^0,f,c
  2365  000CDC  1E0C               	comf	(___aodiv@divisor+2)^0,f,c
  2366  000CDE  1E0B               	comf	(___aodiv@divisor+1)^0,f,c
  2367  000CE0  6C0A               	negf	___aodiv@divisor^0,c
  2368  000CE2  0E00               	movlw	0
  2369  000CE4  220B               	addwfc	(___aodiv@divisor+1)^0,f,c
  2370  000CE6  220C               	addwfc	(___aodiv@divisor+2)^0,f,c
  2371  000CE8  220D               	addwfc	(___aodiv@divisor+3)^0,f,c
  2372  000CEA  220E               	addwfc	(___aodiv@divisor+4)^0,f,c
  2373  000CEC  220F               	addwfc	(___aodiv@divisor+5)^0,f,c
  2374  000CEE  2210               	addwfc	(___aodiv@divisor+6)^0,f,c
  2375  000CF0  2211               	addwfc	(___aodiv@divisor+7)^0,f,c
  2376  000CF2  0E01               	movlw	1
  2377  000CF4  6E13               	movwf	___aodiv@sign^0,c
  2378  000CF6                     l1927:
  2379  000CF6  BE09               	btfsc	(___aodiv@dividend+7)^0,7,c
  2380  000CF8  EF82  F006         	goto	u1380
  2381  000CFC  EF80  F006         	goto	u1381
  2382  000D00                     u1381:
  2383  000D00  EF94  F006         	goto	l1933
  2384  000D04                     u1380:
  2385  000D04  1E09               	comf	(___aodiv@dividend+7)^0,f,c
  2386  000D06  1E08               	comf	(___aodiv@dividend+6)^0,f,c
  2387  000D08  1E07               	comf	(___aodiv@dividend+5)^0,f,c
  2388  000D0A  1E06               	comf	(___aodiv@dividend+4)^0,f,c
  2389  000D0C  1E05               	comf	(___aodiv@dividend+3)^0,f,c
  2390  000D0E  1E04               	comf	(___aodiv@dividend+2)^0,f,c
  2391  000D10  1E03               	comf	(___aodiv@dividend+1)^0,f,c
  2392  000D12  6C02               	negf	___aodiv@dividend^0,c
  2393  000D14  0E00               	movlw	0
  2394  000D16  2203               	addwfc	(___aodiv@dividend+1)^0,f,c
  2395  000D18  2204               	addwfc	(___aodiv@dividend+2)^0,f,c
  2396  000D1A  2205               	addwfc	(___aodiv@dividend+3)^0,f,c
  2397  000D1C  2206               	addwfc	(___aodiv@dividend+4)^0,f,c
  2398  000D1E  2207               	addwfc	(___aodiv@dividend+5)^0,f,c
  2399  000D20  2208               	addwfc	(___aodiv@dividend+6)^0,f,c
  2400  000D22  2209               	addwfc	(___aodiv@dividend+7)^0,f,c
  2401  000D24  0E01               	movlw	1
  2402  000D26  1A13               	xorwf	___aodiv@sign^0,f,c
  2403  000D28                     l1933:
  2404  000D28  EE20  F014         	lfsr	2,___aodiv@quotient
  2405  000D2C  0E07               	movlw	7
  2406  000D2E                     u1391:
  2407  000D2E  6ADE               	clrf	postinc2,c
  2408  000D30  06E8               	decf	wreg,f,c
  2409  000D32  E2FD               	bc	u1391
  2410  000D34  500A               	movf	___aodiv@divisor^0,w,c
  2411  000D36  100B               	iorwf	(___aodiv@divisor+1)^0,w,c
  2412  000D38  100C               	iorwf	(___aodiv@divisor+2)^0,w,c
  2413  000D3A  100D               	iorwf	(___aodiv@divisor+3)^0,w,c
  2414  000D3C  100E               	iorwf	(___aodiv@divisor+4)^0,w,c
  2415  000D3E  100F               	iorwf	(___aodiv@divisor+5)^0,w,c
  2416  000D40  1010               	iorwf	(___aodiv@divisor+6)^0,w,c
  2417  000D42  1011               	iorwf	(___aodiv@divisor+7)^0,w,c
  2418  000D44  B4D8               	btfsc	status,2,c
  2419  000D46  EFA7  F006         	goto	u1401
  2420  000D4A  EFA9  F006         	goto	u1400
  2421  000D4E                     u1401:
  2422  000D4E  EFFB  F006         	goto	l1955
  2423  000D52                     u1400:
  2424  000D52  0E01               	movlw	1
  2425  000D54  6E12               	movwf	___aodiv@counter^0,c
  2426  000D56  EFB7  F006         	goto	l1941
  2427  000D5A                     l1939:
  2428  000D5A  90D8               	bcf	status,0,c
  2429  000D5C  360A               	rlcf	___aodiv@divisor^0,f,c
  2430  000D5E  360B               	rlcf	(___aodiv@divisor+1)^0,f,c
  2431  000D60  360C               	rlcf	(___aodiv@divisor+2)^0,f,c
  2432  000D62  360D               	rlcf	(___aodiv@divisor+3)^0,f,c
  2433  000D64  360E               	rlcf	(___aodiv@divisor+4)^0,f,c
  2434  000D66  360F               	rlcf	(___aodiv@divisor+5)^0,f,c
  2435  000D68  3610               	rlcf	(___aodiv@divisor+6)^0,f,c
  2436  000D6A  3611               	rlcf	(___aodiv@divisor+7)^0,f,c
  2437  000D6C  2A12               	incf	___aodiv@counter^0,f,c
  2438  000D6E                     l1941:
  2439  000D6E  AE11               	btfss	(___aodiv@divisor+7)^0,7,c
  2440  000D70  EFBC  F006         	goto	u1411
  2441  000D74  EFBE  F006         	goto	u1410
  2442  000D78                     u1411:
  2443  000D78  EFAD  F006         	goto	l1939
  2444  000D7C                     u1410:
  2445  000D7C                     l1943:
  2446  000D7C  90D8               	bcf	status,0,c
  2447  000D7E  3614               	rlcf	___aodiv@quotient^0,f,c
  2448  000D80  3615               	rlcf	(___aodiv@quotient+1)^0,f,c
  2449  000D82  3616               	rlcf	(___aodiv@quotient+2)^0,f,c
  2450  000D84  3617               	rlcf	(___aodiv@quotient+3)^0,f,c
  2451  000D86  3618               	rlcf	(___aodiv@quotient+4)^0,f,c
  2452  000D88  3619               	rlcf	(___aodiv@quotient+5)^0,f,c
  2453  000D8A  361A               	rlcf	(___aodiv@quotient+6)^0,f,c
  2454  000D8C  361B               	rlcf	(___aodiv@quotient+7)^0,f,c
  2455  000D8E  500A               	movf	___aodiv@divisor^0,w,c
  2456  000D90  5C02               	subwf	___aodiv@dividend^0,w,c
  2457  000D92  500B               	movf	(___aodiv@divisor+1)^0,w,c
  2458  000D94  5803               	subwfb	(___aodiv@dividend+1)^0,w,c
  2459  000D96  500C               	movf	(___aodiv@divisor+2)^0,w,c
  2460  000D98  5804               	subwfb	(___aodiv@dividend+2)^0,w,c
  2461  000D9A  500D               	movf	(___aodiv@divisor+3)^0,w,c
  2462  000D9C  5805               	subwfb	(___aodiv@dividend+3)^0,w,c
  2463  000D9E  500E               	movf	(___aodiv@divisor+4)^0,w,c
  2464  000DA0  5806               	subwfb	(___aodiv@dividend+4)^0,w,c
  2465  000DA2  500F               	movf	(___aodiv@divisor+5)^0,w,c
  2466  000DA4  5807               	subwfb	(___aodiv@dividend+5)^0,w,c
  2467  000DA6  5010               	movf	(___aodiv@divisor+6)^0,w,c
  2468  000DA8  5808               	subwfb	(___aodiv@dividend+6)^0,w,c
  2469  000DAA  5011               	movf	(___aodiv@divisor+7)^0,w,c
  2470  000DAC  5809               	subwfb	(___aodiv@dividend+7)^0,w,c
  2471  000DAE  A0D8               	btfss	status,0,c
  2472  000DB0  EFDC  F006         	goto	u1421
  2473  000DB4  EFDE  F006         	goto	u1420
  2474  000DB8                     u1421:
  2475  000DB8  EFEF  F006         	goto	l1951
  2476  000DBC                     u1420:
  2477  000DBC  500A               	movf	___aodiv@divisor^0,w,c
  2478  000DBE  5E02               	subwf	___aodiv@dividend^0,f,c
  2479  000DC0  500B               	movf	(___aodiv@divisor+1)^0,w,c
  2480  000DC2  5A03               	subwfb	(___aodiv@dividend+1)^0,f,c
  2481  000DC4  500C               	movf	(___aodiv@divisor+2)^0,w,c
  2482  000DC6  5A04               	subwfb	(___aodiv@dividend+2)^0,f,c
  2483  000DC8  500D               	movf	(___aodiv@divisor+3)^0,w,c
  2484  000DCA  5A05               	subwfb	(___aodiv@dividend+3)^0,f,c
  2485  000DCC  500E               	movf	(___aodiv@divisor+4)^0,w,c
  2486  000DCE  5A06               	subwfb	(___aodiv@dividend+4)^0,f,c
  2487  000DD0  500F               	movf	(___aodiv@divisor+5)^0,w,c
  2488  000DD2  5A07               	subwfb	(___aodiv@dividend+5)^0,f,c
  2489  000DD4  5010               	movf	(___aodiv@divisor+6)^0,w,c
  2490  000DD6  5A08               	subwfb	(___aodiv@dividend+6)^0,f,c
  2491  000DD8  5011               	movf	(___aodiv@divisor+7)^0,w,c
  2492  000DDA  5A09               	subwfb	(___aodiv@dividend+7)^0,f,c
  2493  000DDC  8014               	bsf	___aodiv@quotient^0,0,c
  2494  000DDE                     l1951:
  2495  000DDE  90D8               	bcf	status,0,c
  2496  000DE0  3211               	rrcf	(___aodiv@divisor+7)^0,f,c
  2497  000DE2  3210               	rrcf	(___aodiv@divisor+6)^0,f,c
  2498  000DE4  320F               	rrcf	(___aodiv@divisor+5)^0,f,c
  2499  000DE6  320E               	rrcf	(___aodiv@divisor+4)^0,f,c
  2500  000DE8  320D               	rrcf	(___aodiv@divisor+3)^0,f,c
  2501  000DEA  320C               	rrcf	(___aodiv@divisor+2)^0,f,c
  2502  000DEC  320B               	rrcf	(___aodiv@divisor+1)^0,f,c
  2503  000DEE  320A               	rrcf	___aodiv@divisor^0,f,c
  2504  000DF0  2E12               	decfsz	___aodiv@counter^0,f,c
  2505  000DF2  EFBE  F006         	goto	l1943
  2506  000DF6                     l1955:
  2507  000DF6  5013               	movf	___aodiv@sign^0,w,c
  2508  000DF8  B4D8               	btfsc	status,2,c
  2509  000DFA  EF01  F007         	goto	u1431
  2510  000DFE  EF03  F007         	goto	u1430
  2511  000E02                     u1431:
  2512  000E02  EF13  F007         	goto	l1959
  2513  000E06                     u1430:
  2514  000E06  1E1B               	comf	(___aodiv@quotient+7)^0,f,c
  2515  000E08  1E1A               	comf	(___aodiv@quotient+6)^0,f,c
  2516  000E0A  1E19               	comf	(___aodiv@quotient+5)^0,f,c
  2517  000E0C  1E18               	comf	(___aodiv@quotient+4)^0,f,c
  2518  000E0E  1E17               	comf	(___aodiv@quotient+3)^0,f,c
  2519  000E10  1E16               	comf	(___aodiv@quotient+2)^0,f,c
  2520  000E12  1E15               	comf	(___aodiv@quotient+1)^0,f,c
  2521  000E14  6C14               	negf	___aodiv@quotient^0,c
  2522  000E16  0E00               	movlw	0
  2523  000E18  2215               	addwfc	(___aodiv@quotient+1)^0,f,c
  2524  000E1A  2216               	addwfc	(___aodiv@quotient+2)^0,f,c
  2525  000E1C  2217               	addwfc	(___aodiv@quotient+3)^0,f,c
  2526  000E1E  2218               	addwfc	(___aodiv@quotient+4)^0,f,c
  2527  000E20  2219               	addwfc	(___aodiv@quotient+5)^0,f,c
  2528  000E22  221A               	addwfc	(___aodiv@quotient+6)^0,f,c
  2529  000E24  221B               	addwfc	(___aodiv@quotient+7)^0,f,c
  2530  000E26                     l1959:
  2531  000E26  C014  F002         	movff	___aodiv@quotient,?___aodiv
  2532  000E2A  C015  F003         	movff	___aodiv@quotient+1,?___aodiv+1
  2533  000E2E  C016  F004         	movff	___aodiv@quotient+2,?___aodiv+2
  2534  000E32  C017  F005         	movff	___aodiv@quotient+3,?___aodiv+3
  2535  000E36  C018  F006         	movff	___aodiv@quotient+4,?___aodiv+4
  2536  000E3A  C019  F007         	movff	___aodiv@quotient+5,?___aodiv+5
  2537  000E3E  C01A  F008         	movff	___aodiv@quotient+6,?___aodiv+6
  2538  000E42  C01B  F009         	movff	___aodiv@quotient+7,?___aodiv+7
  2539  000E46  0012               	return		;funcret
  2540  000E48                     __end_of___aodiv:
  2541                           	callstack 0
  2542                           
  2543 ;; *************** function _setupTmr0 *****************
  2544 ;; Defined at:
  2545 ;;		line 44 in file "main.c"
  2546 ;; Parameters:    Size  Location     Type
  2547 ;;		None
  2548 ;; Auto vars:     Size  Location     Type
  2549 ;;		None
  2550 ;; Return value:  Size  Location     Type
  2551 ;;                  1    wreg      void 
  2552 ;; Registers used:
  2553 ;;		wreg, status,2
  2554 ;; Tracked objects:
  2555 ;;		On entry : 0/0
  2556 ;;		On exit  : 0/0
  2557 ;;		Unchanged: 0/0
  2558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2559 ;;      Params:         0       0       0       0       0       0       0       0       0
  2560 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2561 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2562 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2563 ;;Total ram usage:        0 bytes
  2564 ;; Hardware stack levels used: 1
  2565 ;; Hardware stack levels required when called: 1
  2566 ;; This function calls:
  2567 ;;		Nothing
  2568 ;; This function is called by:
  2569 ;;		_main
  2570 ;; This function uses a non-reentrant model
  2571 ;;
  2572                           
  2573                           	psect	text13
  2574  00173A                     __ptext13:
  2575                           	callstack 0
  2576  00173A                     _setupTmr0:
  2577                           	callstack 29
  2578  00173A                     
  2579                           ;main.c: 45:   T08BIT = 0;
  2580  00173A  9CD5               	bcf	4053,6,c	;volatile
  2581                           
  2582                           ;main.c: 46:   T0CS = 0;
  2583  00173C  9AD5               	bcf	4053,5,c	;volatile
  2584                           
  2585                           ;main.c: 47:   PSA = 1;
  2586  00173E  86D5               	bsf	4053,3,c	;volatile
  2587  001740                     
  2588                           ;main.c: 48:   TMR0H = 0x3C;
  2589  001740  0E3C               	movlw	60
  2590  001742  6ED7               	movwf	215,c	;volatile
  2591                           
  2592                           ;main.c: 49:   TMR0L = 0xAF;
  2593  001744  0EAF               	movlw	175
  2594  001746  6ED6               	movwf	214,c	;volatile
  2595  001748                     
  2596                           ;main.c: 50:   TMR0ON = 1;
  2597  001748  8ED5               	bsf	4053,7,c	;volatile
  2598  00174A  0012               	return		;funcret
  2599  00174C                     __end_of_setupTmr0:
  2600                           	callstack 0
  2601                           
  2602 ;; *************** function _setupInt *****************
  2603 ;; Defined at:
  2604 ;;		line 38 in file "main.c"
  2605 ;; Parameters:    Size  Location     Type
  2606 ;;		None
  2607 ;; Auto vars:     Size  Location     Type
  2608 ;;		None
  2609 ;; Return value:  Size  Location     Type
  2610 ;;                  1    wreg      void 
  2611 ;; Registers used:
  2612 ;;		None
  2613 ;; Tracked objects:
  2614 ;;		On entry : 0/0
  2615 ;;		On exit  : 0/0
  2616 ;;		Unchanged: 0/0
  2617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2618 ;;      Params:         0       0       0       0       0       0       0       0       0
  2619 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2620 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2621 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2622 ;;Total ram usage:        0 bytes
  2623 ;; Hardware stack levels used: 1
  2624 ;; Hardware stack levels required when called: 1
  2625 ;; This function calls:
  2626 ;;		Nothing
  2627 ;; This function is called by:
  2628 ;;		_main
  2629 ;; This function uses a non-reentrant model
  2630 ;;
  2631                           
  2632                           	psect	text14
  2633  00174C                     __ptext14:
  2634                           	callstack 0
  2635  00174C                     _setupInt:
  2636                           	callstack 29
  2637  00174C                     
  2638                           ;main.c: 39:   GIE = 1;
  2639  00174C  8EF2               	bsf	4082,7,c	;volatile
  2640                           
  2641                           ;main.c: 40:   INT0IE = 1;
  2642  00174E  88F2               	bsf	4082,4,c	;volatile
  2643                           
  2644                           ;main.c: 41:   INT0IF = 0;
  2645  001750  92F2               	bcf	4082,1,c	;volatile
  2646                           
  2647                           ;main.c: 42:   INTEDG0 = 0;
  2648  001752  9CF1               	bcf	4081,6,c	;volatile
  2649  001754  0012               	return		;funcret
  2650  001756                     __end_of_setupInt:
  2651                           	callstack 0
  2652                           
  2653 ;; *************** function ___awdiv *****************
  2654 ;; Defined at:
  2655 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awdiv.c"
  2656 ;; Parameters:    Size  Location     Type
  2657 ;;  dividend        2    1[COMRAM] int 
  2658 ;;  divisor         2    3[COMRAM] int 
  2659 ;; Auto vars:     Size  Location     Type
  2660 ;;  quotient        2    7[COMRAM] int 
  2661 ;;  sign            1    6[COMRAM] unsigned char 
  2662 ;;  counter         1    5[COMRAM] unsigned char 
  2663 ;; Return value:  Size  Location     Type
  2664 ;;                  2    1[COMRAM] int 
  2665 ;; Registers used:
  2666 ;;		wreg, status,2, status,0
  2667 ;; Tracked objects:
  2668 ;;		On entry : 0/0
  2669 ;;		On exit  : 0/0
  2670 ;;		Unchanged: 0/0
  2671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2672 ;;      Params:         4       0       0       0       0       0       0       0       0
  2673 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2674 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2675 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2676 ;;Total ram usage:        8 bytes
  2677 ;; Hardware stack levels used: 1
  2678 ;; Hardware stack levels required when called: 1
  2679 ;; This function calls:
  2680 ;;		Nothing
  2681 ;; This function is called by:
  2682 ;;		_main
  2683 ;; This function uses a non-reentrant model
  2684 ;;
  2685                           
  2686                           	psect	text15
  2687  001166                     __ptext15:
  2688                           	callstack 0
  2689  001166                     ___awdiv:
  2690                           	callstack 29
  2691  001166  0E00               	movlw	0
  2692  001168  6E07               	movwf	___awdiv@sign^0,c
  2693  00116A  BE05               	btfsc	(___awdiv@divisor+1)^0,7,c
  2694  00116C  EFBC  F008         	goto	u1190
  2695  001170  EFBA  F008         	goto	u1191
  2696  001174                     u1191:
  2697  001174  EFC2  F008         	goto	l1785
  2698  001178                     u1190:
  2699  001178  6C04               	negf	___awdiv@divisor^0,c
  2700  00117A  1E05               	comf	(___awdiv@divisor+1)^0,f,c
  2701  00117C  B0D8               	btfsc	status,0,c
  2702  00117E  2A05               	incf	(___awdiv@divisor+1)^0,f,c
  2703  001180  0E01               	movlw	1
  2704  001182  6E07               	movwf	___awdiv@sign^0,c
  2705  001184                     l1785:
  2706  001184  BE03               	btfsc	(___awdiv@dividend+1)^0,7,c
  2707  001186  EFC9  F008         	goto	u1200
  2708  00118A  EFC7  F008         	goto	u1201
  2709  00118E                     u1201:
  2710  00118E  EFCF  F008         	goto	l1791
  2711  001192                     u1200:
  2712  001192  6C02               	negf	___awdiv@dividend^0,c
  2713  001194  1E03               	comf	(___awdiv@dividend+1)^0,f,c
  2714  001196  B0D8               	btfsc	status,0,c
  2715  001198  2A03               	incf	(___awdiv@dividend+1)^0,f,c
  2716  00119A  0E01               	movlw	1
  2717  00119C  1A07               	xorwf	___awdiv@sign^0,f,c
  2718  00119E                     l1791:
  2719  00119E  0E00               	movlw	0
  2720  0011A0  6E09               	movwf	(___awdiv@quotient+1)^0,c
  2721  0011A2  0E00               	movlw	0
  2722  0011A4  6E08               	movwf	___awdiv@quotient^0,c
  2723  0011A6  5004               	movf	___awdiv@divisor^0,w,c
  2724  0011A8  1005               	iorwf	(___awdiv@divisor+1)^0,w,c
  2725  0011AA  B4D8               	btfsc	status,2,c
  2726  0011AC  EFDA  F008         	goto	u1211
  2727  0011B0  EFDC  F008         	goto	u1210
  2728  0011B4                     u1211:
  2729  0011B4  EF04  F009         	goto	l1813
  2730  0011B8                     u1210:
  2731  0011B8  0E01               	movlw	1
  2732  0011BA  6E06               	movwf	___awdiv@counter^0,c
  2733  0011BC  EFE4  F008         	goto	l1799
  2734  0011C0                     l1797:
  2735  0011C0  90D8               	bcf	status,0,c
  2736  0011C2  3604               	rlcf	___awdiv@divisor^0,f,c
  2737  0011C4  3605               	rlcf	(___awdiv@divisor+1)^0,f,c
  2738  0011C6  2A06               	incf	___awdiv@counter^0,f,c
  2739  0011C8                     l1799:
  2740  0011C8  AE05               	btfss	(___awdiv@divisor+1)^0,7,c
  2741  0011CA  EFE9  F008         	goto	u1221
  2742  0011CE  EFEB  F008         	goto	u1220
  2743  0011D2                     u1221:
  2744  0011D2  EFE0  F008         	goto	l1797
  2745  0011D6                     u1220:
  2746  0011D6                     l1801:
  2747  0011D6  90D8               	bcf	status,0,c
  2748  0011D8  3608               	rlcf	___awdiv@quotient^0,f,c
  2749  0011DA  3609               	rlcf	(___awdiv@quotient+1)^0,f,c
  2750  0011DC  5004               	movf	___awdiv@divisor^0,w,c
  2751  0011DE  5C02               	subwf	___awdiv@dividend^0,w,c
  2752  0011E0  5005               	movf	(___awdiv@divisor+1)^0,w,c
  2753  0011E2  5803               	subwfb	(___awdiv@dividend+1)^0,w,c
  2754  0011E4  A0D8               	btfss	status,0,c
  2755  0011E6  EFF7  F008         	goto	u1231
  2756  0011EA  EFF9  F008         	goto	u1230
  2757  0011EE                     u1231:
  2758  0011EE  EFFE  F008         	goto	l1809
  2759  0011F2                     u1230:
  2760  0011F2  5004               	movf	___awdiv@divisor^0,w,c
  2761  0011F4  5E02               	subwf	___awdiv@dividend^0,f,c
  2762  0011F6  5005               	movf	(___awdiv@divisor+1)^0,w,c
  2763  0011F8  5A03               	subwfb	(___awdiv@dividend+1)^0,f,c
  2764  0011FA  8008               	bsf	___awdiv@quotient^0,0,c
  2765  0011FC                     l1809:
  2766  0011FC  90D8               	bcf	status,0,c
  2767  0011FE  3205               	rrcf	(___awdiv@divisor+1)^0,f,c
  2768  001200  3204               	rrcf	___awdiv@divisor^0,f,c
  2769  001202  2E06               	decfsz	___awdiv@counter^0,f,c
  2770  001204  EFEB  F008         	goto	l1801
  2771  001208                     l1813:
  2772  001208  5007               	movf	___awdiv@sign^0,w,c
  2773  00120A  B4D8               	btfsc	status,2,c
  2774  00120C  EF0A  F009         	goto	u1241
  2775  001210  EF0C  F009         	goto	u1240
  2776  001214                     u1241:
  2777  001214  EF10  F009         	goto	l1817
  2778  001218                     u1240:
  2779  001218  6C08               	negf	___awdiv@quotient^0,c
  2780  00121A  1E09               	comf	(___awdiv@quotient+1)^0,f,c
  2781  00121C  B0D8               	btfsc	status,0,c
  2782  00121E  2A09               	incf	(___awdiv@quotient+1)^0,f,c
  2783  001220                     l1817:
  2784  001220  C008  F002         	movff	___awdiv@quotient,?___awdiv
  2785  001224  C009  F003         	movff	___awdiv@quotient+1,?___awdiv+1
  2786  001228  0012               	return		;funcret
  2787  00122A                     __end_of___awdiv:
  2788                           	callstack 0
  2789                           
  2790 ;; *************** function _Lcd_Write_String *****************
  2791 ;; Defined at:
  2792 ;;		line 88 in file "./lcd.h"
  2793 ;; Parameters:    Size  Location     Type
  2794 ;;  a               2    5[COMRAM] PTR unsigned char 
  2795 ;;		 -> linha2(16), STR_2(12), STR_1(7), 
  2796 ;; Auto vars:     Size  Location     Type
  2797 ;;  i               2    9[COMRAM] int 
  2798 ;; Return value:  Size  Location     Type
  2799 ;;                  1    wreg      void 
  2800 ;; Registers used:
  2801 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2802 ;; Tracked objects:
  2803 ;;		On entry : 0/0
  2804 ;;		On exit  : 0/0
  2805 ;;		Unchanged: 0/0
  2806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2807 ;;      Params:         2       0       0       0       0       0       0       0       0
  2808 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2809 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2810 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2811 ;;Total ram usage:        6 bytes
  2812 ;; Hardware stack levels used: 1
  2813 ;; Hardware stack levels required when called: 3
  2814 ;; This function calls:
  2815 ;;		_Lcd_Write_Char
  2816 ;; This function is called by:
  2817 ;;		_main
  2818 ;; This function uses a non-reentrant model
  2819 ;;
  2820                           
  2821                           	psect	text16
  2822  001384                     __ptext16:
  2823                           	callstack 0
  2824  001384                     _Lcd_Write_String:
  2825                           	callstack 27
  2826  001384                     
  2827                           ;./lcd.h: 89:     int i;;./lcd.h: 90:     for (i = 0; a[i] != '\0'; i++)
  2828  001384  0E00               	movlw	0
  2829  001386  6E0B               	movwf	(Lcd_Write_String@i+1)^0,c
  2830  001388  0E00               	movlw	0
  2831  00138A  6E0A               	movwf	Lcd_Write_String@i^0,c
  2832  00138C  EFE2  F009         	goto	l1755
  2833  001390                     l1751:
  2834                           
  2835                           ;./lcd.h: 91:         Lcd_Write_Char(a[i]);
  2836  001390  500A               	movf	Lcd_Write_String@i^0,w,c
  2837  001392  2406               	addwf	Lcd_Write_String@a^0,w,c
  2838  001394  6E08               	movwf	??_Lcd_Write_String^0,c
  2839  001396  500B               	movf	(Lcd_Write_String@i+1)^0,w,c
  2840  001398  2007               	addwfc	(Lcd_Write_String@a+1)^0,w,c
  2841  00139A  6E09               	movwf	(??_Lcd_Write_String+1)^0,c
  2842  00139C  C008  FFF6         	movff	??_Lcd_Write_String,tblptrl
  2843  0013A0  C009  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  2844  0013A4  6AF8               	clrf	tblptru,c
  2845  0013A6  0E07               	movlw	(high __ramtop+-1)
  2846  0013A8  64F7               	cpfsgt	tblptrh,c
  2847  0013AA  D003               	bra	u1167
  2848  0013AC  0008               	tblrd		*
  2849  0013AE  50F5               	movf	tablat,w,c
  2850  0013B0  D005               	bra	u1160
  2851  0013B2                     u1167:
  2852  0013B2  CFF6 FFE1          	movff	tblptrl,fsr1l
  2853  0013B6  CFF7 FFE2          	movff	tblptrh,fsr1h
  2854  0013BA  50E7               	movf	indf1,w,c
  2855  0013BC                     u1160:
  2856  0013BC  EC56  F00B         	call	_Lcd_Write_Char
  2857  0013C0  4A0A               	infsnz	Lcd_Write_String@i^0,f,c
  2858  0013C2  2A0B               	incf	(Lcd_Write_String@i+1)^0,f,c
  2859  0013C4                     l1755:
  2860  0013C4  500A               	movf	Lcd_Write_String@i^0,w,c
  2861  0013C6  2406               	addwf	Lcd_Write_String@a^0,w,c
  2862  0013C8  6E08               	movwf	??_Lcd_Write_String^0,c
  2863  0013CA  500B               	movf	(Lcd_Write_String@i+1)^0,w,c
  2864  0013CC  2007               	addwfc	(Lcd_Write_String@a+1)^0,w,c
  2865  0013CE  6E09               	movwf	(??_Lcd_Write_String+1)^0,c
  2866  0013D0  C008  FFF6         	movff	??_Lcd_Write_String,tblptrl
  2867  0013D4  C009  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  2868  0013D8  6AF8               	clrf	tblptru,c
  2869  0013DA  0E07               	movlw	(high __ramtop+-1)
  2870  0013DC  64F7               	cpfsgt	tblptrh,c
  2871  0013DE  D003               	bra	u1177
  2872  0013E0  0008               	tblrd		*
  2873  0013E2  50F5               	movf	tablat,w,c
  2874  0013E4  D005               	bra	u1170
  2875  0013E6                     u1177:
  2876  0013E6  CFF6 FFE1          	movff	tblptrl,fsr1l
  2877  0013EA  CFF7 FFE2          	movff	tblptrh,fsr1h
  2878  0013EE  50E7               	movf	indf1,w,c
  2879  0013F0                     u1170:
  2880  0013F0  0900               	iorlw	0
  2881  0013F2  A4D8               	btfss	status,2,c
  2882  0013F4  EFFE  F009         	goto	u1181
  2883  0013F8  EF00  F00A         	goto	u1180
  2884  0013FC                     u1181:
  2885  0013FC  EFC8  F009         	goto	l1751
  2886  001400                     u1180:
  2887  001400  0012               	return		;funcret
  2888  001402                     __end_of_Lcd_Write_String:
  2889                           	callstack 0
  2890                           
  2891 ;; *************** function _Lcd_Write_Char *****************
  2892 ;; Defined at:
  2893 ;;		line 73 in file "./lcd.h"
  2894 ;; Parameters:    Size  Location     Type
  2895 ;;  a               1    wreg     unsigned char 
  2896 ;; Auto vars:     Size  Location     Type
  2897 ;;  a               1    4[COMRAM] unsigned char 
  2898 ;;  y               1    3[COMRAM] unsigned char 
  2899 ;;  temp            1    2[COMRAM] unsigned char 
  2900 ;; Return value:  Size  Location     Type
  2901 ;;                  1    wreg      void 
  2902 ;; Registers used:
  2903 ;;		wreg, status,2, status,0, cstack
  2904 ;; Tracked objects:
  2905 ;;		On entry : 0/0
  2906 ;;		On exit  : 0/0
  2907 ;;		Unchanged: 0/0
  2908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2909 ;;      Params:         0       0       0       0       0       0       0       0       0
  2910 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2911 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2912 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2913 ;;Total ram usage:        3 bytes
  2914 ;; Hardware stack levels used: 1
  2915 ;; Hardware stack levels required when called: 2
  2916 ;; This function calls:
  2917 ;;		_Lcd_Port
  2918 ;; This function is called by:
  2919 ;;		_Lcd_Write_String
  2920 ;; This function uses a non-reentrant model
  2921 ;;
  2922                           
  2923                           	psect	text17
  2924  0016AC                     __ptext17:
  2925                           	callstack 0
  2926  0016AC                     _Lcd_Write_Char:
  2927                           	callstack 27
  2928                           
  2929                           ;incstack = 0
  2930                           ;Lcd_Write_Char@a stored from wreg
  2931  0016AC  6E05               	movwf	Lcd_Write_Char@a^0,c
  2932  0016AE                     
  2933                           ;./lcd.h: 74:     char temp, y;;./lcd.h: 75:     temp = a & 0x0F;
  2934  0016AE  5005               	movf	Lcd_Write_Char@a^0,w,c
  2935  0016B0  0B0F               	andlw	15
  2936  0016B2  6E03               	movwf	Lcd_Write_Char@temp^0,c
  2937                           
  2938                           ;./lcd.h: 76:     y = a & 0xF0;
  2939  0016B4  5005               	movf	Lcd_Write_Char@a^0,w,c
  2940  0016B6  0BF0               	andlw	240
  2941  0016B8  6E04               	movwf	Lcd_Write_Char@y^0,c
  2942  0016BA                     
  2943                           ;./lcd.h: 77:     LATD2 = 1;
  2944  0016BA  848C               	bsf	3980,2,c	;volatile
  2945  0016BC                     
  2946                           ;./lcd.h: 78:     Lcd_Port(y >> 4);
  2947  0016BC  3804               	swapf	Lcd_Write_Char@y^0,w,c
  2948  0016BE  0B0F               	andlw	15
  2949  0016C0  EC9E  F00A         	call	_Lcd_Port
  2950  0016C4                     
  2951                           ;./lcd.h: 79:     LATD3 = 1;
  2952  0016C4  868C               	bsf	3980,3,c	;volatile
  2953  0016C6                     
  2954                           ;./lcd.h: 80:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  2955  0016C6  0E0D               	movlw	13
  2956  0016C8                     u1777:
  2957  0016C8  2EE8               	decfsz	wreg,f,c
  2958  0016CA  D7FE               	bra	u1777
  2959  0016CC  F000               	nop	
  2960  0016CE                     
  2961                           ;./lcd.h: 81:     LATD3 = 0;
  2962  0016CE  968C               	bcf	3980,3,c	;volatile
  2963  0016D0                     
  2964                           ;./lcd.h: 82:     Lcd_Port(temp);
  2965  0016D0  5003               	movf	Lcd_Write_Char@temp^0,w,c
  2966  0016D2  EC9E  F00A         	call	_Lcd_Port
  2967  0016D6                     
  2968                           ;./lcd.h: 83:     LATD3 = 1;
  2969  0016D6  868C               	bsf	3980,3,c	;volatile
  2970  0016D8                     
  2971                           ;./lcd.h: 84:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  2972  0016D8  0E0D               	movlw	13
  2973  0016DA                     u1787:
  2974  0016DA  2EE8               	decfsz	wreg,f,c
  2975  0016DC  D7FE               	bra	u1787
  2976  0016DE  F000               	nop	
  2977  0016E0                     
  2978                           ;./lcd.h: 85:     LATD3 = 0;
  2979  0016E0  968C               	bcf	3980,3,c	;volatile
  2980  0016E2  0012               	return		;funcret
  2981  0016E4                     __end_of_Lcd_Write_Char:
  2982                           	callstack 0
  2983                           
  2984 ;; *************** function _Lcd_Set_Cursor *****************
  2985 ;; Defined at:
  2986 ;;		line 38 in file "./lcd.h"
  2987 ;; Parameters:    Size  Location     Type
  2988 ;;  a               1    wreg     unsigned char 
  2989 ;;  b               1    4[COMRAM] unsigned char 
  2990 ;; Auto vars:     Size  Location     Type
  2991 ;;  a               1    5[COMRAM] unsigned char 
  2992 ;;  temp            1    8[COMRAM] unsigned char 
  2993 ;;  y               1    7[COMRAM] unsigned char 
  2994 ;;  z               1    6[COMRAM] unsigned char 
  2995 ;; Return value:  Size  Location     Type
  2996 ;;                  1    wreg      void 
  2997 ;; Registers used:
  2998 ;;		wreg, status,2, status,0, cstack
  2999 ;; Tracked objects:
  3000 ;;		On entry : 0/0
  3001 ;;		On exit  : 0/0
  3002 ;;		Unchanged: 0/0
  3003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3004 ;;      Params:         1       0       0       0       0       0       0       0       0
  3005 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3006 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3007 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3008 ;;Total ram usage:        5 bytes
  3009 ;; Hardware stack levels used: 1
  3010 ;; Hardware stack levels required when called: 3
  3011 ;; This function calls:
  3012 ;;		_Lcd_Cmd
  3013 ;; This function is called by:
  3014 ;;		_main
  3015 ;; This function uses a non-reentrant model
  3016 ;;
  3017                           
  3018                           	psect	text18
  3019  001474                     __ptext18:
  3020                           	callstack 0
  3021  001474                     _Lcd_Set_Cursor:
  3022                           	callstack 27
  3023                           
  3024                           ;incstack = 0
  3025                           ;Lcd_Set_Cursor@a stored from wreg
  3026  001474  6E06               	movwf	Lcd_Set_Cursor@a^0,c
  3027  001476                     
  3028                           ;./lcd.h: 39:     char temp, z, y;;./lcd.h: 40:     if (a == 1) {
  3029  001476  0406               	decf	Lcd_Set_Cursor@a^0,w,c
  3030  001478  A4D8               	btfss	status,2,c
  3031  00147A  EF41  F00A         	goto	u1141
  3032  00147E  EF43  F00A         	goto	u1140
  3033  001482                     u1141:
  3034  001482  EF54  F00A         	goto	l1713
  3035  001486                     u1140:
  3036  001486                     
  3037                           ;./lcd.h: 41:         temp = 0x80 + b - 1;
  3038  001486  5005               	movf	Lcd_Set_Cursor@b^0,w,c
  3039  001488  0F7F               	addlw	127
  3040  00148A  6E09               	movwf	Lcd_Set_Cursor@temp^0,c
  3041                           
  3042                           ;./lcd.h: 42:         z = temp >> 4;
  3043  00148C  3809               	swapf	Lcd_Set_Cursor@temp^0,w,c
  3044  00148E  0B0F               	andlw	15
  3045  001490  6E07               	movwf	Lcd_Set_Cursor@z^0,c
  3046                           
  3047                           ;./lcd.h: 43:         y = temp & 0x0F;
  3048  001492  5009               	movf	Lcd_Set_Cursor@temp^0,w,c
  3049  001494  0B0F               	andlw	15
  3050  001496  6E08               	movwf	Lcd_Set_Cursor@y^0,c
  3051  001498                     
  3052                           ;./lcd.h: 44:         Lcd_Cmd(z);
  3053  001498  5007               	movf	Lcd_Set_Cursor@z^0,w,c
  3054  00149A  EC8D  F00B         	call	_Lcd_Cmd
  3055  00149E                     
  3056                           ;./lcd.h: 45:         Lcd_Cmd(y);
  3057  00149E  5008               	movf	Lcd_Set_Cursor@y^0,w,c
  3058  0014A0  EC8D  F00B         	call	_Lcd_Cmd
  3059                           
  3060                           ;./lcd.h: 46:     } else if (a == 2) {
  3061  0014A4  EF6C  F00A         	goto	l75
  3062  0014A8                     l1713:
  3063  0014A8  0E02               	movlw	2
  3064  0014AA  1806               	xorwf	Lcd_Set_Cursor@a^0,w,c
  3065  0014AC  A4D8               	btfss	status,2,c
  3066  0014AE  EF5B  F00A         	goto	u1151
  3067  0014B2  EF5D  F00A         	goto	u1150
  3068  0014B6                     u1151:
  3069  0014B6  EF6C  F00A         	goto	l75
  3070  0014BA                     u1150:
  3071  0014BA                     
  3072                           ;./lcd.h: 47:         temp = 0xC0 + b - 1;
  3073  0014BA  5005               	movf	Lcd_Set_Cursor@b^0,w,c
  3074  0014BC  0FBF               	addlw	191
  3075  0014BE  6E09               	movwf	Lcd_Set_Cursor@temp^0,c
  3076                           
  3077                           ;./lcd.h: 48:         z = temp >> 4;
  3078  0014C0  3809               	swapf	Lcd_Set_Cursor@temp^0,w,c
  3079  0014C2  0B0F               	andlw	15
  3080  0014C4  6E07               	movwf	Lcd_Set_Cursor@z^0,c
  3081                           
  3082                           ;./lcd.h: 49:         y = temp & 0x0F;
  3083  0014C6  5009               	movf	Lcd_Set_Cursor@temp^0,w,c
  3084  0014C8  0B0F               	andlw	15
  3085  0014CA  6E08               	movwf	Lcd_Set_Cursor@y^0,c
  3086  0014CC                     
  3087                           ;./lcd.h: 50:         Lcd_Cmd(z);
  3088  0014CC  5007               	movf	Lcd_Set_Cursor@z^0,w,c
  3089  0014CE  EC8D  F00B         	call	_Lcd_Cmd
  3090  0014D2                     
  3091                           ;./lcd.h: 51:         Lcd_Cmd(y);
  3092  0014D2  5008               	movf	Lcd_Set_Cursor@y^0,w,c
  3093  0014D4  EC8D  F00B         	call	_Lcd_Cmd
  3094  0014D8                     l75:
  3095  0014D8  0012               	return		;funcret
  3096  0014DA                     __end_of_Lcd_Set_Cursor:
  3097                           	callstack 0
  3098                           
  3099 ;; *************** function _Lcd_Init *****************
  3100 ;; Defined at:
  3101 ;;		line 55 in file "./lcd.h"
  3102 ;; Parameters:    Size  Location     Type
  3103 ;;		None
  3104 ;; Auto vars:     Size  Location     Type
  3105 ;;		None
  3106 ;; Return value:  Size  Location     Type
  3107 ;;                  1    wreg      void 
  3108 ;; Registers used:
  3109 ;;		wreg, status,2, cstack
  3110 ;; Tracked objects:
  3111 ;;		On entry : 0/0
  3112 ;;		On exit  : 0/0
  3113 ;;		Unchanged: 0/0
  3114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3115 ;;      Params:         0       0       0       0       0       0       0       0       0
  3116 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3117 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3118 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3119 ;;Total ram usage:        1 bytes
  3120 ;; Hardware stack levels used: 1
  3121 ;; Hardware stack levels required when called: 3
  3122 ;; This function calls:
  3123 ;;		_Lcd_Cmd
  3124 ;;		_Lcd_Port
  3125 ;; This function is called by:
  3126 ;;		_main
  3127 ;; This function uses a non-reentrant model
  3128 ;;
  3129                           
  3130                           	psect	text19
  3131  001402                     __ptext19:
  3132                           	callstack 0
  3133  001402                     _Lcd_Init:
  3134                           	callstack 27
  3135  001402                     
  3136                           ;./lcd.h: 56:     Lcd_Port(0x00);
  3137  001402  0E00               	movlw	0
  3138  001404  EC9E  F00A         	call	_Lcd_Port
  3139  001408                     
  3140                           ;./lcd.h: 57:     _delay((unsigned long)((20)*(4000000/4000.0)));
  3141  001408  0E1A               	movlw	26
  3142  00140A  6E05               	movwf	??_Lcd_Init^0,c
  3143  00140C  0EF8               	movlw	248
  3144  00140E                     u1797:
  3145  00140E  2EE8               	decfsz	wreg,f,c
  3146  001410  D7FE               	bra	u1797
  3147  001412  2E05               	decfsz	??_Lcd_Init^0,f,c
  3148  001414  D7FC               	bra	u1797
  3149  001416  D000               	nop2	
  3150  001418                     
  3151                           ;./lcd.h: 58:     Lcd_Cmd(0x03);
  3152  001418  0E03               	movlw	3
  3153  00141A  EC8D  F00B         	call	_Lcd_Cmd
  3154  00141E                     
  3155                           ;./lcd.h: 59:     _delay((unsigned long)((5)*(4000000/4000.0)));
  3156  00141E  0E07               	movlw	7
  3157  001420  6E05               	movwf	??_Lcd_Init^0,c
  3158  001422  0E7D               	movlw	125
  3159  001424                     u1807:
  3160  001424  2EE8               	decfsz	wreg,f,c
  3161  001426  D7FE               	bra	u1807
  3162  001428  2E05               	decfsz	??_Lcd_Init^0,f,c
  3163  00142A  D7FC               	bra	u1807
  3164  00142C  F000               	nop	
  3165  00142E                     
  3166                           ;./lcd.h: 60:     Lcd_Cmd(0x03);
  3167  00142E  0E03               	movlw	3
  3168  001430  EC8D  F00B         	call	_Lcd_Cmd
  3169  001434                     
  3170                           ;./lcd.h: 61:     _delay((unsigned long)((11)*(4000000/4000.0)));
  3171  001434  0E0F               	movlw	15
  3172  001436  6E05               	movwf	??_Lcd_Init^0,c
  3173  001438  0E48               	movlw	72
  3174  00143A                     u1817:
  3175  00143A  2EE8               	decfsz	wreg,f,c
  3176  00143C  D7FE               	bra	u1817
  3177  00143E  2E05               	decfsz	??_Lcd_Init^0,f,c
  3178  001440  D7FC               	bra	u1817
  3179  001442                     
  3180                           ;./lcd.h: 62:     Lcd_Cmd(0x03);
  3181  001442  0E03               	movlw	3
  3182  001444  EC8D  F00B         	call	_Lcd_Cmd
  3183  001448                     
  3184                           ;./lcd.h: 64:     Lcd_Cmd(0x02);
  3185  001448  0E02               	movlw	2
  3186  00144A  EC8D  F00B         	call	_Lcd_Cmd
  3187  00144E                     
  3188                           ;./lcd.h: 65:     Lcd_Cmd(0x02);
  3189  00144E  0E02               	movlw	2
  3190  001450  EC8D  F00B         	call	_Lcd_Cmd
  3191  001454                     
  3192                           ;./lcd.h: 66:     Lcd_Cmd(0x08);
  3193  001454  0E08               	movlw	8
  3194  001456  EC8D  F00B         	call	_Lcd_Cmd
  3195  00145A                     
  3196                           ;./lcd.h: 67:     Lcd_Cmd(0x00);
  3197  00145A  0E00               	movlw	0
  3198  00145C  EC8D  F00B         	call	_Lcd_Cmd
  3199  001460                     
  3200                           ;./lcd.h: 68:     Lcd_Cmd(0x0C);
  3201  001460  0E0C               	movlw	12
  3202  001462  EC8D  F00B         	call	_Lcd_Cmd
  3203  001466                     
  3204                           ;./lcd.h: 69:     Lcd_Cmd(0x00);
  3205  001466  0E00               	movlw	0
  3206  001468  EC8D  F00B         	call	_Lcd_Cmd
  3207  00146C                     
  3208                           ;./lcd.h: 70:     Lcd_Cmd(0x06);
  3209  00146C  0E06               	movlw	6
  3210  00146E  EC8D  F00B         	call	_Lcd_Cmd
  3211  001472  0012               	return		;funcret
  3212  001474                     __end_of_Lcd_Init:
  3213                           	callstack 0
  3214                           
  3215 ;; *************** function _Lcd_Cmd *****************
  3216 ;; Defined at:
  3217 ;;		line 25 in file "./lcd.h"
  3218 ;; Parameters:    Size  Location     Type
  3219 ;;  a               1    wreg     unsigned char 
  3220 ;; Auto vars:     Size  Location     Type
  3221 ;;  a               1    3[COMRAM] unsigned char 
  3222 ;; Return value:  Size  Location     Type
  3223 ;;                  1    wreg      void 
  3224 ;; Registers used:
  3225 ;;		wreg, status,2, cstack
  3226 ;; Tracked objects:
  3227 ;;		On entry : 0/0
  3228 ;;		On exit  : 0/0
  3229 ;;		Unchanged: 0/0
  3230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3231 ;;      Params:         0       0       0       0       0       0       0       0       0
  3232 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3233 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3234 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3235 ;;Total ram usage:        2 bytes
  3236 ;; Hardware stack levels used: 1
  3237 ;; Hardware stack levels required when called: 2
  3238 ;; This function calls:
  3239 ;;		_Lcd_Port
  3240 ;; This function is called by:
  3241 ;;		_Lcd_Set_Cursor
  3242 ;;		_Lcd_Init
  3243 ;;		_Lcd_Clear
  3244 ;;		_Lcd_Shift_Right
  3245 ;;		_Lcd_Shift_Left
  3246 ;; This function uses a non-reentrant model
  3247 ;;
  3248                           
  3249                           	psect	text20
  3250  00171A                     __ptext20:
  3251                           	callstack 0
  3252  00171A                     _Lcd_Cmd:
  3253                           	callstack 27
  3254                           
  3255                           ;incstack = 0
  3256                           ;Lcd_Cmd@a stored from wreg
  3257  00171A  6E04               	movwf	Lcd_Cmd@a^0,c
  3258  00171C                     
  3259                           ;./lcd.h: 26:     LATD2 = 0;
  3260  00171C  948C               	bcf	3980,2,c	;volatile
  3261  00171E                     
  3262                           ;./lcd.h: 27:     Lcd_Port(a);
  3263  00171E  5004               	movf	Lcd_Cmd@a^0,w,c
  3264  001720  EC9E  F00A         	call	_Lcd_Port
  3265  001724                     
  3266                           ;./lcd.h: 28:     LATD3 = 1;
  3267  001724  868C               	bsf	3980,3,c	;volatile
  3268  001726                     
  3269                           ;./lcd.h: 29:     _delay((unsigned long)((4)*(4000000/4000.0)));
  3270  001726  0E06               	movlw	6
  3271  001728  6E03               	movwf	??_Lcd_Cmd^0,c
  3272  00172A  0E30               	movlw	48
  3273  00172C                     u1827:
  3274  00172C  2EE8               	decfsz	wreg,f,c
  3275  00172E  D7FE               	bra	u1827
  3276  001730  2E03               	decfsz	??_Lcd_Cmd^0,f,c
  3277  001732  D7FC               	bra	u1827
  3278  001734  D000               	nop2	
  3279  001736                     
  3280                           ;./lcd.h: 30:     LATD3 = 0;
  3281  001736  968C               	bcf	3980,3,c	;volatile
  3282  001738  0012               	return		;funcret
  3283  00173A                     __end_of_Lcd_Cmd:
  3284                           	callstack 0
  3285                           
  3286 ;; *************** function _Lcd_Port *****************
  3287 ;; Defined at:
  3288 ;;		line 3 in file "./lcd.h"
  3289 ;; Parameters:    Size  Location     Type
  3290 ;;  a               1    wreg     unsigned char 
  3291 ;; Auto vars:     Size  Location     Type
  3292 ;;  a               1    1[COMRAM] unsigned char 
  3293 ;; Return value:  Size  Location     Type
  3294 ;;                  1    wreg      void 
  3295 ;; Registers used:
  3296 ;;		wreg
  3297 ;; Tracked objects:
  3298 ;;		On entry : 0/0
  3299 ;;		On exit  : 0/0
  3300 ;;		Unchanged: 0/0
  3301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3302 ;;      Params:         0       0       0       0       0       0       0       0       0
  3303 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3304 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3305 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3306 ;;Total ram usage:        1 bytes
  3307 ;; Hardware stack levels used: 1
  3308 ;; Hardware stack levels required when called: 1
  3309 ;; This function calls:
  3310 ;;		Nothing
  3311 ;; This function is called by:
  3312 ;;		_Lcd_Cmd
  3313 ;;		_Lcd_Init
  3314 ;;		_Lcd_Write_Char
  3315 ;; This function uses a non-reentrant model
  3316 ;;
  3317                           
  3318                           	psect	text21
  3319  00153C                     __ptext21:
  3320                           	callstack 0
  3321  00153C                     _Lcd_Port:
  3322                           	callstack 27
  3323                           
  3324                           ;incstack = 0
  3325                           ;Lcd_Port@a stored from wreg
  3326  00153C  6E02               	movwf	Lcd_Port@a^0,c
  3327  00153E                     
  3328                           ;./lcd.h: 4:     if (a & 1)
  3329  00153E  A002               	btfss	Lcd_Port@a^0,0,c
  3330  001540  EFA4  F00A         	goto	u1051
  3331  001544  EFA6  F00A         	goto	u1050
  3332  001548                     u1051:
  3333  001548  EFA9  F00A         	goto	l55
  3334  00154C                     u1050:
  3335  00154C                     
  3336                           ;./lcd.h: 5:         LATD4 = 1;
  3337  00154C  888C               	bsf	3980,4,c	;volatile
  3338  00154E  EFAA  F00A         	goto	l1613
  3339  001552                     l55:
  3340                           
  3341                           ;./lcd.h: 7:         LATD4 = 0;
  3342  001552  988C               	bcf	3980,4,c	;volatile
  3343  001554                     l1613:
  3344                           
  3345                           ;./lcd.h: 9:     if (a & 2)
  3346  001554  A202               	btfss	Lcd_Port@a^0,1,c
  3347  001556  EFAF  F00A         	goto	u1061
  3348  00155A  EFB1  F00A         	goto	u1060
  3349  00155E                     u1061:
  3350  00155E  EFB4  F00A         	goto	l57
  3351  001562                     u1060:
  3352  001562                     
  3353                           ;./lcd.h: 10:         LATD5 = 1;
  3354  001562  8A8C               	bsf	3980,5,c	;volatile
  3355  001564  EFB5  F00A         	goto	l1617
  3356  001568                     l57:
  3357                           
  3358                           ;./lcd.h: 12:         LATD5 = 0;
  3359  001568  9A8C               	bcf	3980,5,c	;volatile
  3360  00156A                     l1617:
  3361                           
  3362                           ;./lcd.h: 14:     if (a & 4)
  3363  00156A  A402               	btfss	Lcd_Port@a^0,2,c
  3364  00156C  EFBA  F00A         	goto	u1071
  3365  001570  EFBC  F00A         	goto	u1070
  3366  001574                     u1071:
  3367  001574  EFBF  F00A         	goto	l59
  3368  001578                     u1070:
  3369  001578                     
  3370                           ;./lcd.h: 15:         LATD6 = 1;
  3371  001578  8C8C               	bsf	3980,6,c	;volatile
  3372  00157A  EFC0  F00A         	goto	l1621
  3373  00157E                     l59:
  3374                           
  3375                           ;./lcd.h: 17:         LATD6 = 0;
  3376  00157E  9C8C               	bcf	3980,6,c	;volatile
  3377  001580                     l1621:
  3378                           
  3379                           ;./lcd.h: 19:     if (a & 8)
  3380  001580  A602               	btfss	Lcd_Port@a^0,3,c
  3381  001582  EFC5  F00A         	goto	u1081
  3382  001586  EFC7  F00A         	goto	u1080
  3383  00158A                     u1081:
  3384  00158A  EFCA  F00A         	goto	l61
  3385  00158E                     u1080:
  3386  00158E                     
  3387                           ;./lcd.h: 20:         LATD7 = 1;
  3388  00158E  8E8C               	bsf	3980,7,c	;volatile
  3389  001590  EFCB  F00A         	goto	l63
  3390  001594                     l61:
  3391                           
  3392                           ;./lcd.h: 22:         LATD7 = 0;
  3393  001594  9E8C               	bcf	3980,7,c	;volatile
  3394  001596                     l63:
  3395  001596  0012               	return		;funcret
  3396  001598                     __end_of_Lcd_Port:
  3397                           	callstack 0
  3398                           
  3399 ;; *************** function _interrupcao *****************
  3400 ;; Defined at:
  3401 ;;		line 53 in file "main.c"
  3402 ;; Parameters:    Size  Location     Type
  3403 ;;		None
  3404 ;; Auto vars:     Size  Location     Type
  3405 ;;		None
  3406 ;; Return value:  Size  Location     Type
  3407 ;;                  1    wreg      void 
  3408 ;; Registers used:
  3409 ;;		wreg, status,2, status,0
  3410 ;; Tracked objects:
  3411 ;;		On entry : 0/0
  3412 ;;		On exit  : 0/0
  3413 ;;		Unchanged: 0/0
  3414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3415 ;;      Params:         0       0       0       0       0       0       0       0       0
  3416 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3417 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3418 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3419 ;;Total ram usage:        1 bytes
  3420 ;; Hardware stack levels used: 1
  3421 ;; This function calls:
  3422 ;;		Nothing
  3423 ;; This function is called by:
  3424 ;;		Interrupt level 2
  3425 ;; This function uses a non-reentrant model
  3426 ;;
  3427                           
  3428                           	psect	intcode
  3429  000008                     __pintcode:
  3430                           	callstack 0
  3431  000008                     _interrupcao:
  3432                           	callstack 22
  3433                           
  3434                           ;incstack = 0
  3435  000008  825D               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  3436  00000A  ED76  F009         	call	int_func,f	;refresh shadow registers
  3437                           
  3438                           	psect	intcode_body
  3439  0012EC                     __pintcode_body:
  3440                           	callstack 22
  3441  0012EC                     int_func:
  3442                           	callstack 22
  3443  0012EC  0006               	pop		; remove dummy address from shadow register refresh
  3444  0012EE                     
  3445                           ;main.c: 55:   if (TMR0IF) {
  3446  0012EE  A4F2               	btfss	4082,2,c	;volatile
  3447  0012F0  EF7C  F009         	goto	i2u125_41
  3448  0012F4  EF7E  F009         	goto	i2u125_40
  3449  0012F8                     i2u125_41:
  3450  0012F8  EFAE  F009         	goto	i2l1847
  3451  0012FC                     i2u125_40:
  3452  0012FC                     
  3453                           ;main.c: 56:       if (periodo > 0) {
  3454  0012FC  0100               	movlb	0	; () banked
  3455  0012FE  BF75               	btfsc	(_periodo+1)& (0+255),7,b
  3456  001300  EF8A  F009         	goto	i2u126_41
  3457  001304  5175               	movf	(_periodo+1)& (0+255),w,b
  3458  001306  E108               	bnz	i2u126_40
  3459  001308  0574               	decf	_periodo& (0+255),w,b
  3460  00130A  A0D8               	btfss	status,0,c
  3461  00130C  EF8A  F009         	goto	i2u126_41
  3462  001310  EF8C  F009         	goto	i2u126_40
  3463  001314                     i2u126_41:
  3464  001314  EFA8  F009         	goto	i2l1839
  3465  001318                     i2u126_40:
  3466  001318                     
  3467                           ; BSR set to: 0
  3468                           ;main.c: 57:         if (cont >= periodo) {
  3469  001318  5174               	movf	_periodo& (0+255),w,b
  3470  00131A  5DC0               	subwf	_cont& (0+255),w,b
  3471  00131C  51C1               	movf	(_cont+1)& (0+255),w,b
  3472  00131E  0A80               	xorlw	128
  3473  001320  6E01               	movwf	??_interrupcao^0,c
  3474  001322  5175               	movf	(_periodo+1)& (0+255),w,b
  3475  001324  0A80               	xorlw	128
  3476  001326  5801               	subwfb	??_interrupcao^0,w,c
  3477  001328  A0D8               	btfss	status,0,c
  3478  00132A  EF99  F009         	goto	i2u127_41
  3479  00132E  EF9B  F009         	goto	i2u127_40
  3480  001332                     i2u127_41:
  3481  001332  EFA6  F009         	goto	i2l1837
  3482  001336                     i2u127_40:
  3483  001336                     
  3484                           ; BSR set to: 0
  3485                           ;main.c: 58:             LATDbits.LATD0 = 0;
  3486  001336  908C               	bcf	140,0,c	;volatile
  3487  001338                     
  3488                           ; BSR set to: 0
  3489                           ;main.c: 59:             periodo = 0;
  3490  001338  0E00               	movlw	0
  3491  00133A  6F75               	movwf	(_periodo+1)& (0+255),b
  3492  00133C  0E00               	movlw	0
  3493  00133E  6F74               	movwf	_periodo& (0+255),b
  3494                           
  3495                           ;main.c: 60:             cont = 1;
  3496  001340  0E00               	movlw	0
  3497  001342  6FC1               	movwf	(_cont+1)& (0+255),b
  3498  001344  0E01               	movlw	1
  3499  001346  6FC0               	movwf	_cont& (0+255),b
  3500                           
  3501                           ;main.c: 61:         } else {
  3502  001348  EFA8  F009         	goto	i2l1839
  3503  00134C                     i2l1837:
  3504                           
  3505                           ; BSR set to: 0
  3506                           ;main.c: 62:             cont++;
  3507  00134C  4BC0               	infsnz	_cont& (0+255),f,b
  3508  00134E  2BC1               	incf	(_cont+1)& (0+255),f,b
  3509  001350                     i2l1839:
  3510                           
  3511                           ; BSR set to: 0
  3512                           ;main.c: 65:     TMR0H = 0x3C;
  3513  001350  0E3C               	movlw	60
  3514  001352  6ED7               	movwf	215,c	;volatile
  3515  001354                     
  3516                           ; BSR set to: 0
  3517                           ;main.c: 66:     TMR0L = 0xAF;
  3518  001354  0EAF               	movlw	175
  3519  001356  6ED6               	movwf	214,c	;volatile
  3520  001358                     
  3521                           ; BSR set to: 0
  3522                           ;main.c: 67:     TMR0IF = 0;
  3523  001358  94F2               	bcf	4082,2,c	;volatile
  3524  00135A                     
  3525                           ; BSR set to: 0
  3526                           ;main.c: 68:     TMR0IE = 1;
  3527  00135A  8AF2               	bsf	4082,5,c	;volatile
  3528  00135C                     i2l1847:
  3529                           
  3530                           ;main.c: 71:   if (INT0IF) {
  3531  00135C  A2F2               	btfss	4082,1,c	;volatile
  3532  00135E  EFB3  F009         	goto	i2u128_41
  3533  001362  EFB5  F009         	goto	i2u128_40
  3534  001366                     i2u128_41:
  3535  001366  EFC0  F009         	goto	i2l129
  3536  00136A                     i2u128_40:
  3537  00136A                     
  3538                           ;main.c: 72:     LATDbits.LATD0 = 1;
  3539  00136A  808C               	bsf	140,0,c	;volatile
  3540  00136C                     
  3541                           ;main.c: 73:     periodo = 150;
  3542  00136C  0E00               	movlw	0
  3543  00136E  0100               	movlb	0	; () banked
  3544  001370  6F75               	movwf	(_periodo+1)& (0+255),b
  3545  001372  0E96               	movlw	150
  3546  001374  6F74               	movwf	_periodo& (0+255),b
  3547                           
  3548                           ;main.c: 74:     cont = 1;
  3549  001376  0E00               	movlw	0
  3550  001378  6FC1               	movwf	(_cont+1)& (0+255),b
  3551  00137A  0E01               	movlw	1
  3552  00137C  6FC0               	movwf	_cont& (0+255),b
  3553  00137E                     
  3554                           ; BSR set to: 0
  3555                           ;main.c: 75:     INT0IF = 0;
  3556  00137E  92F2               	bcf	4082,1,c	;volatile
  3557  001380                     i2l129:
  3558  001380  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3559  001382  0011               	retfie		f
  3560  001384                     __end_of_interrupcao:
  3561                           	callstack 0
  3562                           
  3563                           	psect	rparam
  3564  0000                     
  3565                           	psect	temp
  3566  00005D                     btemp:
  3567                           	callstack 0
  3568  00005D                     	ds	1
  3569  0000                     int$flags	set	btemp
  3570  0000                     wtemp8	set	btemp+1
  3571  0000                     ttemp5	set	btemp+1
  3572  0000                     ttemp6	set	btemp+4
  3573  0000                     ttemp7	set	btemp+8
  3574                           
  3575                           	psect	idloc
  3576                           
  3577                           ;Config register IDLOC0 @ 0x200000
  3578                           ;	unspecified, using default values
  3579  200000                     	org	2097152
  3580  200000  FF                 	db	255
  3581                           
  3582                           ;Config register IDLOC1 @ 0x200001
  3583                           ;	unspecified, using default values
  3584  200001                     	org	2097153
  3585  200001  FF                 	db	255
  3586                           
  3587                           ;Config register IDLOC2 @ 0x200002
  3588                           ;	unspecified, using default values
  3589  200002                     	org	2097154
  3590  200002  FF                 	db	255
  3591                           
  3592                           ;Config register IDLOC3 @ 0x200003
  3593                           ;	unspecified, using default values
  3594  200003                     	org	2097155
  3595  200003  FF                 	db	255
  3596                           
  3597                           ;Config register IDLOC4 @ 0x200004
  3598                           ;	unspecified, using default values
  3599  200004                     	org	2097156
  3600  200004  FF                 	db	255
  3601                           
  3602                           ;Config register IDLOC5 @ 0x200005
  3603                           ;	unspecified, using default values
  3604  200005                     	org	2097157
  3605  200005  FF                 	db	255
  3606                           
  3607                           ;Config register IDLOC6 @ 0x200006
  3608                           ;	unspecified, using default values
  3609  200006                     	org	2097158
  3610  200006  FF                 	db	255
  3611                           
  3612                           ;Config register IDLOC7 @ 0x200007
  3613                           ;	unspecified, using default values
  3614  200007                     	org	2097159
  3615  200007  FF                 	db	255
  3616                           
  3617                           	psect	config
  3618                           
  3619                           ;Config register CONFIG1L @ 0x300000
  3620                           ;	unspecified, using default values
  3621                           ;	PLL Prescaler Selection bits
  3622                           ;	PLLDIV = 0x0, unprogrammed default
  3623                           ;	System Clock Postscaler Selection bits
  3624                           ;	CPUDIV = 0x0, unprogrammed default
  3625                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  3626                           ;	USBDIV = 0x0, unprogrammed default
  3627  300000                     	org	3145728
  3628  300000  00                 	db	0
  3629                           
  3630                           ;Config register CONFIG1H @ 0x300001
  3631                           ;	Oscillator Selection bits
  3632                           ;	FOSC = INTOSC_EC, Internal oscillator, CLKO function on RA6, EC used by USB (INTCKO)
  3633                           ;	Fail-Safe Clock Monitor Enable bit
  3634                           ;	FCMEN = 0x0, unprogrammed default
  3635                           ;	Internal/External Oscillator Switchover bit
  3636                           ;	IESO = 0x0, unprogrammed default
  3637  300001                     	org	3145729
  3638  300001  09                 	db	9
  3639                           
  3640                           ;Config register CONFIG2L @ 0x300002
  3641                           ;	unspecified, using default values
  3642                           ;	Power-up Timer Enable bit
  3643                           ;	PWRT = 0x1, unprogrammed default
  3644                           ;	Brown-out Reset Enable bits
  3645                           ;	BOR = 0x3, unprogrammed default
  3646                           ;	Brown-out Reset Voltage bits
  3647                           ;	BORV = 0x3, unprogrammed default
  3648                           ;	USB Voltage Regulator Enable bit
  3649                           ;	VREGEN = 0x0, unprogrammed default
  3650  300002                     	org	3145730
  3651  300002  1F                 	db	31
  3652                           
  3653                           ;Config register CONFIG2H @ 0x300003
  3654                           ;	Watchdog Timer Enable bit
  3655                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3656                           ;	Watchdog Timer Postscale Select bits
  3657                           ;	WDTPS = 0xF, unprogrammed default
  3658  300003                     	org	3145731
  3659  300003  1E                 	db	30
  3660                           
  3661                           ; Padding undefined space
  3662  300004                     	org	3145732
  3663  300004  FF                 	db	255
  3664                           
  3665                           ;Config register CONFIG3H @ 0x300005
  3666                           ;	CCP2 MUX bit
  3667                           ;	CCP2MX = 0x1, unprogrammed default
  3668                           ;	PORTB A/D Enable bit
  3669                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  3670                           ;	Low-Power Timer 1 Oscillator Enable bit
  3671                           ;	LPT1OSC = 0x0, unprogrammed default
  3672                           ;	MCLR Pin Enable bit
  3673                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR pin disabled
  3674  300005                     	org	3145733
  3675  300005  01                 	db	1
  3676                           
  3677                           ;Config register CONFIG4L @ 0x300006
  3678                           ;	unspecified, using default values
  3679                           ;	Stack Full/Underflow Reset Enable bit
  3680                           ;	STVREN = 0x1, unprogrammed default
  3681                           ;	Single-Supply ICSP Enable bit
  3682                           ;	LVP = 0x1, unprogrammed default
  3683                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  3684                           ;	ICPRT = 0x0, unprogrammed default
  3685                           ;	Extended Instruction Set Enable bit
  3686                           ;	XINST = 0x0, unprogrammed default
  3687                           ;	Background Debugger Enable bit
  3688                           ;	DEBUG = 0x1, unprogrammed default
  3689  300006                     	org	3145734
  3690  300006  85                 	db	133
  3691                           
  3692                           ; Padding undefined space
  3693  300007                     	org	3145735
  3694  300007  FF                 	db	255
  3695                           
  3696                           ;Config register CONFIG5L @ 0x300008
  3697                           ;	unspecified, using default values
  3698                           ;	Code Protection bit
  3699                           ;	CP0 = 0x1, unprogrammed default
  3700                           ;	Code Protection bit
  3701                           ;	CP1 = 0x1, unprogrammed default
  3702                           ;	Code Protection bit
  3703                           ;	CP2 = 0x1, unprogrammed default
  3704                           ;	Code Protection bit
  3705                           ;	CP3 = 0x1, unprogrammed default
  3706  300008                     	org	3145736
  3707  300008  0F                 	db	15
  3708                           
  3709                           ;Config register CONFIG5H @ 0x300009
  3710                           ;	unspecified, using default values
  3711                           ;	Boot Block Code Protection bit
  3712                           ;	CPB = 0x1, unprogrammed default
  3713                           ;	Data EEPROM Code Protection bit
  3714                           ;	CPD = 0x1, unprogrammed default
  3715  300009                     	org	3145737
  3716  300009  C0                 	db	192
  3717                           
  3718                           ;Config register CONFIG6L @ 0x30000A
  3719                           ;	unspecified, using default values
  3720                           ;	Write Protection bit
  3721                           ;	WRT0 = 0x1, unprogrammed default
  3722                           ;	Write Protection bit
  3723                           ;	WRT1 = 0x1, unprogrammed default
  3724                           ;	Write Protection bit
  3725                           ;	WRT2 = 0x1, unprogrammed default
  3726                           ;	Write Protection bit
  3727                           ;	WRT3 = 0x1, unprogrammed default
  3728  30000A                     	org	3145738
  3729  30000A  0F                 	db	15
  3730                           
  3731                           ;Config register CONFIG6H @ 0x30000B
  3732                           ;	unspecified, using default values
  3733                           ;	Configuration Register Write Protection bit
  3734                           ;	WRTC = 0x1, unprogrammed default
  3735                           ;	Boot Block Write Protection bit
  3736                           ;	WRTB = 0x1, unprogrammed default
  3737                           ;	Data EEPROM Write Protection bit
  3738                           ;	WRTD = 0x1, unprogrammed default
  3739  30000B                     	org	3145739
  3740  30000B  E0                 	db	224
  3741                           
  3742                           ;Config register CONFIG7L @ 0x30000C
  3743                           ;	unspecified, using default values
  3744                           ;	Table Read Protection bit
  3745                           ;	EBTR0 = 0x1, unprogrammed default
  3746                           ;	Table Read Protection bit
  3747                           ;	EBTR1 = 0x1, unprogrammed default
  3748                           ;	Table Read Protection bit
  3749                           ;	EBTR2 = 0x1, unprogrammed default
  3750                           ;	Table Read Protection bit
  3751                           ;	EBTR3 = 0x1, unprogrammed default
  3752  30000C                     	org	3145740
  3753  30000C  0F                 	db	15
  3754                           
  3755                           ;Config register CONFIG7H @ 0x30000D
  3756                           ;	unspecified, using default values
  3757                           ;	Boot Block Table Read Protection bit
  3758                           ;	EBTRB = 0x1, unprogrammed default
  3759  30000D                     	org	3145741
  3760  30000D  40                 	db	64
  3761                           tosu	equ	0xFFF
  3762                           tosh	equ	0xFFE
  3763                           tosl	equ	0xFFD
  3764                           stkptr	equ	0xFFC
  3765                           pclatu	equ	0xFFB
  3766                           pclath	equ	0xFFA
  3767                           pcl	equ	0xFF9
  3768                           tblptru	equ	0xFF8
  3769                           tblptrh	equ	0xFF7
  3770                           tblptrl	equ	0xFF6
  3771                           tablat	equ	0xFF5
  3772                           prodh	equ	0xFF4
  3773                           prodl	equ	0xFF3
  3774                           indf0	equ	0xFEF
  3775                           postinc0	equ	0xFEE
  3776                           postdec0	equ	0xFED
  3777                           preinc0	equ	0xFEC
  3778                           plusw0	equ	0xFEB
  3779                           fsr0h	equ	0xFEA
  3780                           fsr0l	equ	0xFE9
  3781                           wreg	equ	0xFE8
  3782                           indf1	equ	0xFE7
  3783                           postinc1	equ	0xFE6
  3784                           postdec1	equ	0xFE5
  3785                           preinc1	equ	0xFE4
  3786                           plusw1	equ	0xFE3
  3787                           fsr1h	equ	0xFE2
  3788                           fsr1l	equ	0xFE1
  3789                           bsr	equ	0xFE0
  3790                           indf2	equ	0xFDF
  3791                           postinc2	equ	0xFDE
  3792                           postdec2	equ	0xFDD
  3793                           preinc2	equ	0xFDC
  3794                           plusw2	equ	0xFDB
  3795                           fsr2h	equ	0xFDA
  3796                           fsr2l	equ	0xFD9
  3797                           status	equ	0xFD8

Data Sizes:
    Strings     45
    Constant    0
    Data        2
    BSS         86
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     86      92
    BANK0           160     16      98
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> linha2(BANK0[16]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_4(CODE[13]), STR_3(CODE[13]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 13
		 -> STR_4(CODE[13]), STR_3(CODE[13]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_4(CODE[13]), STR_3(CODE[13]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> linha2(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S635_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> linha2(BANK0[16]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> linha2(BANK0[16]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 16
		 -> linha2(BANK0[16]), STR_2(CODE[12]), STR_1(CODE[7]), 


Critical Paths under _main in COMRAM

    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _interrupcao in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->_vfprintf

Critical Paths under _interrupcao in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupcao in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupcao in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupcao in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupcao in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupcao in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interrupcao in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interrupcao in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   10503
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            ___awdiv
                           _setupInt
                          _setupTmr0
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6    8597
                                              2 BANK0     14     8      6
                            ___awdiv (ARG)
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    7931
                                             80 COMRAM     6     0      6
                                              0 BANK0      2     2      0
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           42    36      6    7458
                                             64 COMRAM    16    10      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    5683
                                             28 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    3417
                                             17 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     220
                                              1 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1537
                                             10 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4    1037
                                              1 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     183
                                             19 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     613
                                              1 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     625
                                              1 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _setupTmr0                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupInt                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     452
                                              1 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     6     4      2     572
                                              5 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     178
                                              2 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1     684
                                              4 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     198
                                              4 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0     110
                                              2 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _interrupcao                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   ___awdiv
   _setupInt
   _setupTmr0
   _sprintf
     ___awdiv (ARG)
     _vfprintf (ARG)
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
             _strlen
         _fputc

 _interrupcao (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     10      62       5       61.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     56      5C       1       97.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      BE      20        0.0%
DATA                 0      0      BE       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Sun Jun 06 20:04:40 2021

                       l61 1594                         l63 1596                         l55 1552  
                       l57 1568                         l81 16E2                         l66 1738  
                       l59 157E                         l75 14D8                         l78 1472  
                       l87 1400               ___awdiv@sign 0007                        l116 1754  
                      l119 174A                        l270 0FAA                        l257 0E46  
                      l374 1228                        l900 166C                        l821 15E8  
                      l912 1164                        l920 162C                        l923 1758  
                      l851 12B0                        l853 12EA                        l861 08D6  
                      l848 126E                        l929 1718                        l859 08CE  
                      l892 1532                        l893 153A                        l886 0CBE  
                      l879 0B0C                        l897 1664                        _GIE 007F97  
                      _PSA 007EAB                        _abs 162E                        _pad 122A  
                      wreg 000FE8                       l2001 1238                       l2011 128E  
                     l2003 124C                       ?_abs 0014                       l2021 162E  
                     l2013 1292                       l2005 125A                       l2101 0BE4  
                     l2023 1648                       l2015 12BE                       l2007 1266  
                     l2031 0898                       l2111 0C62                       l2017 12D2  
                     l2009 127A                       l2041 08F0                       l2033 08A6  
                     l2025 0830                       l2105 0C1C                       l2121 0C88  
                     l2051 091C                       l2043 08FE                       l2035 08A8  
                     l2027 0850                       l2123 0CAC                       l2107 0C40  
                     l2115 0C6E                       l2131 14E2                       l2061 0A28  
                     l2053 099E                       l2045 0904                       l2037 08C2  
                     l2029 0878                       l2117 0C7C                       l2109 0C4E  
                     l2133 14F0                       l2141 15B2                       l2071 0A9A  
                     l2063 0A46                       l2055 09A4                       l2047 090C  
                     l2039 08DE                       l2135 1516                       l2143 15BA  
                     l2151 0FC4                       l2081 0AD4                       l2073 0AA8  
                     l2065 0A60                       l2057 09AA                       l2049 0916  
                     l2129 14DA                       l2145 15D6                       l2137 1598  
                     l2161 0FEC                       l2153 0FC8                       l1611 154C  
                     l2075 0AAE                       l2083 0AE4                       l2067 0A7A  
                     l2059 0A0E                       l2091 0B40                       l2139 15AA  
                     l2171 1054                       l2163 0FF8                       l2155 0FCC  
                     l1621 1580                       l1613 1554                       l2077 0AC0  
                     l2069 0A88                       l2093 0B50                       l2173 1064  
                     l2165 0FFC                       l2157 0FD6                       l2149 0FAC  
                     l1623 158E                       l1615 1562                       l1711 149E  
                     l2079 0ACC                       l2095 0B54                       l2087 0B0E  
                     l2175 1076                       l2167 101A                       l2159 0FE2  
                     l1617 156A                       l1609 153E                       l1721 1402  
                     l1713 14A8                       l1705 1476                       l1801 11D6  
                     l2097 0B78                       l2089 0B32                       l2177 108A  
                     l2169 104A                       l1619 1578                       l1731 1434  
                     l1723 1408                       l1715 14BA                       l1707 1486  
                     l1811 1202                       l1803 11DC                       l2099 0B9C  
                     l1741 145A                       l1733 1442                       l1725 1418  
                     l1717 14CC                       l1709 1498                       l1805 11F2  
                     l1813 1208                       l1901 15EA                       l1671 1724  
                     l1743 1460                       l1735 1448                       l1727 141E  
                     l1719 14D2                       l1751 1390                       l1815 1218  
                     l1807 11FA                       l1903 15F6                       l1911 16F0  
                     l1673 1726                       l1745 1466                       l1737 144E  
                     l1729 142E                       l1681 16BC                       l1753 13C0  
                     l1817 1220                       l1809 11FC                       l1761 1740  
                     l1921 0CC4                       l1905 1608                       l1913 16F4  
                     l1675 1736                       l1667 171C                       l1747 146C  
                     l1739 1454                       l1691 16D6                       l1683 16C4  
                     l1755 13C4                       l1763 1748                       l1931 0D24  
                     l1923 0CD2                       l1907 160C                       l1915 170C  
                     l1669 171E                       l1693 16D8                       l1685 16C6  
                     l1677 16AE                       l1749 1384                       l1781 1178  
                     l1757 174C                       l1941 0D6E                       l1933 0D28  
                     l1925 0CF2                       l1909 16E4                       l1695 16E0  
                     l1687 16CE                       l1679 16BA                       l1791 119E  
                     l1783 1180                       l1759 173A                       l1951 0DDE  
                     l1943 0D7C                       l1935 0D34                       l1927 0CF6  
                     l1919 0CC0                       l1689 16D0                       l1793 11A6  
                     l1785 1184                       l1777 1166                       l1953 0DF0  
                     l1945 0D8E                       l1937 0D52                       l1929 0D04  
                     l1795 11B8                       l1787 1192                       l1779 116A  
                     l1947 0DBC                       l1939 0D5A                       l1955 0DF6  
                     l1971 0E7E                       l1963 0E48                       l1891 10C0  
                     l1797 11C0                       l1789 119A                       l1957 0E06  
                     l1949 0DDC                       l1981 0EE6                       l1973 0E8C  
                     l1965 0E4C                       l1893 10CA                       ?_pad 0012  
                     l1799 11C8                       l1959 0E26                       l1983 0EF4  
                     l1991 0F5A                       l1975 0EAC                       l1967 0E5A  
                     l1895 10E8                       l1887 109C                       l1993 0F6A  
                     l1985 0F22                       l1977 0ECA                       l1969 0E7A  
                     l1897 111E                       l1889 10AE                       l1995 0F8A  
                     l1987 0F42                       l1979 0ED2                       l1989 0F54  
                     l1999 122A                       STR_1 0827                       STR_2 081B  
                     STR_3 080E                       STR_4 0801                       _T0CS 007EAD  
                     u1200 1192                       u1201 118E                       u1050 154C  
                     u1210 11B8                       u1051 1548                       u1211 11B4  
                     u1060 1562                       u1140 1486                       u1220 11D6  
                     u1061 155E                       u1141 1482                       u1221 11D2  
                     u1070 1578                       u1150 14BA                       u1230 11F2  
                     u1310 10AE                       u1071 1574                       u1151 14B6  
                     u1231 11EE                       u1311 10AA                       u1080 158E  
                     u1160 13BC                       u1240 1218                       u1400 0D52  
                     u1320 10C0                       u1081 158A                       u1241 1214  
                     u1401 0D4E                       u1321 10BC                       u1170 13F0  
                     u1410 0D7C                       u1330 10E8                       u1411 0D78  
                     u1331 10E4                       u1180 1400                       u1420 0DBC  
                     u1340 111E                       u1500 1238                       u1181 13FC  
                     u1421 0DB8                       u1341 111A                       u1501 1234  
                     u1190 1178                       u1430 0E06                       u1350 162C  
                     u1510 125A                       u1167 13B2                       u1191 1174  
                     u1431 0E02                       u1351 1628                       u1511 1256  
                     u1440 0E5A                       u1360 170C                       u1520 12B0  
                     u1600 08F0                       u1177 13E6                       u1441 0E56  
                     u1361 1708                       u1521 12AC                       u1601 08EC  
                     u1370 0CD2                       u1450 0E8C                       u1530 12BE  
                     u1610 08FE                       u1371 0CCE                       u1451 0E88  
                     u1531 12BA                       u1611 08FA                       u1380 0D04  
                     u1460 0ECA                       u1540 1648                       u1620 0A28  
                     u1700 0B32                       u1381 0D00                       u1461 0EC6  
                     u1541 1644                       u1621 0A24                       u1701 0B2E  
                     u1470 0EF4                       u1630 0A46                       u1550 0860  
                     u1710 0B78                       u1391 0D2E                       u1471 0EF0  
                     u1631 0A42                       u1551 085A                       u1711 0B74  
                     u1480 0F22                       u1640 0A60                       u1560 0862  
                     u1720 0B9C                       u1481 0F1E                       u1641 0A5C  
                     u1721 0B98                       u1490 0F6A                       u1650 0A7A  
                     u1570 0878                       u1730 0C40                       u1491 0F66  
                     u1651 0A76                       u1571 0874                       u1731 0C3C  
                     u1660 0A88                       u1580 08A6                       u1740 1532  
                     u1661 0A84                       u1581 08A2                       u1741 152E  
                     u1670 0A9A                       u1590 08C2                       u1750 101A  
                     u1807 1424                       u1671 0A96                       u1591 08BE  
                     u1751 1016                       u1680 0AA8                       u1760 1076  
                     u1817 143A                       u1681 0AA4                       u1761 1072  
                     u1690 0AC0                       u1827 172C                       u1691 0ABC  
                     u1777 16C8                       u1787 16DA                       u1797 140E  
                     abs@a 0014          ?_Lcd_Write_String 0006                       _dbuf 0080  
                     _cont 00C0                       _main 0FAC                       _dtoa 0830  
                     _prec 0059                       _nout 0070                       pad@i 0019  
                     pad@p 0016                       fsr1h 000FE2                       fsr2h 000FDA  
                     indf1 000FE7                       indf2 000FDF                       fsr1l 000FE1  
                     pad@w 001B                       fsr2l 000FD9                       btemp 005D  
                     start 000E         ??_Lcd_Write_String 0008            __end_of_Lcd_Cmd 173A  
             ___param_bank 000000                      ??_abs 0016                      ??_pad 0018  
          __end_of___aodiv 0E48                      ?_main 0001                      ?_dtoa 001D  
          __end_of___aomod 0FAC            __end_of___awdiv 122A            ___awdiv@divisor 0004  
                    _LATD2 007C62                      _LATD3 007C63                      _LATD4 007C64  
                    _LATD5 007C65                      _LATD6 007C66                      _LATD7 007C67  
                    i2l129 1380            ___awdiv@counter 0006               vfpfcnvrt@fmt 0043  
                    _TMR0H 000FD7                      _TMR0L 000FD6    __size_of_Lcd_Set_Cursor 0066  
                    _TRISB 000F93                      _TRISD 000F95                      _TRISE 000F96  
                    _flags 005B                      _fputc 109C                      _fputs 15EA  
                    _tecla 0076                      pad@fp 0012                      _width 0057  
                    _putch 1758                      dtoa@d 001F                      dtoa@i 003F  
                    dtoa@n 0037                      dtoa@p 0031                      dtoa@s 0035  
                    dtoa@w 0033                      tablat 000FF5                      ttemp5 005E  
                    ttemp6 0061                      ttemp7 0065                      status 000FD8  
                    wtemp8 005E            __end_of_sprintf 15EA           __end_of_Lcd_Init 1474  
         __end_of_Lcd_Port 1598            __initialization 166E               ?_interrupcao 0001  
             __end_of_main 109C               __end_of_dtoa 0B0E                     ??_main 0057  
                   ??_dtoa 0027              __activetblptr 000002                     ?_fputc 0002  
                   ?_fputs 000B                     _T08BIT 007EAE           ___awdiv@dividend 0002  
                   ?_putch 0001                     _INT0IE 007F94                     _INT0IF 007F91  
                   i2l1831 1318                     i2l1841 1354                     i2l1833 1336  
                   i2l1851 136C                     i2l1843 1358                     i2l1835 1338  
                   i2l1827 12EE                     i2l1853 137E                     i2l1845 135A  
                   i2l1837 134C                     i2l1829 12FC                     i2l1839 1350  
                   i2l1847 135C                     i2l1849 136A                     _OSCCON 000FD3  
                ??_Lcd_Cmd 0003                     _TMR0IE 007F95                     _TMR0IF 007F92  
                   _TMR0ON 007EAF    __size_of_Lcd_Write_Char 0038               vfprintf@cfmt 00B0  
                ??___aodiv 0012                  ??___aomod 0012                  ??___awdiv 0006  
                   _linha1 0060                     _linha2 00A0                     clear_0 168C  
         ___awdiv@quotient 0008                     isa$std 000001                     pad@buf 0014  
                   dtoa@fp 001D                     _strlen 16E4                     fputc@c 0002  
                   fputs@c 000F                     fputs@i 0010                     fputs@s 000B  
             __mediumconst 0000           __end_of_setupInt 1756                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8                     putch@c 0001  
         __end_of_vfprintf 153C                  ??_sprintf 0057            Lcd_Set_Cursor@a 0006  
          Lcd_Set_Cursor@b 0005            Lcd_Set_Cursor@y 0008            Lcd_Set_Cursor@z 0007  
               __accesstop 0060    __end_of__initialization 169E              ___rparam_used 000001  
           __pcstackCOMRAM 0001               __pidataBANK0 1756              __end_of_fputc 1166  
            __end_of_fputs 162E              __end_of_putch 175A             _Lcd_Set_Cursor 1474  
                ?_Lcd_Init 0001                  ?_Lcd_Port 0001                    ??_fputc 0006  
                  ??_fputs 000F                    ??_putch 0002                 __pbssBANK0 0060  
     __size_of_interrupcao 137C  __size_of_Lcd_Write_String 007E     __end_of_Lcd_Set_Cursor 14DA  
                  ?_strlen 0002                    _INTEDG0 007F8E         __size_of_setupTmr0 0012  
       __size_of_vfpfcnvrt 01B2                 ??_Lcd_Init 0005                 ??_Lcd_Port 0002  
           _Lcd_Write_Char 16AC                    _Lcd_Cmd 171A                    __Hparam 0000  
                  __Lparam 0000                    _Numero1 007E                    _Numero2 007C  
                ?_setupInt 0001                    ___aodiv 0CC0                    ___aomod 0E48  
                  ___awdiv 1166                  ?_vfprintf 0051               __psmallconst 0800  
                  __pcinit 166E                    __ramtop 0800            ?_Lcd_Set_Cursor 0005  
                  __ptext0 0FAC                    __ptext1 1598                    __ptext2 14DA  
                  __ptext3 0B0E                    __ptext4 0830                    __ptext5 122A  
                  __ptext6 16E4                    __ptext7 15EA                    __ptext8 109C  
                  __ptext9 1758            __size_of_strlen 0036               __size_of_abs 0040  
             __size_of_pad 00C2                    _periodo 0074                    _sprintf 1598  
   __end_of_Lcd_Write_Char 16E4             __pintcode_body 12EC       end_of_initialization 169E  
                  fputc@fp 0004              __Lmediumconst 0000                    int_func 12EC  
                  fputs@fp 000D          __end_of_setupTmr0 174C          __end_of_vfpfcnvrt 0CC0  
               ??_setupInt 0002                    postdec2 000FDD                    postinc0 000FEE  
                  postinc1 000FE6                    postinc2 000FDE                  Lcd_Port@a 0002  
               ??_vfprintf 0057                    strlen@a 0004                    strlen@s 0002  
          ?_Lcd_Write_Char 0001          Lcd_Write_String@a 0006          Lcd_Write_String@i 000A  
              vfpfcnvrt@ap 0045                vfpfcnvrt@fp 0041                vfpfcnvrt@ll 0049  
         _Lcd_Write_String 1384             __end_of_strlen 171A        start_initialization 166E  
              __end_of_abs 166E                __end_of_pad 12EC          __size_of_Lcd_Init 0072  
        __size_of_Lcd_Port 005C                vfprintf@fmt 0053                __pdataBANK0 00C0  
          Lcd_Write_Char@a 0005            Lcd_Write_Char@y 0004                   ??_strlen 0004  
              __pbssCOMRAM 0057              __pcstackBANK0 00B0           ___aodiv@dividend 0002  
                 ?_Lcd_Cmd 0001              ??_interrupcao 0001           ??_Lcd_Set_Cursor 0006  
                __pintcode 0008                   ?___aodiv 0002                   ?___aomod 0002  
                 ?___awdiv 0002           ___aodiv@quotient 0014          __size_of_setupInt 000A  
        __size_of_vfprintf 0062                __smallconst 0800                   ?_sprintf 00B2  
           __size_of_fputc 00CA             __size_of_fputs 0044             __size_of_putch 0002  
                 _LATDbits 000F8C           _periodo_anterior 0072                   i2u125_40 12FC  
                 i2u125_41 12F8                   i2u126_40 1318                   i2u126_41 1314  
                 i2u127_40 1336                   i2u127_41 1332                   i2u128_40 136A  
                 i2u128_41 1366                   Lcd_Cmd@a 0004                  _resultado 0078  
                _setupTmr0 173A                  _vfpfcnvrt 0B0E        __end_of_interrupcao 1384  
               _ADCON1bits 000FC1           ??_Lcd_Write_Char 0003                   _Lcd_Init 1402  
                 _Lcd_Port 153C   __end_of_Lcd_Write_String 1402           __size_of_Lcd_Cmd 0020  
                 __Hrparam 0000                 vfprintf@ap 0055                   __Lrparam 0000  
               vfprintf@fp 0051                 ?_setupTmr0 0001           __size_of___aodiv 0188  
         __size_of___aomod 0164           __size_of___awdiv 00C4                 ?_vfpfcnvrt 0041  
          ___aodiv@divisor 000A            ___aodiv@counter 0012                 sprintf@fmt 00B4  
                 _dtoa$708 002F                   __ptext10 162E                   __ptext11 0E48  
                 __ptext20 171A                   __ptext12 0CC0                   __ptext21 153C  
                 __ptext13 173A                   __ptext14 174C                   __ptext15 1166  
                 __ptext16 1384                   __ptext17 16AC                   __ptext18 1474  
                 __ptext19 1402           __size_of_sprintf 0052                   _controle 007A  
            __size_of_main 00F0              __size_of_dtoa 02DE                _interrupcao 0008  
                 isa$xinst 000000                   _setupInt 174C                   int$flags 005D  
                 _vfprintf 14DA           ___aomod@dividend 0002         Lcd_Write_Char@temp 0003  
                 intlevel2 0000                  sprintf@ap 00B8                ??_setupTmr0 0002  
          ___aomod@divisor 000A                ??_vfpfcnvrt 0047            ___aomod@counter 0012  
       Lcd_Set_Cursor@temp 0009                   sprintf@f 00BA                   sprintf@s 00B2  
             ___aodiv@sign 0013               ___aomod@sign 0013  
