

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Sun Jun 06 11:43:14 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    39                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    40                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    41                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    42  0000                     
    43                           ; Version 2.20
    44                           ; Generated 12/02/2020 GMT
    45                           ; 
    46                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC18F4550 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     
    78                           	psect	idataBANK0
    79  001640                     __pidataBANK0:
    80                           	callstack 0
    81                           
    82                           ;initializer for _cont
    83  001640  0001               	dw	1
    84  0000                     _ADCON1bits	set	4033
    85  0000                     _TRISE	set	3990
    86  0000                     _TRISB	set	3987
    87  0000                     _TRISD	set	3989
    88  0000                     _OSCCON	set	4051
    89  0000                     _PORTE	set	3972
    90  0000                     _LATDbits	set	3980
    91  0000                     _TMR0L	set	4054
    92  0000                     _TMR0H	set	4055
    93  0000                     _TMR0IE	set	32661
    94  0000                     _TMR0IF	set	32658
    95  0000                     _TMR0ON	set	32431
    96  0000                     _PSA	set	32427
    97  0000                     _T0CS	set	32429
    98  0000                     _T08BIT	set	32430
    99  0000                     _INTEDG0	set	32654
   100  0000                     _INT0IF	set	32657
   101  0000                     _INT0IE	set	32660
   102  0000                     _GIE	set	32663
   103  0000                     _LATD3	set	31843
   104  0000                     _LATD2	set	31842
   105  0000                     _LATD7	set	31847
   106  0000                     _LATD6	set	31846
   107  0000                     _LATD5	set	31845
   108  0000                     _LATD4	set	31844
   109                           
   110                           	psect	smallconst
   111  000800                     __psmallconst:
   112                           	callstack 0
   113  000800  00                 	db	0
   114  000801                     STR_1:
   115  000801  47                 	db	71	;'G'
   116  000802  65                 	db	101	;'e'
   117  000803  72                 	db	114	;'r'
   118  000804  61                 	db	97	;'a'
   119  000805  64                 	db	100	;'d'
   120  000806  6F                 	db	111	;'o'
   121  000807  72                 	db	114	;'r'
   122  000808  20                 	db	32
   123  000809  64                 	db	100	;'d'
   124  00080A  65                 	db	101	;'e'
   125  00080B  20                 	db	32
   126  00080C  53                 	db	83	;'S'
   127  00080D  69                 	db	105	;'i'
   128  00080E  6E                 	db	110	;'n'
   129  00080F  61                 	db	97	;'a'
   130  000810  6C                 	db	108	;'l'
   131  000811  00                 	db	0
   132  000812                     STR_2:
   133  000812  50                 	db	80	;'P'
   134  000813  65                 	db	101	;'e'
   135  000814  72                 	db	114	;'r'
   136  000815  69                 	db	105	;'i'
   137  000816  6F                 	db	111	;'o'
   138  000817  64                 	db	100	;'d'
   139  000818  6F                 	db	111	;'o'
   140  000819  3A                 	db	58	;':'
   141  00081A  20                 	db	32
   142  00081B  20                 	db	32
   143  00081C  25                 	db	37
   144  00081D  69                 	db	105	;'i'
   145  00081E  20                 	db	32
   146  00081F  6D                 	db	109	;'m'
   147  000820  73                 	db	115	;'s'
   148  000821  00                 	db	0
   149  000822  00                 	db	0	; dummy byte at the end
   150  0000                     
   151                           ; #config settings
   152                           
   153                           	psect	cinit
   154  0014AE                     __pcinit:
   155                           	callstack 0
   156  0014AE                     start_initialization:
   157                           	callstack 0
   158  0014AE                     __initialization:
   159                           	callstack 0
   160                           
   161                           ; Initialize objects allocated to BANK0 (2 bytes)
   162                           ; load TBLPTR registers with __pidataBANK0
   163  0014AE  0E40               	movlw	low __pidataBANK0
   164  0014B0  6EF6               	movwf	tblptrl,c
   165  0014B2  0E16               	movlw	high __pidataBANK0
   166  0014B4  6EF7               	movwf	tblptrh,c
   167  0014B6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   168  0014B8  6EF8               	movwf	tblptru,c
   169  0014BA  0009               	tblrd		*+	;fetch initializer
   170  0014BC  CFF5 F0C0          	movff	tablat,__pdataBANK0
   171  0014C0  0009               	tblrd		*+	;fetch initializer
   172  0014C2  CFF5 F0C1          	movff	tablat,__pdataBANK0+1
   173                           
   174                           ; Clear objects allocated to BANK0 (80 bytes)
   175  0014C6  EE00  F060         	lfsr	0,__pbssBANK0
   176  0014CA  0E50               	movlw	80
   177  0014CC                     clear_0:
   178  0014CC  6AEE               	clrf	postinc0,c
   179  0014CE  06E8               	decf	wreg,f,c
   180  0014D0  E1FD               	bnz	clear_0
   181                           
   182                           ; Clear objects allocated to COMRAM (6 bytes)
   183  0014D2  6A5C               	clrf	(__pbssCOMRAM+5)& (0+255),c
   184  0014D4  6A5B               	clrf	(__pbssCOMRAM+4)& (0+255),c
   185  0014D6  6A5A               	clrf	(__pbssCOMRAM+3)& (0+255),c
   186  0014D8  6A59               	clrf	(__pbssCOMRAM+2)& (0+255),c
   187  0014DA  6A58               	clrf	(__pbssCOMRAM+1)& (0+255),c
   188  0014DC  6A57               	clrf	__pbssCOMRAM& (0+255),c
   189  0014DE                     end_of_initialization:
   190                           	callstack 0
   191  0014DE                     __end_of__initialization:
   192                           	callstack 0
   193  0014DE  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   194  0014E0  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   195  0014E2  0E00               	movlw	low (__Lsmallconst shr (0+16))
   196  0014E4  6EF8               	movwf	tblptru,c
   197  0014E6  0E08               	movlw	high __Lsmallconst
   198  0014E8  6EF7               	movwf	tblptrh,c
   199  0014EA  0100               	movlb	0
   200  0014EC  EF97  F008         	goto	_main	;jump to C main() function
   201                           
   202                           	psect	bssCOMRAM
   203  000057                     __pbssCOMRAM:
   204                           	callstack 0
   205  000057                     _prec:
   206                           	callstack 0
   207  000057                     	ds	2
   208  000059                     _flags:
   209                           	callstack 0
   210  000059                     	ds	2
   211  00005B                     _tecla:
   212                           	callstack 0
   213  00005B                     	ds	2
   214                           
   215                           	psect	bssBANK0
   216  000060                     __pbssBANK0:
   217                           	callstack 0
   218  000060                     _nout:
   219                           	callstack 0
   220  000060                     	ds	2
   221  000062                     _width:
   222                           	callstack 0
   223  000062                     	ds	2
   224  000064                     _periodo_anterior:
   225                           	callstack 0
   226  000064                     	ds	2
   227  000066                     _periodo:
   228                           	callstack 0
   229  000066                     	ds	2
   230  000068                     _resultado:
   231                           	callstack 0
   232  000068                     	ds	2
   233  00006A                     _controle:
   234                           	callstack 0
   235  00006A                     	ds	2
   236  00006C                     _Numero2:
   237                           	callstack 0
   238  00006C                     	ds	2
   239  00006E                     _Numero1:
   240                           	callstack 0
   241  00006E                     	ds	2
   242  000070                     _dbuf:
   243                           	callstack 0
   244  000070                     	ds	32
   245  000090                     _linha2:
   246                           	callstack 0
   247  000090                     	ds	16
   248  0000A0                     _linha1:
   249                           	callstack 0
   250  0000A0                     	ds	16
   251                           
   252                           	psect	dataBANK0
   253  0000C0                     __pdataBANK0:
   254                           	callstack 0
   255  0000C0                     _cont:
   256                           	callstack 0
   257  0000C0                     	ds	2
   258                           
   259                           	psect	cstackBANK0
   260  0000B0                     __pcstackBANK0:
   261                           	callstack 0
   262  0000B0                     vfprintf@cfmt:
   263                           	callstack 0
   264                           
   265                           ; 2 bytes @ 0x0
   266  0000B0                     	ds	2
   267  0000B2                     ?_sprintf:
   268                           	callstack 0
   269  0000B2                     sprintf@s:
   270                           	callstack 0
   271                           
   272                           ; 2 bytes @ 0x2
   273  0000B2                     	ds	2
   274  0000B4                     sprintf@fmt:
   275                           	callstack 0
   276                           
   277                           ; 2 bytes @ 0x4
   278  0000B4                     	ds	4
   279  0000B8                     sprintf@ap:
   280                           	callstack 0
   281                           
   282                           ; 2 bytes @ 0x8
   283  0000B8                     	ds	2
   284  0000BA                     sprintf@f:
   285                           	callstack 0
   286                           
   287                           ; 6 bytes @ 0xA
   288  0000BA                     	ds	6
   289                           
   290                           	psect	cstackCOMRAM
   291  000001                     __pcstackCOMRAM:
   292                           	callstack 0
   293  000001                     ??_interrupcao:
   294  000001                     
   295                           ; 1 bytes @ 0x0
   296  000001                     	ds	1
   297  000002                     ?_strlen:
   298                           	callstack 0
   299  000002                     ?___wmul:
   300                           	callstack 0
   301  000002                     ?___aodiv:
   302                           	callstack 0
   303  000002                     ?___aomod:
   304                           	callstack 0
   305  000002                     Lcd_Port@a:
   306                           	callstack 0
   307  000002                     ___wmul@multiplier:
   308                           	callstack 0
   309  000002                     fputc@c:
   310                           	callstack 0
   311  000002                     strlen@s:
   312                           	callstack 0
   313  000002                     ___aodiv@dividend:
   314                           	callstack 0
   315  000002                     ___aomod@dividend:
   316                           	callstack 0
   317                           
   318                           ; 8 bytes @ 0x1
   319  000002                     	ds	1
   320  000003                     ??_Lcd_Cmd:
   321  000003                     Lcd_Write_Char@temp:
   322                           	callstack 0
   323                           
   324                           ; 1 bytes @ 0x2
   325  000003                     	ds	1
   326  000004                     Lcd_Cmd@a:
   327                           	callstack 0
   328  000004                     Lcd_Write_Char@y:
   329                           	callstack 0
   330  000004                     ___wmul@multiplicand:
   331                           	callstack 0
   332  000004                     fputc@fp:
   333                           	callstack 0
   334  000004                     strlen@a:
   335                           	callstack 0
   336                           
   337                           ; 2 bytes @ 0x3
   338  000004                     	ds	1
   339  000005                     ??_Lcd_Init:
   340  000005                     Lcd_Set_Cursor@b:
   341                           	callstack 0
   342  000005                     Lcd_Write_Char@a:
   343                           	callstack 0
   344                           
   345                           ; 1 bytes @ 0x4
   346  000005                     	ds	1
   347  000006                     ??_fputc:
   348  000006                     Lcd_Set_Cursor@a:
   349                           	callstack 0
   350  000006                     Lcd_Write_String@a:
   351                           	callstack 0
   352  000006                     ___wmul@product:
   353                           	callstack 0
   354                           
   355                           ; 2 bytes @ 0x5
   356  000006                     	ds	1
   357  000007                     Lcd_Set_Cursor@z:
   358                           	callstack 0
   359                           
   360                           ; 1 bytes @ 0x6
   361  000007                     	ds	1
   362  000008                     Lcd_Set_Cursor@y:
   363                           	callstack 0
   364  000008                     Lcd_Write_String@i:
   365                           	callstack 0
   366                           
   367                           ; 2 bytes @ 0x7
   368  000008                     	ds	1
   369  000009                     Lcd_Set_Cursor@temp:
   370                           	callstack 0
   371                           
   372                           ; 1 bytes @ 0x8
   373  000009                     	ds	1
   374  00000A                     ___aodiv@divisor:
   375                           	callstack 0
   376  00000A                     ___aomod@divisor:
   377                           	callstack 0
   378                           
   379                           ; 8 bytes @ 0x9
   380  00000A                     	ds	1
   381  00000B                     fputs@s:
   382                           	callstack 0
   383                           
   384                           ; 2 bytes @ 0xA
   385  00000B                     	ds	2
   386  00000D                     fputs@fp:
   387                           	callstack 0
   388                           
   389                           ; 2 bytes @ 0xC
   390  00000D                     	ds	2
   391  00000F                     fputs@c:
   392                           	callstack 0
   393                           
   394                           ; 1 bytes @ 0xE
   395  00000F                     	ds	1
   396  000010                     fputs@i:
   397                           	callstack 0
   398                           
   399                           ; 2 bytes @ 0xF
   400  000010                     	ds	2
   401  000012                     ?_pad:
   402                           	callstack 0
   403  000012                     ___aodiv@counter:
   404                           	callstack 0
   405  000012                     ___aomod@counter:
   406                           	callstack 0
   407  000012                     pad@fp:
   408                           	callstack 0
   409                           
   410                           ; 2 bytes @ 0x11
   411  000012                     	ds	1
   412  000013                     ___aodiv@sign:
   413                           	callstack 0
   414  000013                     ___aomod@sign:
   415                           	callstack 0
   416                           
   417                           ; 1 bytes @ 0x12
   418  000013                     	ds	1
   419  000014                     ?_abs:
   420                           	callstack 0
   421  000014                     pad@buf:
   422                           	callstack 0
   423  000014                     abs@a:
   424                           	callstack 0
   425  000014                     ___aodiv@quotient:
   426                           	callstack 0
   427                           
   428                           ; 8 bytes @ 0x13
   429  000014                     	ds	2
   430  000016                     ??_abs:
   431  000016                     pad@p:
   432                           	callstack 0
   433                           
   434                           ; 2 bytes @ 0x15
   435  000016                     	ds	2
   436  000018                     ??_pad:
   437                           
   438                           ; 1 bytes @ 0x17
   439  000018                     	ds	1
   440  000019                     pad@i:
   441                           	callstack 0
   442                           
   443                           ; 2 bytes @ 0x18
   444  000019                     	ds	2
   445  00001B                     pad@w:
   446                           	callstack 0
   447                           
   448                           ; 2 bytes @ 0x1A
   449  00001B                     	ds	2
   450  00001D                     ?_dtoa:
   451                           	callstack 0
   452  00001D                     dtoa@fp:
   453                           	callstack 0
   454                           
   455                           ; 2 bytes @ 0x1C
   456  00001D                     	ds	2
   457  00001F                     dtoa@d:
   458                           	callstack 0
   459                           
   460                           ; 8 bytes @ 0x1E
   461  00001F                     	ds	8
   462  000027                     ??_dtoa:
   463                           
   464                           ; 1 bytes @ 0x26
   465  000027                     	ds	8
   466  00002F                     _dtoa$707:
   467                           	callstack 0
   468                           
   469                           ; 2 bytes @ 0x2E
   470  00002F                     	ds	2
   471  000031                     dtoa@p:
   472                           	callstack 0
   473                           
   474                           ; 2 bytes @ 0x30
   475  000031                     	ds	2
   476  000033                     dtoa@w:
   477                           	callstack 0
   478                           
   479                           ; 2 bytes @ 0x32
   480  000033                     	ds	2
   481  000035                     dtoa@s:
   482                           	callstack 0
   483                           
   484                           ; 2 bytes @ 0x34
   485  000035                     	ds	2
   486  000037                     dtoa@n:
   487                           	callstack 0
   488                           
   489                           ; 8 bytes @ 0x36
   490  000037                     	ds	8
   491  00003F                     dtoa@i:
   492                           	callstack 0
   493                           
   494                           ; 2 bytes @ 0x3E
   495  00003F                     	ds	2
   496  000041                     ?_vfpfcnvrt:
   497                           	callstack 0
   498  000041                     vfpfcnvrt@fp:
   499                           	callstack 0
   500                           
   501                           ; 2 bytes @ 0x40
   502  000041                     	ds	2
   503  000043                     vfpfcnvrt@fmt:
   504                           	callstack 0
   505                           
   506                           ; 2 bytes @ 0x42
   507  000043                     	ds	2
   508  000045                     vfpfcnvrt@ap:
   509                           	callstack 0
   510                           
   511                           ; 2 bytes @ 0x44
   512  000045                     	ds	2
   513  000047                     ??_vfpfcnvrt:
   514                           
   515                           ; 1 bytes @ 0x46
   516  000047                     	ds	2
   517  000049                     vfpfcnvrt@ll:
   518                           	callstack 0
   519                           
   520                           ; 8 bytes @ 0x48
   521  000049                     	ds	8
   522  000051                     ?_vfprintf:
   523                           	callstack 0
   524  000051                     vfprintf@fp:
   525                           	callstack 0
   526                           
   527                           ; 2 bytes @ 0x50
   528  000051                     	ds	2
   529  000053                     vfprintf@fmt:
   530                           	callstack 0
   531                           
   532                           ; 2 bytes @ 0x52
   533  000053                     	ds	2
   534  000055                     vfprintf@ap:
   535                           	callstack 0
   536                           
   537                           ; 2 bytes @ 0x54
   538  000055                     	ds	2
   539  000057                     
   540                           ; 1 bytes @ 0x56
   541 ;;
   542 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   543 ;;
   544 ;; *************** function _main *****************
   545 ;; Defined at:
   546 ;;		line 77 in file "main.c"
   547 ;; Parameters:    Size  Location     Type
   548 ;;		None
   549 ;; Auto vars:     Size  Location     Type
   550 ;;		None
   551 ;; Return value:  Size  Location     Type
   552 ;;                  1    wreg      void 
   553 ;; Registers used:
   554 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   555 ;; Tracked objects:
   556 ;;		On entry : 0/0
   557 ;;		On exit  : 0/0
   558 ;;		Unchanged: 0/0
   559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   560 ;;      Params:         0       0       0       0       0       0       0       0       0
   561 ;;      Locals:         0       0       0       0       0       0       0       0       0
   562 ;;      Temps:          0       0       0       0       0       0       0       0       0
   563 ;;      Totals:         0       0       0       0       0       0       0       0       0
   564 ;;Total ram usage:        0 bytes
   565 ;; Hardware stack levels required when called: 9
   566 ;; This function calls:
   567 ;;		_Lcd_Init
   568 ;;		_Lcd_Set_Cursor
   569 ;;		_Lcd_Write_String
   570 ;;		___wmul
   571 ;;		_setupInt
   572 ;;		_setupTmr0
   573 ;;		_sprintf
   574 ;; This function is called by:
   575 ;;		Startup code after reset
   576 ;; This function uses a non-reentrant model
   577 ;;
   578                           
   579                           	psect	text0
   580  00112E                     __ptext0:
   581                           	callstack 0
   582  00112E                     _main:
   583                           	callstack 22
   584  00112E                     
   585                           ;main.c: 78:   OSCCON = 0b01100000;
   586  00112E  0E60               	movlw	96
   587  001130  6ED3               	movwf	211,c	;volatile
   588                           
   589                           ;main.c: 79:   TRISD = 0;
   590  001132  0E00               	movlw	0
   591  001134  6E95               	movwf	149,c	;volatile
   592                           
   593                           ;main.c: 80:   TRISB = 0x03;
   594  001136  0E03               	movlw	3
   595  001138  6E93               	movwf	147,c	;volatile
   596                           
   597                           ;main.c: 81:   TRISE = 0x07;
   598  00113A  0E07               	movlw	7
   599  00113C  6E96               	movwf	150,c	;volatile
   600                           
   601                           ;main.c: 82:   ADCON1bits.PCFG = 0b1010;
   602  00113E  50C1               	movf	193,w,c	;volatile
   603  001140  0BF0               	andlw	-16
   604  001142  090A               	iorlw	10
   605  001144  6EC1               	movwf	193,c	;volatile
   606  001146                     
   607                           ;main.c: 84:   Lcd_Init();
   608  001146  EC41  F009         	call	_Lcd_Init	;wreg free
   609  00114A                     
   610                           ;main.c: 85:   setupTmr0();
   611  00114A  EC12  F00B         	call	_setupTmr0	;wreg free
   612  00114E                     
   613                           ;main.c: 87:   sprintf(linha1, "Gerador de Sinal");
   614  00114E  0EA0               	movlw	low _linha1
   615  001150  0100               	movlb	0	; () banked
   616  001152  6FB2               	movwf	sprintf@s& (0+255),b
   617  001154  0E00               	movlw	high _linha1
   618  001156  6FB3               	movwf	(sprintf@s+1)& (0+255),b
   619  001158  0E01               	movlw	low STR_1
   620  00115A  6FB4               	movwf	sprintf@fmt& (0+255),b
   621  00115C  0E08               	movlw	high STR_1
   622  00115E  6FB5               	movwf	(sprintf@fmt+1)& (0+255),b
   623  001160  EC0C  F00A         	call	_sprintf	;wreg free
   624  001164                     
   625                           ;main.c: 88:   Lcd_Set_Cursor(1, 1);
   626  001164  0E01               	movlw	1
   627  001166  6E05               	movwf	Lcd_Set_Cursor@b^0,c
   628  001168  0E01               	movlw	1
   629  00116A  EC7A  F009         	call	_Lcd_Set_Cursor
   630  00116E                     
   631                           ;main.c: 89:   Lcd_Write_String(linha1);
   632  00116E  0EA0               	movlw	low _linha1
   633  001170  6E06               	movwf	Lcd_Write_String@a^0,c
   634  001172  0E00               	movlw	high _linha1
   635  001174  6E07               	movwf	(Lcd_Write_String@a+1)^0,c
   636  001176  EC98  F00A         	call	_Lcd_Write_String	;wreg free
   637  00117A                     
   638                           ;main.c: 90:   setupInt();
   639  00117A  EC1B  F00B         	call	_setupInt	;wreg free
   640  00117E                     l2066:
   641                           
   642                           ;main.c: 93:     if (periodo_anterior != periodo) {
   643  00117E  0100               	movlb	0	; () banked
   644  001180  5166               	movf	_periodo& (0+255),w,b
   645  001182  1964               	xorwf	_periodo_anterior& (0+255),w,b
   646  001184  E109               	bnz	u1590
   647  001186  5167               	movf	(_periodo+1)& (0+255),w,b
   648  001188  1965               	xorwf	(_periodo_anterior+1)& (0+255),w,b
   649  00118A  B4D8               	btfsc	status,2,c
   650  00118C  EFCA  F008         	goto	u1591
   651  001190  EFCC  F008         	goto	u1590
   652  001194                     u1591:
   653  001194  EFBF  F008         	goto	l2066
   654  001198                     u1590:
   655  001198                     
   656                           ; BSR set to: 0
   657                           ;main.c: 94:       sprintf(linha2, "Periodo:  %i ms", (periodo * 100));
   658  001198  0E90               	movlw	low _linha2
   659  00119A  6FB2               	movwf	sprintf@s& (0+255),b
   660  00119C  0E00               	movlw	high _linha2
   661  00119E  6FB3               	movwf	(sprintf@s+1)& (0+255),b
   662  0011A0  0E12               	movlw	low STR_2
   663  0011A2  6FB4               	movwf	sprintf@fmt& (0+255),b
   664  0011A4  0E08               	movlw	high STR_2
   665  0011A6  6FB5               	movwf	(sprintf@fmt+1)& (0+255),b
   666  0011A8  C066  F002         	movff	_periodo,___wmul@multiplier
   667  0011AC  C067  F003         	movff	_periodo+1,___wmul@multiplier+1
   668  0011B0  0E00               	movlw	0
   669  0011B2  6E05               	movwf	(___wmul@multiplicand+1)^0,c
   670  0011B4  0E64               	movlw	100
   671  0011B6  6E04               	movwf	___wmul@multiplicand^0,c
   672  0011B8  ECEF  F00A         	call	___wmul	;wreg free
   673  0011BC  C002  F0B6         	movff	?___wmul,?_sprintf+4
   674  0011C0  C003  F0B7         	movff	?___wmul+1,?_sprintf+5
   675  0011C4  EC0C  F00A         	call	_sprintf	;wreg free
   676  0011C8                     
   677                           ;main.c: 95:       Lcd_Set_Cursor(2, 1);
   678  0011C8  0E01               	movlw	1
   679  0011CA  6E05               	movwf	Lcd_Set_Cursor@b^0,c
   680  0011CC  0E02               	movlw	2
   681  0011CE  EC7A  F009         	call	_Lcd_Set_Cursor
   682  0011D2                     
   683                           ;main.c: 96:       Lcd_Write_String(linha2);
   684  0011D2  0E90               	movlw	low _linha2
   685  0011D4  6E06               	movwf	Lcd_Write_String@a^0,c
   686  0011D6  0E00               	movlw	high _linha2
   687  0011D8  6E07               	movwf	(Lcd_Write_String@a+1)^0,c
   688  0011DA  EC98  F00A         	call	_Lcd_Write_String	;wreg free
   689  0011DE                     
   690                           ;main.c: 97:       periodo_anterior = periodo;
   691  0011DE  C066  F064         	movff	_periodo,_periodo_anterior
   692  0011E2  C067  F065         	movff	_periodo+1,_periodo_anterior+1
   693  0011E6  EFBF  F008         	goto	l2066
   694  0011EA  EF07  F000         	goto	start
   695  0011EE                     __end_of_main:
   696                           	callstack 0
   697                           
   698 ;; *************** function _sprintf *****************
   699 ;; Defined at:
   700 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_sprintf.c"
   701 ;; Parameters:    Size  Location     Type
   702 ;;  s               2    2[BANK0 ] PTR unsigned char 
   703 ;;		 -> linha2(16), linha1(16), 
   704 ;;  fmt             2    4[BANK0 ] PTR const unsigned char 
   705 ;;		 -> STR_2(16), STR_1(17), 
   706 ;; Auto vars:     Size  Location     Type
   707 ;;  f               6   10[BANK0 ] struct _IO_FILE
   708 ;;  ap              2    8[BANK0 ] PTR void [1]
   709 ;;		 -> ?_sprintf(2), 
   710 ;;  ret             2    0        int 
   711 ;; Return value:  Size  Location     Type
   712 ;;                  2    2[BANK0 ] int 
   713 ;; Registers used:
   714 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   715 ;; Tracked objects:
   716 ;;		On entry : 0/0
   717 ;;		On exit  : 0/0
   718 ;;		Unchanged: 0/0
   719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   720 ;;      Params:         0       6       0       0       0       0       0       0       0
   721 ;;      Locals:         0       8       0       0       0       0       0       0       0
   722 ;;      Temps:          0       0       0       0       0       0       0       0       0
   723 ;;      Totals:         0      14       0       0       0       0       0       0       0
   724 ;;Total ram usage:       14 bytes
   725 ;; Hardware stack levels used: 1
   726 ;; Hardware stack levels required when called: 8
   727 ;; This function calls:
   728 ;;		_vfprintf
   729 ;; This function is called by:
   730 ;;		_main
   731 ;; This function uses a non-reentrant model
   732 ;;
   733                           
   734                           	psect	text1
   735  001418                     __ptext1:
   736                           	callstack 0
   737  001418                     _sprintf:
   738                           	callstack 22
   739  001418  0EB6               	movlw	low (?_sprintf+4)
   740  00141A  0100               	movlb	0	; () banked
   741  00141C  6FB8               	movwf	sprintf@ap& (0+255),b
   742  00141E  0E00               	movlw	high (?_sprintf+4)
   743  001420  6FB9               	movwf	(sprintf@ap+1)& (0+255),b
   744  001422  C0B2  F0BA         	movff	sprintf@s,sprintf@f
   745  001426  C0B3  F0BB         	movff	sprintf@s+1,sprintf@f+1
   746  00142A                     
   747                           ; BSR set to: 0
   748  00142A  0E00               	movlw	0
   749  00142C  6FBD               	movwf	(sprintf@f+3)& (0+255),b
   750  00142E  0E00               	movlw	0
   751  001430  6FBC               	movwf	(sprintf@f+2)& (0+255),b
   752  001432                     
   753                           ; BSR set to: 0
   754  001432  0E00               	movlw	0
   755  001434  6FBF               	movwf	(sprintf@f+5)& (0+255),b
   756  001436  0E00               	movlw	0
   757  001438  6FBE               	movwf	(sprintf@f+4)& (0+255),b
   758  00143A                     
   759                           ; BSR set to: 0
   760  00143A  0EBA               	movlw	low sprintf@f
   761  00143C  6E51               	movwf	vfprintf@fp^0,c
   762  00143E  0E00               	movlw	high sprintf@f
   763  001440  6E52               	movwf	(vfprintf@fp+1)^0,c
   764  001442  C0B4  F053         	movff	sprintf@fmt,vfprintf@fmt
   765  001446  C0B5  F054         	movff	sprintf@fmt+1,vfprintf@fmt+1
   766  00144A  0EB8               	movlw	low sprintf@ap
   767  00144C  6E55               	movwf	vfprintf@ap^0,c
   768  00144E  0E00               	movlw	high sprintf@ap
   769  001450  6E56               	movwf	(vfprintf@ap+1)^0,c
   770  001452  ECAD  F009         	call	_vfprintf	;wreg free
   771  001456  0100               	movlb	0	; () banked
   772  001458  51BC               	movf	(sprintf@f+2)& (0+255),w,b
   773  00145A  25B2               	addwf	sprintf@s& (0+255),w,b
   774  00145C  6ED9               	movwf	fsr2l,c
   775  00145E  51BD               	movf	(sprintf@f+3)& (0+255),w,b
   776  001460  21B3               	addwfc	(sprintf@s+1)& (0+255),w,b
   777  001462  6EDA               	movwf	fsr2h,c
   778  001464  0E00               	movlw	0
   779  001466  6EDF               	movwf	indf2,c
   780  001468                     
   781                           ; BSR set to: 0
   782  001468  0012               	return		;funcret
   783  00146A                     __end_of_sprintf:
   784                           	callstack 0
   785                           
   786 ;; *************** function _vfprintf *****************
   787 ;; Defined at:
   788 ;;		line 1390 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
   789 ;; Parameters:    Size  Location     Type
   790 ;;  fp              2   80[COMRAM] PTR struct _IO_FILE
   791 ;;		 -> sprintf@f(6), 
   792 ;;  fmt             2   82[COMRAM] PTR const unsigned char 
   793 ;;		 -> STR_2(16), STR_1(17), 
   794 ;;  ap              2   84[COMRAM] PTR PTR void 
   795 ;;		 -> sprintf@ap(2), 
   796 ;; Auto vars:     Size  Location     Type
   797 ;;  cfmt            2    0[BANK0 ] PTR unsigned char 
   798 ;;		 -> STR_2(16), STR_1(17), 
   799 ;; Return value:  Size  Location     Type
   800 ;;                  2   80[COMRAM] int 
   801 ;; Registers used:
   802 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   803 ;; Tracked objects:
   804 ;;		On entry : 0/0
   805 ;;		On exit  : 0/0
   806 ;;		Unchanged: 0/0
   807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   808 ;;      Params:         6       0       0       0       0       0       0       0       0
   809 ;;      Locals:         0       2       0       0       0       0       0       0       0
   810 ;;      Temps:          0       0       0       0       0       0       0       0       0
   811 ;;      Totals:         6       2       0       0       0       0       0       0       0
   812 ;;Total ram usage:        8 bytes
   813 ;; Hardware stack levels used: 1
   814 ;; Hardware stack levels required when called: 7
   815 ;; This function calls:
   816 ;;		_vfpfcnvrt
   817 ;; This function is called by:
   818 ;;		_sprintf
   819 ;; This function uses a non-reentrant model
   820 ;;
   821                           
   822                           	psect	text2
   823  00135A                     __ptext2:
   824                           	callstack 0
   825  00135A                     _vfprintf:
   826                           	callstack 22
   827  00135A                     
   828                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1390: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.32\pic\source
      +                          s\c99\common\doprnt.c: 1391: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\comm
      +                          on\doprnt.c: 1393:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\
      +                          common\doprnt.c: 1395:     cfmt = (char *)fmt;
   829  00135A  C053  F0B0         	movff	vfprintf@fmt,vfprintf@cfmt
   830  00135E  C054  F0B1         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   831  001362                     
   832                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1396:     nout = 
      +                          0;
   833  001362  0E00               	movlw	0
   834  001364  0100               	movlb	0	; () banked
   835  001366  6F61               	movwf	(_nout+1)& (0+255),b
   836  001368  0E00               	movlw	0
   837  00136A  6F60               	movwf	_nout& (0+255),b
   838                           
   839                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
   840  00136C  EFCB  F009         	goto	l2038
   841  001370                     l2036:
   842                           
   843                           ; BSR set to: 0
   844                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1398:         nou
      +                          t += vfpfcnvrt(fp, &cfmt, ap);
   845  001370  C051  F041         	movff	vfprintf@fp,vfpfcnvrt@fp
   846  001374  C052  F042         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   847  001378  0EB0               	movlw	low vfprintf@cfmt
   848  00137A  6E43               	movwf	vfpfcnvrt@fmt^0,c
   849  00137C  0E00               	movlw	high vfprintf@cfmt
   850  00137E  6E44               	movwf	(vfpfcnvrt@fmt+1)^0,c
   851  001380  C055  F045         	movff	vfprintf@ap,vfpfcnvrt@ap
   852  001384  C056  F046         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   853  001388  EC81  F005         	call	_vfpfcnvrt	;wreg free
   854  00138C  5041               	movf	?_vfpfcnvrt^0,w,c
   855  00138E  0100               	movlb	0	; () banked
   856  001390  2760               	addwf	_nout& (0+255),f,b
   857  001392  5042               	movf	(?_vfpfcnvrt+1)^0,w,c
   858  001394  2361               	addwfc	(_nout+1)& (0+255),f,b
   859  001396                     l2038:
   860                           
   861                           ; BSR set to: 0
   862                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
   863  001396  C0B0  FFF6         	movff	vfprintf@cfmt,tblptrl
   864  00139A  C0B1  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   865  00139E                     	if	0	;tblptru may be non-zero
   866  00139E                     	endif
   867  00139E                     	if	0	;tblptru may be non-zero
   868  00139E                     	endif
   869  00139E  0008               	tblrd		*
   870  0013A0  50F5               	movf	tablat,w,c
   871  0013A2  0900               	iorlw	0
   872  0013A4  A4D8               	btfss	status,2,c
   873  0013A6  EFD7  F009         	goto	u1581
   874  0013AA  EFD9  F009         	goto	u1580
   875  0013AE                     u1581:
   876  0013AE  EFB8  F009         	goto	l2036
   877  0013B2                     u1580:
   878  0013B2                     
   879                           ; BSR set to: 0
   880                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1400:     return 
      +                          nout;
   881  0013B2  C060  F051         	movff	_nout,?_vfprintf
   882  0013B6  C061  F052         	movff	_nout+1,?_vfprintf+1
   883  0013BA                     
   884                           ; BSR set to: 0
   885  0013BA  0012               	return		;funcret
   886  0013BC                     __end_of_vfprintf:
   887                           	callstack 0
   888                           
   889 ;; *************** function _vfpfcnvrt *****************
   890 ;; Defined at:
   891 ;;		line 692 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
   892 ;; Parameters:    Size  Location     Type
   893 ;;  fp              2   64[COMRAM] PTR struct _IO_FILE
   894 ;;		 -> sprintf@f(6), 
   895 ;;  fmt             2   66[COMRAM] PTR PTR unsigned char 
   896 ;;		 -> vfprintf@cfmt(2), 
   897 ;;  ap              2   68[COMRAM] PTR PTR void 
   898 ;;		 -> sprintf@ap(2), 
   899 ;; Auto vars:     Size  Location     Type
   900 ;;  ll              8   72[COMRAM] long long 
   901 ;;  llu             8    0        unsigned long long 
   902 ;;  f               4    0        unsigned long long 
   903 ;;  vp              3    0        PTR void 
   904 ;;  ct              3    0        unsigned char [3]
   905 ;;  cp              3    0        PTR unsigned char 
   906 ;;  i               2    0        int 
   907 ;;  done            2    0        int 
   908 ;;  c               1    0        unsigned char 
   909 ;; Return value:  Size  Location     Type
   910 ;;                  2   64[COMRAM] int 
   911 ;; Registers used:
   912 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   913 ;; Tracked objects:
   914 ;;		On entry : 0/0
   915 ;;		On exit  : 0/0
   916 ;;		Unchanged: 0/0
   917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   918 ;;      Params:         6       0       0       0       0       0       0       0       0
   919 ;;      Locals:         8       0       0       0       0       0       0       0       0
   920 ;;      Temps:          2       0       0       0       0       0       0       0       0
   921 ;;      Totals:        16       0       0       0       0       0       0       0       0
   922 ;;Total ram usage:       16 bytes
   923 ;; Hardware stack levels used: 1
   924 ;; Hardware stack levels required when called: 6
   925 ;; This function calls:
   926 ;;		_dtoa
   927 ;;		_fputc
   928 ;; This function is called by:
   929 ;;		_vfprintf
   930 ;; This function uses a non-reentrant model
   931 ;;
   932                           
   933                           	psect	text3
   934  000B02                     __ptext3:
   935                           	callstack 0
   936  000B02                     _vfpfcnvrt:
   937                           	callstack 22
   938  000B02                     
   939                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 692: static int v
      +                          fpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.32\pic\sou
      +                          rces\c99\common\doprnt.c: 693: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\co
      +                          mmon\doprnt.c: 694:     char c, *cp, ct[3];;C:\Program Files\Microchip\xc8\v2.32\pic\sou
      +                          rces\c99\common\doprnt.c: 695:     int done, i;;C:\Program Files\Microchip\xc8\v2.32\pic
      +                          \sources\c99\common\doprnt.c: 696:     long long ll;;C:\Program Files\Microchip\xc8\v2.3
      +                          2\pic\sources\c99\common\doprnt.c: 697:     unsigned long long llu;
   940  000B02  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   941  000B06  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   942  000B0A  CFDE FFF6          	movff	postinc2,tblptrl
   943  000B0E  CFDD FFF7          	movff	postdec2,tblptrh
   944  000B12                     	if	0	;tblptru may be non-zero
   945  000B12                     	endif
   946  000B12                     	if	0	;tblptru may be non-zero
   947  000B12                     	endif
   948  000B12  0008               	tblrd		*
   949  000B14  50F5               	movf	tablat,w,c
   950  000B16  0A25               	xorlw	37
   951  000B18  A4D8               	btfss	status,2,c
   952  000B1A  EF91  F005         	goto	u1541
   953  000B1E  EF93  F005         	goto	u1540
   954  000B22                     u1541:
   955  000B22  EF3F  F006         	goto	l2024
   956  000B26                     u1540:
   957  000B26                     
   958                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 703:         ++*f
      +                          mt;
   959  000B26  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   960  000B2A  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   961  000B2E  2ADE               	incf	postinc2,f,c
   962  000B30  0E00               	movlw	0
   963  000B32  22DD               	addwfc	postdec2,f,c
   964  000B34                     
   965                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 705:         flag
      +                          s = width = 0;
   966  000B34  0E00               	movlw	0
   967  000B36  0100               	movlb	0	; () banked
   968  000B38  6F63               	movwf	(_width+1)& (0+255),b
   969  000B3A  0E00               	movlw	0
   970  000B3C  6F62               	movwf	_width& (0+255),b
   971  000B3E  C062  F059         	movff	_width,_flags
   972  000B42  C063  F05A         	movff	_width+1,_flags+1
   973  000B46                     
   974                           ; BSR set to: 0
   975                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 706:         prec
      +                           = -1;
   976  000B46  6857               	setf	_prec^0,c
   977  000B48  6858               	setf	(_prec+1)^0,c
   978  000B4A                     
   979                           ; BSR set to: 0
   980                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 847:         if (
      +                          (*fmt[0] == 'd') || (*fmt[0] == 'i')) {
   981  000B4A  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   982  000B4E  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   983  000B52  CFDE FFF6          	movff	postinc2,tblptrl
   984  000B56  CFDD FFF7          	movff	postdec2,tblptrh
   985  000B5A                     	if	0	;tblptru may be non-zero
   986  000B5A                     	endif
   987  000B5A                     	if	0	;tblptru may be non-zero
   988  000B5A                     	endif
   989  000B5A  0008               	tblrd		*
   990  000B5C  50F5               	movf	tablat,w,c
   991  000B5E  0A64               	xorlw	100
   992  000B60  B4D8               	btfsc	status,2,c
   993  000B62  EFB5  F005         	goto	u1551
   994  000B66  EFB7  F005         	goto	u1550
   995  000B6A                     u1551:
   996  000B6A  EFC9  F005         	goto	l2002
   997  000B6E                     u1550:
   998  000B6E                     
   999                           ; BSR set to: 0
  1000  000B6E  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1001  000B72  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1002  000B76  CFDE FFF6          	movff	postinc2,tblptrl
  1003  000B7A  CFDD FFF7          	movff	postdec2,tblptrh
  1004  000B7E                     	if	0	;tblptru may be non-zero
  1005  000B7E                     	endif
  1006  000B7E                     	if	0	;tblptru may be non-zero
  1007  000B7E                     	endif
  1008  000B7E  0008               	tblrd		*
  1009  000B80  50F5               	movf	tablat,w,c
  1010  000B82  0A69               	xorlw	105
  1011  000B84  A4D8               	btfss	status,2,c
  1012  000B86  EFC7  F005         	goto	u1561
  1013  000B8A  EFC9  F005         	goto	u1560
  1014  000B8E                     u1561:
  1015  000B8E  EF09  F006         	goto	l2008
  1016  000B92                     u1560:
  1017  000B92                     l2002:
  1018                           
  1019                           ; BSR set to: 0
  1020                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 849:             
      +                          ++*fmt;
  1021  000B92  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1022  000B96  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1023  000B9A  2ADE               	incf	postinc2,f,c
  1024  000B9C  0E00               	movlw	0
  1025  000B9E  22DD               	addwfc	postdec2,f,c
  1026                           
  1027                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 850:             
      +                          ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1028  000BA0  C045  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1029  000BA4  C046  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1030  000BA8  CFDF F047          	movff	indf2,??_vfpfcnvrt
  1031  000BAC  0E02               	movlw	2
  1032  000BAE  26DE               	addwf	postinc2,f,c
  1033  000BB0  CFDF F048          	movff	indf2,??_vfpfcnvrt+1
  1034  000BB4  0E00               	movlw	0
  1035  000BB6  22DD               	addwfc	postdec2,f,c
  1036  000BB8  C047  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1037  000BBC  C048  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1038  000BC0  CFDE F049          	movff	postinc2,vfpfcnvrt@ll
  1039  000BC4  CFDD F04A          	movff	postdec2,vfpfcnvrt@ll+1
  1040  000BC8  0E00               	movlw	0
  1041  000BCA  BE4A               	btfsc	(vfpfcnvrt@ll+1)^0,7,c
  1042  000BCC  0EFF               	movlw	-1
  1043  000BCE  6E4B               	movwf	(vfpfcnvrt@ll+2)^0,c
  1044  000BD0  6E4C               	movwf	(vfpfcnvrt@ll+3)^0,c
  1045  000BD2  6E4D               	movwf	(vfpfcnvrt@ll+4)^0,c
  1046  000BD4  6E4E               	movwf	(vfpfcnvrt@ll+5)^0,c
  1047  000BD6  6E4F               	movwf	(vfpfcnvrt@ll+6)^0,c
  1048  000BD8  6E50               	movwf	(vfpfcnvrt@ll+7)^0,c
  1049  000BDA                     
  1050                           ; BSR set to: 0
  1051                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 852:             
      +                          return dtoa(fp, ll);
  1052  000BDA  C041  F01D         	movff	vfpfcnvrt@fp,dtoa@fp
  1053  000BDE  C042  F01E         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1054  000BE2  C049  F01F         	movff	vfpfcnvrt@ll,dtoa@d
  1055  000BE6  C04A  F020         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1056  000BEA  C04B  F021         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1057  000BEE  C04C  F022         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1058  000BF2  C04D  F023         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1059  000BF6  C04E  F024         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1060  000BFA  C04F  F025         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1061  000BFE  C050  F026         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1062  000C02  EC12  F004         	call	_dtoa	;wreg free
  1063  000C06  C01D  F041         	movff	?_dtoa,?_vfpfcnvrt
  1064  000C0A  C01E  F042         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1065  000C0E  EF5A  F006         	goto	l885
  1066  000C12                     l2008:
  1067                           
  1068                           ; BSR set to: 0
  1069                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1372:         if 
      +                          ((*fmt)[0] == '%') {
  1070  000C12  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1071  000C16  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1072  000C1A  CFDE FFF6          	movff	postinc2,tblptrl
  1073  000C1E  CFDD FFF7          	movff	postdec2,tblptrh
  1074  000C22                     	if	0	;tblptru may be non-zero
  1075  000C22                     	endif
  1076  000C22                     	if	0	;tblptru may be non-zero
  1077  000C22                     	endif
  1078  000C22  0008               	tblrd		*
  1079  000C24  50F5               	movf	tablat,w,c
  1080  000C26  0A25               	xorlw	37
  1081  000C28  A4D8               	btfss	status,2,c
  1082  000C2A  EF19  F006         	goto	u1571
  1083  000C2E  EF1B  F006         	goto	u1570
  1084  000C32                     u1571:
  1085  000C32  EF32  F006         	goto	l2018
  1086  000C36                     u1570:
  1087  000C36                     
  1088                           ; BSR set to: 0
  1089                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1373:            
      +                           ++*fmt;
  1090  000C36  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1091  000C3A  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1092  000C3E  2ADE               	incf	postinc2,f,c
  1093  000C40  0E00               	movlw	0
  1094  000C42  22DD               	addwfc	postdec2,f,c
  1095  000C44                     
  1096                           ; BSR set to: 0
  1097                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1374:            
      +                           fputc((int)'%', fp);
  1098  000C44  0E00               	movlw	0
  1099  000C46  6E03               	movwf	(fputc@c+1)^0,c
  1100  000C48  0E25               	movlw	37
  1101  000C4A  6E02               	movwf	fputc@c^0,c
  1102  000C4C  C041  F004         	movff	vfpfcnvrt@fp,fputc@fp
  1103  000C50  C042  F005         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1104  000C54  ECD1  F007         	call	_fputc	;wreg free
  1105  000C58                     l2014:
  1106                           
  1107                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1375:            
      +                           return 1;
  1108  000C58  0E00               	movlw	0
  1109  000C5A  6E42               	movwf	(?_vfpfcnvrt+1)^0,c
  1110  000C5C  0E01               	movlw	1
  1111  000C5E  6E41               	movwf	?_vfpfcnvrt^0,c
  1112  000C60  EF5A  F006         	goto	l885
  1113  000C64                     l2018:
  1114                           
  1115                           ; BSR set to: 0
  1116                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1379:         ++*
      +                          fmt;
  1117  000C64  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1118  000C68  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1119  000C6C  2ADE               	incf	postinc2,f,c
  1120  000C6E  0E00               	movlw	0
  1121  000C70  22DD               	addwfc	postdec2,f,c
  1122  000C72                     
  1123                           ; BSR set to: 0
  1124                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1380:         ret
      +                          urn 0;
  1125  000C72  0E00               	movlw	0
  1126  000C74  6E42               	movwf	(?_vfpfcnvrt+1)^0,c
  1127  000C76  0E00               	movlw	0
  1128  000C78  6E41               	movwf	?_vfpfcnvrt^0,c
  1129  000C7A  EF5A  F006         	goto	l885
  1130  000C7E                     l2024:
  1131                           
  1132                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1384:     fputc((
      +                          int)(*fmt)[0], fp);
  1133  000C7E  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1134  000C82  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1135  000C86  CFDE FFF6          	movff	postinc2,tblptrl
  1136  000C8A  CFDD FFF7          	movff	postdec2,tblptrh
  1137  000C8E                     	if	0	;tblptru may be non-zero
  1138  000C8E                     	endif
  1139  000C8E                     	if	0	;tblptru may be non-zero
  1140  000C8E                     	endif
  1141  000C8E  0008               	tblrd		*
  1142  000C90  50F5               	movf	tablat,w,c
  1143  000C92  6E02               	movwf	fputc@c^0,c
  1144  000C94  6A03               	clrf	(fputc@c+1)^0,c
  1145  000C96  C041  F004         	movff	vfpfcnvrt@fp,fputc@fp
  1146  000C9A  C042  F005         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1147  000C9E  ECD1  F007         	call	_fputc	;wreg free
  1148  000CA2                     
  1149                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1385:     ++*fmt;
  1150  000CA2  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1151  000CA6  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1152  000CAA  2ADE               	incf	postinc2,f,c
  1153  000CAC  0E00               	movlw	0
  1154  000CAE  22DD               	addwfc	postdec2,f,c
  1155  000CB0  EF2C  F006         	goto	l2014
  1156  000CB4                     l885:
  1157  000CB4  0012               	return		;funcret
  1158  000CB6                     __end_of_vfpfcnvrt:
  1159                           	callstack 0
  1160                           
  1161 ;; *************** function _dtoa *****************
  1162 ;; Defined at:
  1163 ;;		line 287 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
  1164 ;; Parameters:    Size  Location     Type
  1165 ;;  fp              2   28[COMRAM] PTR struct _IO_FILE
  1166 ;;		 -> sprintf@f(6), 
  1167 ;;  d               8   30[COMRAM] long long 
  1168 ;; Auto vars:     Size  Location     Type
  1169 ;;  n               8   54[COMRAM] long long 
  1170 ;;  i               2   62[COMRAM] int 
  1171 ;;  s               2   52[COMRAM] int 
  1172 ;;  w               2   50[COMRAM] int 
  1173 ;;  p               2   48[COMRAM] int 
  1174 ;; Return value:  Size  Location     Type
  1175 ;;                  2   28[COMRAM] int 
  1176 ;; Registers used:
  1177 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1178 ;; Tracked objects:
  1179 ;;		On entry : 0/0
  1180 ;;		On exit  : 0/0
  1181 ;;		Unchanged: 0/0
  1182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1183 ;;      Params:        10       0       0       0       0       0       0       0       0
  1184 ;;      Locals:        18       0       0       0       0       0       0       0       0
  1185 ;;      Temps:          8       0       0       0       0       0       0       0       0
  1186 ;;      Totals:        36       0       0       0       0       0       0       0       0
  1187 ;;Total ram usage:       36 bytes
  1188 ;; Hardware stack levels used: 1
  1189 ;; Hardware stack levels required when called: 5
  1190 ;; This function calls:
  1191 ;;		___aodiv
  1192 ;;		___aomod
  1193 ;;		_abs
  1194 ;;		_pad
  1195 ;; This function is called by:
  1196 ;;		_vfpfcnvrt
  1197 ;; This function uses a non-reentrant model
  1198 ;;
  1199                           
  1200                           	psect	text4
  1201  000824                     __ptext4:
  1202                           	callstack 0
  1203  000824                     _dtoa:
  1204                           	callstack 22
  1205  000824                     
  1206                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 287: static int d
      +                          toa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\d
      +                          oprnt.c: 288: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 28
      +                          9:     int i, p, s, w;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprn
      +                          t.c: 290:     long long n;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\d
      +                          oprnt.c: 293:     n = d;
  1207  000824  C01F  F037         	movff	dtoa@d,dtoa@n
  1208  000828  C020  F038         	movff	dtoa@d+1,dtoa@n+1
  1209  00082C  C021  F039         	movff	dtoa@d+2,dtoa@n+2
  1210  000830  C022  F03A         	movff	dtoa@d+3,dtoa@n+3
  1211  000834  C023  F03B         	movff	dtoa@d+4,dtoa@n+4
  1212  000838  C024  F03C         	movff	dtoa@d+5,dtoa@n+5
  1213  00083C  C025  F03D         	movff	dtoa@d+6,dtoa@n+6
  1214  000840  C026  F03E         	movff	dtoa@d+7,dtoa@n+7
  1215  000844                     
  1216                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 294:     s = n < 
      +                          0 ? 1 : 0;
  1217  000844  BE3E               	btfsc	(dtoa@n+7)^0,7,c
  1218  000846  EF27  F004         	goto	u1391
  1219  00084A  EF2A  F004         	goto	u1390
  1220  00084E                     u1391:
  1221  00084E  0E01               	movlw	1
  1222  000850  EF2B  F004         	goto	u1400
  1223  000854                     u1390:
  1224  000854  0E00               	movlw	0
  1225  000856                     u1400:
  1226  000856  6E35               	movwf	dtoa@s^0,c
  1227  000858  6A36               	clrf	(dtoa@s+1)^0,c
  1228                           
  1229                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 295:     if (s) {
  1230  00085A  5035               	movf	dtoa@s^0,w,c
  1231  00085C  1036               	iorwf	(dtoa@s+1)^0,w,c
  1232  00085E  B4D8               	btfsc	status,2,c
  1233  000860  EF34  F004         	goto	u1411
  1234  000864  EF36  F004         	goto	u1410
  1235  000868                     u1411:
  1236  000868  EF46  F004         	goto	l1934
  1237  00086C                     u1410:
  1238  00086C                     
  1239                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 296:         n = 
      +                          -n;
  1240  00086C  1E3E               	comf	(dtoa@n+7)^0,f,c
  1241  00086E  1E3D               	comf	(dtoa@n+6)^0,f,c
  1242  000870  1E3C               	comf	(dtoa@n+5)^0,f,c
  1243  000872  1E3B               	comf	(dtoa@n+4)^0,f,c
  1244  000874  1E3A               	comf	(dtoa@n+3)^0,f,c
  1245  000876  1E39               	comf	(dtoa@n+2)^0,f,c
  1246  000878  1E38               	comf	(dtoa@n+1)^0,f,c
  1247  00087A  6C37               	negf	dtoa@n^0,c
  1248  00087C  0E00               	movlw	0
  1249  00087E  2238               	addwfc	(dtoa@n+1)^0,f,c
  1250  000880  2239               	addwfc	(dtoa@n+2)^0,f,c
  1251  000882  223A               	addwfc	(dtoa@n+3)^0,f,c
  1252  000884  223B               	addwfc	(dtoa@n+4)^0,f,c
  1253  000886  223C               	addwfc	(dtoa@n+5)^0,f,c
  1254  000888  223D               	addwfc	(dtoa@n+6)^0,f,c
  1255  00088A  223E               	addwfc	(dtoa@n+7)^0,f,c
  1256  00088C                     l1934:
  1257                           
  1258                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 300:     if (!(pr
      +                          ec < 0)) {
  1259  00088C  BE58               	btfsc	(_prec+1)^0,7,c
  1260  00088E  EF4B  F004         	goto	u1421
  1261  000892  EF4D  F004         	goto	u1420
  1262  000896                     u1421:
  1263  000896  EF4E  F004         	goto	l1938
  1264  00089A                     u1420:
  1265  00089A                     
  1266                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 301:         flag
      +                          s &= ~(1 << 1);
  1267  00089A  9259               	bcf	_flags^0,1,c
  1268  00089C                     l1938:
  1269                           
  1270                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 303:     p = (0 <
      +                           prec) ? prec : 1;
  1271  00089C  BE58               	btfsc	(_prec+1)^0,7,c
  1272  00089E  EF5B  F004         	goto	u1430
  1273  0008A2  5058               	movf	(_prec+1)^0,w,c
  1274  0008A4  E106               	bnz	u1431
  1275  0008A6  0457               	decf	_prec^0,w,c
  1276  0008A8  B0D8               	btfsc	status,0,c
  1277  0008AA  EF59  F004         	goto	u1431
  1278  0008AE  EF5B  F004         	goto	u1430
  1279  0008B2                     u1431:
  1280  0008B2  EF61  F004         	goto	l858
  1281  0008B6                     u1430:
  1282  0008B6  0E00               	movlw	0
  1283  0008B8  6E32               	movwf	(dtoa@p+1)^0,c
  1284  0008BA  0E01               	movlw	1
  1285  0008BC  6E31               	movwf	dtoa@p^0,c
  1286  0008BE  EF65  F004         	goto	l860
  1287  0008C2                     l858:
  1288  0008C2  C057  F031         	movff	_prec,dtoa@p
  1289  0008C6  C058  F032         	movff	_prec+1,dtoa@p+1
  1290  0008CA                     l860:
  1291                           
  1292                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 304:     w = widt
      +                          h;
  1293  0008CA  C062  F033         	movff	_width,dtoa@w
  1294  0008CE  C063  F034         	movff	_width+1,dtoa@w+1
  1295  0008D2                     
  1296                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 305:     if (s ||
      +                           (flags & (1 << 2))) {
  1297  0008D2  5035               	movf	dtoa@s^0,w,c
  1298  0008D4  1036               	iorwf	(dtoa@s+1)^0,w,c
  1299  0008D6  A4D8               	btfss	status,2,c
  1300  0008D8  EF70  F004         	goto	u1441
  1301  0008DC  EF72  F004         	goto	u1440
  1302  0008E0                     u1441:
  1303  0008E0  EF79  F004         	goto	l1946
  1304  0008E4                     u1440:
  1305  0008E4  A459               	btfss	_flags^0,2,c
  1306  0008E6  EF77  F004         	goto	u1451
  1307  0008EA  EF79  F004         	goto	u1450
  1308  0008EE                     u1451:
  1309  0008EE  EF7C  F004         	goto	l1948
  1310  0008F2                     u1450:
  1311  0008F2                     l1946:
  1312                           
  1313                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 306:         --w;
  1314  0008F2  0633               	decf	dtoa@w^0,f,c
  1315  0008F4  A0D8               	btfss	status,0,c
  1316  0008F6  0634               	decf	(dtoa@w+1)^0,f,c
  1317  0008F8                     l1948:
  1318                           
  1319                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 310:     i = size
      +                          of(dbuf) - 1;
  1320  0008F8  0E00               	movlw	0
  1321  0008FA  6E40               	movwf	(dtoa@i+1)^0,c
  1322  0008FC  0E1F               	movlw	31
  1323  0008FE  6E3F               	movwf	dtoa@i^0,c
  1324  000900                     
  1325                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 311:     dbuf[i] 
      +                          = '\0';
  1326  000900  0E00               	movlw	0
  1327  000902  0100               	movlb	0	; () banked
  1328  000904  6F8F               	movwf	(_dbuf+31)& (0+255),b
  1329                           
  1330                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1331  000906  EF01  F005         	goto	l1962
  1332  00090A                     l1952:
  1333                           
  1334                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 313:         --i;
  1335  00090A  063F               	decf	dtoa@i^0,f,c
  1336  00090C  A0D8               	btfss	status,0,c
  1337  00090E  0640               	decf	(dtoa@i+1)^0,f,c
  1338  000910                     
  1339                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 314:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  1340  000910  0E70               	movlw	low _dbuf
  1341  000912  243F               	addwf	dtoa@i^0,w,c
  1342  000914  6ED9               	movwf	fsr2l,c
  1343  000916  0E00               	movlw	high _dbuf
  1344  000918  2040               	addwfc	(dtoa@i+1)^0,w,c
  1345  00091A  6EDA               	movwf	fsr2h,c
  1346  00091C  C037  F002         	movff	dtoa@n,___aomod@dividend
  1347  000920  C038  F003         	movff	dtoa@n+1,___aomod@dividend+1
  1348  000924  C039  F004         	movff	dtoa@n+2,___aomod@dividend+2
  1349  000928  C03A  F005         	movff	dtoa@n+3,___aomod@dividend+3
  1350  00092C  C03B  F006         	movff	dtoa@n+4,___aomod@dividend+4
  1351  000930  C03C  F007         	movff	dtoa@n+5,___aomod@dividend+5
  1352  000934  C03D  F008         	movff	dtoa@n+6,___aomod@dividend+6
  1353  000938  C03E  F009         	movff	dtoa@n+7,___aomod@dividend+7
  1354  00093C  0E0A               	movlw	10
  1355  00093E  6E0A               	movwf	___aomod@divisor^0,c
  1356  000940  0E00               	movlw	0
  1357  000942  6E0B               	movwf	(___aomod@divisor+1)^0,c
  1358  000944  0E00               	movlw	0
  1359  000946  6E0C               	movwf	(___aomod@divisor+2)^0,c
  1360  000948  0E00               	movlw	0
  1361  00094A  6E0D               	movwf	(___aomod@divisor+3)^0,c
  1362  00094C  0E00               	movlw	0
  1363  00094E  6E0E               	movwf	(___aomod@divisor+4)^0,c
  1364  000950  0E00               	movlw	0
  1365  000952  6E0F               	movwf	(___aomod@divisor+5)^0,c
  1366  000954  0E00               	movlw	0
  1367  000956  6E10               	movwf	(___aomod@divisor+6)^0,c
  1368  000958  0E00               	movlw	0
  1369  00095A  6E11               	movwf	(___aomod@divisor+7)^0,c
  1370  00095C  EC1F  F007         	call	___aomod	;wreg free
  1371  000960  C002  F027         	movff	?___aomod,??_dtoa
  1372  000964  C003  F028         	movff	?___aomod+1,??_dtoa+1
  1373  000968  C004  F029         	movff	?___aomod+2,??_dtoa+2
  1374  00096C  C005  F02A         	movff	?___aomod+3,??_dtoa+3
  1375  000970  C006  F02B         	movff	?___aomod+4,??_dtoa+4
  1376  000974  C007  F02C         	movff	?___aomod+5,??_dtoa+5
  1377  000978  C008  F02D         	movff	?___aomod+6,??_dtoa+6
  1378  00097C  C009  F02E         	movff	?___aomod+7,??_dtoa+7
  1379  000980  C027  F014         	movff	??_dtoa,abs@a
  1380  000984  C029  F015         	movff	??_dtoa+2,abs@a+1
  1381  000988  EC78  F00A         	call	_abs	;wreg free
  1382  00098C  5014               	movf	?_abs^0,w,c
  1383  00098E  0F30               	addlw	48
  1384  000990  6EDF               	movwf	indf2,c
  1385  000992                     
  1386                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 315:         --p;
  1387  000992  0631               	decf	dtoa@p^0,f,c
  1388  000994  A0D8               	btfss	status,0,c
  1389  000996  0632               	decf	(dtoa@p+1)^0,f,c
  1390  000998                     
  1391                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 316:         --w;
  1392  000998  0633               	decf	dtoa@w^0,f,c
  1393  00099A  A0D8               	btfss	status,0,c
  1394  00099C  0634               	decf	(dtoa@w+1)^0,f,c
  1395  00099E                     
  1396                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 317:         n = 
      +                          n / 10;
  1397  00099E  C037  F002         	movff	dtoa@n,___aodiv@dividend
  1398  0009A2  C038  F003         	movff	dtoa@n+1,___aodiv@dividend+1
  1399  0009A6  C039  F004         	movff	dtoa@n+2,___aodiv@dividend+2
  1400  0009AA  C03A  F005         	movff	dtoa@n+3,___aodiv@dividend+3
  1401  0009AE  C03B  F006         	movff	dtoa@n+4,___aodiv@dividend+4
  1402  0009B2  C03C  F007         	movff	dtoa@n+5,___aodiv@dividend+5
  1403  0009B6  C03D  F008         	movff	dtoa@n+6,___aodiv@dividend+6
  1404  0009BA  C03E  F009         	movff	dtoa@n+7,___aodiv@dividend+7
  1405  0009BE  0E0A               	movlw	10
  1406  0009C0  6E0A               	movwf	___aodiv@divisor^0,c
  1407  0009C2  0E00               	movlw	0
  1408  0009C4  6E0B               	movwf	(___aodiv@divisor+1)^0,c
  1409  0009C6  0E00               	movlw	0
  1410  0009C8  6E0C               	movwf	(___aodiv@divisor+2)^0,c
  1411  0009CA  0E00               	movlw	0
  1412  0009CC  6E0D               	movwf	(___aodiv@divisor+3)^0,c
  1413  0009CE  0E00               	movlw	0
  1414  0009D0  6E0E               	movwf	(___aodiv@divisor+4)^0,c
  1415  0009D2  0E00               	movlw	0
  1416  0009D4  6E0F               	movwf	(___aodiv@divisor+5)^0,c
  1417  0009D6  0E00               	movlw	0
  1418  0009D8  6E10               	movwf	(___aodiv@divisor+6)^0,c
  1419  0009DA  0E00               	movlw	0
  1420  0009DC  6E11               	movwf	(___aodiv@divisor+7)^0,c
  1421  0009DE  EC5B  F006         	call	___aodiv	;wreg free
  1422  0009E2  C002  F037         	movff	?___aodiv,dtoa@n
  1423  0009E6  C003  F038         	movff	?___aodiv+1,dtoa@n+1
  1424  0009EA  C004  F039         	movff	?___aodiv+2,dtoa@n+2
  1425  0009EE  C005  F03A         	movff	?___aodiv+3,dtoa@n+3
  1426  0009F2  C006  F03B         	movff	?___aodiv+4,dtoa@n+4
  1427  0009F6  C007  F03C         	movff	?___aodiv+5,dtoa@n+5
  1428  0009FA  C008  F03D         	movff	?___aodiv+6,dtoa@n+6
  1429  0009FE  C009  F03E         	movff	?___aodiv+7,dtoa@n+7
  1430  000A02                     l1962:
  1431                           
  1432                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1433  000A02  BE40               	btfsc	(dtoa@i+1)^0,7,c
  1434  000A04  EF0C  F005         	goto	u1461
  1435  000A08  5040               	movf	(dtoa@i+1)^0,w,c
  1436  000A0A  E108               	bnz	u1460
  1437  000A0C  043F               	decf	dtoa@i^0,w,c
  1438  000A0E  A0D8               	btfss	status,0,c
  1439  000A10  EF0C  F005         	goto	u1461
  1440  000A14  EF0E  F005         	goto	u1460
  1441  000A18                     u1461:
  1442  000A18  EF3E  F005         	goto	l1972
  1443  000A1C                     u1460:
  1444  000A1C  5037               	movf	dtoa@n^0,w,c
  1445  000A1E  1038               	iorwf	(dtoa@n+1)^0,w,c
  1446  000A20  1039               	iorwf	(dtoa@n+2)^0,w,c
  1447  000A22  103A               	iorwf	(dtoa@n+3)^0,w,c
  1448  000A24  103B               	iorwf	(dtoa@n+4)^0,w,c
  1449  000A26  103C               	iorwf	(dtoa@n+5)^0,w,c
  1450  000A28  103D               	iorwf	(dtoa@n+6)^0,w,c
  1451  000A2A  103E               	iorwf	(dtoa@n+7)^0,w,c
  1452  000A2C  A4D8               	btfss	status,2,c
  1453  000A2E  EF1B  F005         	goto	u1471
  1454  000A32  EF1D  F005         	goto	u1470
  1455  000A36                     u1471:
  1456  000A36  EF85  F004         	goto	l1952
  1457  000A3A                     u1470:
  1458  000A3A  BE32               	btfsc	(dtoa@p+1)^0,7,c
  1459  000A3C  EF2A  F005         	goto	u1480
  1460  000A40  5032               	movf	(dtoa@p+1)^0,w,c
  1461  000A42  E106               	bnz	u1481
  1462  000A44  0431               	decf	dtoa@p^0,w,c
  1463  000A46  B0D8               	btfsc	status,0,c
  1464  000A48  EF28  F005         	goto	u1481
  1465  000A4C  EF2A  F005         	goto	u1480
  1466  000A50                     u1481:
  1467  000A50  EF85  F004         	goto	l1952
  1468  000A54                     u1480:
  1469  000A54  BE34               	btfsc	(dtoa@w+1)^0,7,c
  1470  000A56  EF35  F005         	goto	u1491
  1471  000A5A  5034               	movf	(dtoa@w+1)^0,w,c
  1472  000A5C  E108               	bnz	u1490
  1473  000A5E  0433               	decf	dtoa@w^0,w,c
  1474  000A60  A0D8               	btfss	status,0,c
  1475  000A62  EF35  F005         	goto	u1491
  1476  000A66  EF37  F005         	goto	u1490
  1477  000A6A                     u1491:
  1478  000A6A  EF3E  F005         	goto	l1972
  1479  000A6E                     u1490:
  1480  000A6E  B259               	btfsc	_flags^0,1,c
  1481  000A70  EF3C  F005         	goto	u1501
  1482  000A74  EF3E  F005         	goto	u1500
  1483  000A78                     u1501:
  1484  000A78  EF85  F004         	goto	l1952
  1485  000A7C                     u1500:
  1486  000A7C                     l1972:
  1487                           
  1488                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 321:     if (s ||
      +                           (flags & (1 << 2))) {
  1489  000A7C  5035               	movf	dtoa@s^0,w,c
  1490  000A7E  1036               	iorwf	(dtoa@s+1)^0,w,c
  1491  000A80  A4D8               	btfss	status,2,c
  1492  000A82  EF45  F005         	goto	u1511
  1493  000A86  EF47  F005         	goto	u1510
  1494  000A8A                     u1511:
  1495  000A8A  EF4E  F005         	goto	l1976
  1496  000A8E                     u1510:
  1497  000A8E  A459               	btfss	_flags^0,2,c
  1498  000A90  EF4C  F005         	goto	u1521
  1499  000A94  EF4E  F005         	goto	u1520
  1500  000A98                     u1521:
  1501  000A98  EF6C  F005         	goto	l1986
  1502  000A9C                     u1520:
  1503  000A9C                     l1976:
  1504                           
  1505                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 322:         --i;
  1506  000A9C  063F               	decf	dtoa@i^0,f,c
  1507  000A9E  A0D8               	btfss	status,0,c
  1508  000AA0  0640               	decf	(dtoa@i+1)^0,f,c
  1509  000AA2                     
  1510                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 323:         dbuf
      +                          [i] = s ? '-' : '+';
  1511  000AA2  5035               	movf	dtoa@s^0,w,c
  1512  000AA4  1036               	iorwf	(dtoa@s+1)^0,w,c
  1513  000AA6  A4D8               	btfss	status,2,c
  1514  000AA8  EF58  F005         	goto	u1531
  1515  000AAC  EF5A  F005         	goto	u1530
  1516  000AB0                     u1531:
  1517  000AB0  EF60  F005         	goto	l1982
  1518  000AB4                     u1530:
  1519  000AB4  0E00               	movlw	0
  1520  000AB6  6E30               	movwf	(_dtoa$707+1)^0,c
  1521  000AB8  0E2B               	movlw	43
  1522  000ABA  6E2F               	movwf	_dtoa$707^0,c
  1523  000ABC  EF64  F005         	goto	l1984
  1524  000AC0                     l1982:
  1525  000AC0  0E00               	movlw	0
  1526  000AC2  6E30               	movwf	(_dtoa$707+1)^0,c
  1527  000AC4  0E2D               	movlw	45
  1528  000AC6  6E2F               	movwf	_dtoa$707^0,c
  1529  000AC8                     l1984:
  1530  000AC8  0E70               	movlw	low _dbuf
  1531  000ACA  243F               	addwf	dtoa@i^0,w,c
  1532  000ACC  6ED9               	movwf	fsr2l,c
  1533  000ACE  0E00               	movlw	high _dbuf
  1534  000AD0  2040               	addwfc	(dtoa@i+1)^0,w,c
  1535  000AD2  6EDA               	movwf	fsr2h,c
  1536  000AD4  C02F  FFDF         	movff	_dtoa$707,indf2
  1537  000AD8                     l1986:
  1538                           
  1539                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 327:     return p
      +                          ad(fp, &dbuf[i], w);
  1540  000AD8  C01D  F012         	movff	dtoa@fp,pad@fp
  1541  000ADC  C01E  F013         	movff	dtoa@fp+1,pad@fp+1
  1542  000AE0  0E70               	movlw	low _dbuf
  1543  000AE2  243F               	addwf	dtoa@i^0,w,c
  1544  000AE4  6E14               	movwf	pad@buf^0,c
  1545  000AE6  0E00               	movlw	high _dbuf
  1546  000AE8  2040               	addwfc	(dtoa@i+1)^0,w,c
  1547  000AEA  6E15               	movwf	(pad@buf+1)^0,c
  1548  000AEC  C033  F016         	movff	dtoa@w,pad@p
  1549  000AF0  C034  F017         	movff	dtoa@w+1,pad@p+1
  1550  000AF4  EC36  F008         	call	_pad	;wreg free
  1551  000AF8  C012  F01D         	movff	?_pad,?_dtoa
  1552  000AFC  C013  F01E         	movff	?_pad+1,?_dtoa+1
  1553  000B00  0012               	return		;funcret
  1554  000B02                     __end_of_dtoa:
  1555                           	callstack 0
  1556                           
  1557 ;; *************** function _pad *****************
  1558 ;; Defined at:
  1559 ;;		line 72 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
  1560 ;; Parameters:    Size  Location     Type
  1561 ;;  fp              2   17[COMRAM] PTR struct _IO_FILE
  1562 ;;		 -> sprintf@f(6), 
  1563 ;;  buf             2   19[COMRAM] PTR unsigned char 
  1564 ;;		 -> dbuf(32), 
  1565 ;;  p               2   21[COMRAM] int 
  1566 ;; Auto vars:     Size  Location     Type
  1567 ;;  w               2   26[COMRAM] int 
  1568 ;;  i               2   24[COMRAM] int 
  1569 ;; Return value:  Size  Location     Type
  1570 ;;                  2   17[COMRAM] int 
  1571 ;; Registers used:
  1572 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1573 ;; Tracked objects:
  1574 ;;		On entry : 0/0
  1575 ;;		On exit  : 0/0
  1576 ;;		Unchanged: 0/0
  1577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1578 ;;      Params:         6       0       0       0       0       0       0       0       0
  1579 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1580 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1581 ;;      Totals:        11       0       0       0       0       0       0       0       0
  1582 ;;Total ram usage:       11 bytes
  1583 ;; Hardware stack levels used: 1
  1584 ;; Hardware stack levels required when called: 4
  1585 ;; This function calls:
  1586 ;;		_fputc
  1587 ;;		_fputs
  1588 ;;		_strlen
  1589 ;; This function is called by:
  1590 ;;		_dtoa
  1591 ;; This function uses a non-reentrant model
  1592 ;;
  1593                           
  1594                           	psect	text5
  1595  00106C                     __ptext5:
  1596                           	callstack 0
  1597  00106C                     _pad:
  1598                           	callstack 22
  1599  00106C                     
  1600                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 72: static int pa
      +                          d(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\commo
      +                          n\doprnt.c: 73: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 
      +                          74:     int i, w;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 
      +                          77:     if (flags & (1 << 0)) {
  1601  00106C  A059               	btfss	_flags^0,0,c
  1602  00106E  EF3B  F008         	goto	u1341
  1603  001072  EF3D  F008         	goto	u1340
  1604  001076                     u1341:
  1605  001076  EF47  F008         	goto	l1906
  1606  00107A                     u1340:
  1607  00107A                     
  1608                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 78:         fputs
      +                          ((const char *)buf, fp);
  1609  00107A  C014  F00B         	movff	pad@buf,fputs@s
  1610  00107E  C015  F00C         	movff	pad@buf+1,fputs@s+1
  1611  001082  C012  F00D         	movff	pad@fp,fputs@fp
  1612  001086  C013  F00E         	movff	pad@fp+1,fputs@fp+1
  1613  00108A  EC35  F00A         	call	_fputs	;wreg free
  1614  00108E                     l1906:
  1615                           
  1616                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 82:     w = (p < 
      +                          0) ? 0 : p;
  1617  00108E  BE17               	btfsc	(pad@p+1)^0,7,c
  1618  001090  EF4C  F008         	goto	u1351
  1619  001094  EF4E  F008         	goto	u1350
  1620  001098                     u1351:
  1621  001098  EF54  F008         	goto	l1910
  1622  00109C                     u1350:
  1623  00109C  C016  F01B         	movff	pad@p,pad@w
  1624  0010A0  C017  F01C         	movff	pad@p+1,pad@w+1
  1625  0010A4  EF58  F008         	goto	l847
  1626  0010A8                     l1910:
  1627  0010A8  0E00               	movlw	0
  1628  0010AA  6E1C               	movwf	(pad@w+1)^0,c
  1629  0010AC  0E00               	movlw	0
  1630  0010AE  6E1B               	movwf	pad@w^0,c
  1631  0010B0                     l847:
  1632                           
  1633                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 83:     i = 0;
  1634  0010B0  0E00               	movlw	0
  1635  0010B2  6E1A               	movwf	(pad@i+1)^0,c
  1636  0010B4  0E00               	movlw	0
  1637  0010B6  6E19               	movwf	pad@i^0,c
  1638                           
  1639                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  1640  0010B8  EF6A  F008         	goto	l1916
  1641  0010BC                     l1912:
  1642                           
  1643                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 85:         fputc
      +                          (' ', fp);
  1644  0010BC  0E00               	movlw	0
  1645  0010BE  6E03               	movwf	(fputc@c+1)^0,c
  1646  0010C0  0E20               	movlw	32
  1647  0010C2  6E02               	movwf	fputc@c^0,c
  1648  0010C4  C012  F004         	movff	pad@fp,fputc@fp
  1649  0010C8  C013  F005         	movff	pad@fp+1,fputc@fp+1
  1650  0010CC  ECD1  F007         	call	_fputc	;wreg free
  1651  0010D0                     
  1652                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 86:         ++i;
  1653  0010D0  4A19               	infsnz	pad@i^0,f,c
  1654  0010D2  2A1A               	incf	(pad@i+1)^0,f,c
  1655  0010D4                     l1916:
  1656                           
  1657                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  1658  0010D4  501B               	movf	pad@w^0,w,c
  1659  0010D6  5C19               	subwf	pad@i^0,w,c
  1660  0010D8  501A               	movf	(pad@i+1)^0,w,c
  1661  0010DA  0A80               	xorlw	128
  1662  0010DC  6E18               	movwf	??_pad^0,c
  1663  0010DE  501C               	movf	(pad@w+1)^0,w,c
  1664  0010E0  0A80               	xorlw	128
  1665  0010E2  5818               	subwfb	??_pad^0,w,c
  1666  0010E4  A0D8               	btfss	status,0,c
  1667  0010E6  EF77  F008         	goto	u1361
  1668  0010EA  EF79  F008         	goto	u1360
  1669  0010EE                     u1361:
  1670  0010EE  EF5E  F008         	goto	l1912
  1671  0010F2                     u1360:
  1672  0010F2                     
  1673                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 90:     if (!(fla
      +                          gs & (1 << 0))) {
  1674  0010F2  B059               	btfsc	_flags^0,0,c
  1675  0010F4  EF7E  F008         	goto	u1371
  1676  0010F8  EF80  F008         	goto	u1370
  1677  0010FC                     u1371:
  1678  0010FC  EF8A  F008         	goto	l1920
  1679  001100                     u1370:
  1680  001100                     
  1681                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 91:         fputs
      +                          ((const char *)buf, fp);
  1682  001100  C014  F00B         	movff	pad@buf,fputs@s
  1683  001104  C015  F00C         	movff	pad@buf+1,fputs@s+1
  1684  001108  C012  F00D         	movff	pad@fp,fputs@fp
  1685  00110C  C013  F00E         	movff	pad@fp+1,fputs@fp+1
  1686  001110  EC35  F00A         	call	_fputs	;wreg free
  1687  001114                     l1920:
  1688                           
  1689                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 94:     return (i
      +                          nt)(strlen(buf) + (size_t)w);
  1690  001114  C014  F002         	movff	pad@buf,strlen@s
  1691  001118  C015  F003         	movff	pad@buf+1,strlen@s+1
  1692  00111C  ECD4  F00A         	call	_strlen	;wreg free
  1693  001120  501B               	movf	pad@w^0,w,c
  1694  001122  2402               	addwf	?_strlen^0,w,c
  1695  001124  6E12               	movwf	?_pad^0,c
  1696  001126  501C               	movf	(pad@w+1)^0,w,c
  1697  001128  2003               	addwfc	(?_strlen+1)^0,w,c
  1698  00112A  6E13               	movwf	(?_pad+1)^0,c
  1699  00112C  0012               	return		;funcret
  1700  00112E                     __end_of_pad:
  1701                           	callstack 0
  1702                           
  1703 ;; *************** function _strlen *****************
  1704 ;; Defined at:
  1705 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\strlen.c"
  1706 ;; Parameters:    Size  Location     Type
  1707 ;;  s               2    1[COMRAM] PTR const unsigned char 
  1708 ;;		 -> dbuf(32), 
  1709 ;; Auto vars:     Size  Location     Type
  1710 ;;  a               2    3[COMRAM] PTR const unsigned char 
  1711 ;;		 -> dbuf(32), 
  1712 ;; Return value:  Size  Location     Type
  1713 ;;                  2    1[COMRAM] unsigned int 
  1714 ;; Registers used:
  1715 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1716 ;; Tracked objects:
  1717 ;;		On entry : 0/0
  1718 ;;		On exit  : 0/0
  1719 ;;		Unchanged: 0/0
  1720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1721 ;;      Params:         2       0       0       0       0       0       0       0       0
  1722 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1723 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1724 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1725 ;;Total ram usage:        4 bytes
  1726 ;; Hardware stack levels used: 1
  1727 ;; Hardware stack levels required when called: 1
  1728 ;; This function calls:
  1729 ;;		Nothing
  1730 ;; This function is called by:
  1731 ;;		_pad
  1732 ;; This function uses a non-reentrant model
  1733 ;;
  1734                           
  1735                           	psect	text6
  1736  0015A8                     __ptext6:
  1737                           	callstack 0
  1738  0015A8                     _strlen:
  1739                           	callstack 24
  1740  0015A8  C002  F004         	movff	strlen@s,strlen@a
  1741  0015AC  C003  F005         	movff	strlen@s+1,strlen@a+1
  1742  0015B0  EFDC  F00A         	goto	l1816
  1743  0015B4                     l1814:
  1744  0015B4  4A02               	infsnz	strlen@s^0,f,c
  1745  0015B6  2A03               	incf	(strlen@s+1)^0,f,c
  1746  0015B8                     l1816:
  1747  0015B8  C002  FFD9         	movff	strlen@s,fsr2l
  1748  0015BC  C003  FFDA         	movff	strlen@s+1,fsr2h
  1749  0015C0  50DF               	movf	indf2,w,c
  1750  0015C2  A4D8               	btfss	status,2,c
  1751  0015C4  EFE6  F00A         	goto	u1201
  1752  0015C8  EFE8  F00A         	goto	u1200
  1753  0015CC                     u1201:
  1754  0015CC  EFDA  F00A         	goto	l1814
  1755  0015D0                     u1200:
  1756  0015D0  5004               	movf	strlen@a^0,w,c
  1757  0015D2  5C02               	subwf	strlen@s^0,w,c
  1758  0015D4  6E02               	movwf	?_strlen^0,c
  1759  0015D6  5005               	movf	(strlen@a+1)^0,w,c
  1760  0015D8  5803               	subwfb	(strlen@s+1)^0,w,c
  1761  0015DA  6E03               	movwf	(?_strlen+1)^0,c
  1762  0015DC  0012               	return		;funcret
  1763  0015DE                     __end_of_strlen:
  1764                           	callstack 0
  1765                           
  1766 ;; *************** function _fputs *****************
  1767 ;; Defined at:
  1768 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_fputs.c"
  1769 ;; Parameters:    Size  Location     Type
  1770 ;;  s               2   10[COMRAM] PTR const unsigned char 
  1771 ;;		 -> dbuf(32), 
  1772 ;;  fp              2   12[COMRAM] PTR struct _IO_FILE
  1773 ;;		 -> sprintf@f(6), 
  1774 ;; Auto vars:     Size  Location     Type
  1775 ;;  i               2   15[COMRAM] int 
  1776 ;;  c               1   14[COMRAM] unsigned char 
  1777 ;; Return value:  Size  Location     Type
  1778 ;;                  2   10[COMRAM] int 
  1779 ;; Registers used:
  1780 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1781 ;; Tracked objects:
  1782 ;;		On entry : 0/0
  1783 ;;		On exit  : 0/0
  1784 ;;		Unchanged: 0/0
  1785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1786 ;;      Params:         4       0       0       0       0       0       0       0       0
  1787 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1788 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1789 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1790 ;;Total ram usage:        7 bytes
  1791 ;; Hardware stack levels used: 1
  1792 ;; Hardware stack levels required when called: 3
  1793 ;; This function calls:
  1794 ;;		_fputc
  1795 ;; This function is called by:
  1796 ;;		_pad
  1797 ;; This function uses a non-reentrant model
  1798 ;;
  1799                           
  1800                           	psect	text7
  1801  00146A                     __ptext7:
  1802                           	callstack 0
  1803  00146A                     _fputs:
  1804                           	callstack 22
  1805  00146A  0E00               	movlw	0
  1806  00146C  6E11               	movwf	(fputs@i+1)^0,c
  1807  00146E  0E00               	movlw	0
  1808  001470  6E10               	movwf	fputs@i^0,c
  1809  001472  EF46  F00A         	goto	l1810
  1810  001476                     l1806:
  1811  001476  C00F  F002         	movff	fputs@c,fputc@c
  1812  00147A  6A03               	clrf	(fputc@c+1)^0,c
  1813  00147C  C00D  F004         	movff	fputs@fp,fputc@fp
  1814  001480  C00E  F005         	movff	fputs@fp+1,fputc@fp+1
  1815  001484  ECD1  F007         	call	_fputc	;wreg free
  1816  001488  4A10               	infsnz	fputs@i^0,f,c
  1817  00148A  2A11               	incf	(fputs@i+1)^0,f,c
  1818  00148C                     l1810:
  1819  00148C  5010               	movf	fputs@i^0,w,c
  1820  00148E  240B               	addwf	fputs@s^0,w,c
  1821  001490  6ED9               	movwf	fsr2l,c
  1822  001492  5011               	movf	(fputs@i+1)^0,w,c
  1823  001494  200C               	addwfc	(fputs@s+1)^0,w,c
  1824  001496  6EDA               	movwf	fsr2h,c
  1825  001498  50DF               	movf	indf2,w,c
  1826  00149A  6E0F               	movwf	fputs@c^0,c
  1827  00149C  500F               	movf	fputs@c^0,w,c
  1828  00149E  A4D8               	btfss	status,2,c
  1829  0014A0  EF54  F00A         	goto	u1191
  1830  0014A4  EF56  F00A         	goto	u1190
  1831  0014A8                     u1191:
  1832  0014A8  EF3B  F00A         	goto	l1806
  1833  0014AC                     u1190:
  1834  0014AC  0012               	return		;funcret
  1835  0014AE                     __end_of_fputs:
  1836                           	callstack 0
  1837                           
  1838 ;; *************** function _fputc *****************
  1839 ;; Defined at:
  1840 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_fputc.c"
  1841 ;; Parameters:    Size  Location     Type
  1842 ;;  c               2    1[COMRAM] int 
  1843 ;;  fp              2    3[COMRAM] PTR struct _IO_FILE
  1844 ;;		 -> sprintf@f(6), 
  1845 ;; Auto vars:     Size  Location     Type
  1846 ;;		None
  1847 ;; Return value:  Size  Location     Type
  1848 ;;                  2    1[COMRAM] int 
  1849 ;; Registers used:
  1850 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1851 ;; Tracked objects:
  1852 ;;		On entry : 0/0
  1853 ;;		On exit  : 0/0
  1854 ;;		Unchanged: 0/0
  1855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1856 ;;      Params:         4       0       0       0       0       0       0       0       0
  1857 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1858 ;;      Temps:          5       0       0       0       0       0       0       0       0
  1859 ;;      Totals:         9       0       0       0       0       0       0       0       0
  1860 ;;Total ram usage:        9 bytes
  1861 ;; Hardware stack levels used: 1
  1862 ;; Hardware stack levels required when called: 2
  1863 ;; This function calls:
  1864 ;;		_putch
  1865 ;; This function is called by:
  1866 ;;		_pad
  1867 ;;		_vfpfcnvrt
  1868 ;;		_fputs
  1869 ;; This function uses a non-reentrant model
  1870 ;;
  1871                           
  1872                           	psect	text8
  1873  000FA2                     __ptext8:
  1874                           	callstack 0
  1875  000FA2                     _fputc:
  1876                           	callstack 25
  1877  000FA2  5004               	movf	fputc@fp^0,w,c
  1878  000FA4  1005               	iorwf	(fputc@fp+1)^0,w,c
  1879  000FA6  B4D8               	btfsc	status,2,c
  1880  000FA8  EFD8  F007         	goto	u1151
  1881  000FAC  EFDA  F007         	goto	u1150
  1882  000FB0                     u1151:
  1883  000FB0  EFE3  F007         	goto	l1794
  1884  000FB4                     u1150:
  1885  000FB4  5004               	movf	fputc@fp^0,w,c
  1886  000FB6  1005               	iorwf	(fputc@fp+1)^0,w,c
  1887  000FB8  A4D8               	btfss	status,2,c
  1888  000FBA  EFE1  F007         	goto	u1161
  1889  000FBE  EFE3  F007         	goto	u1160
  1890  000FC2                     u1161:
  1891  000FC2  EFE8  F007         	goto	l1796
  1892  000FC6                     u1160:
  1893  000FC6                     l1794:
  1894  000FC6  5002               	movf	fputc@c^0,w,c
  1895  000FC8  EC21  F00B         	call	_putch
  1896  000FCC  EF35  F008         	goto	l911
  1897  000FD0                     l1796:
  1898  000FD0  EE20 F004          	lfsr	2,4
  1899  000FD4  5004               	movf	fputc@fp^0,w,c
  1900  000FD6  26D9               	addwf	fsr2l,f,c
  1901  000FD8  5005               	movf	(fputc@fp+1)^0,w,c
  1902  000FDA  22DA               	addwfc	fsr2h,f,c
  1903  000FDC  50DE               	movf	postinc2,w,c
  1904  000FDE  10DE               	iorwf	postinc2,w,c
  1905  000FE0  B4D8               	btfsc	status,2,c
  1906  000FE2  EFF5  F007         	goto	u1171
  1907  000FE6  EFF7  F007         	goto	u1170
  1908  000FEA                     u1171:
  1909  000FEA  EF12  F008         	goto	l1800
  1910  000FEE                     u1170:
  1911  000FEE  EE20 F004          	lfsr	2,4
  1912  000FF2  5004               	movf	fputc@fp^0,w,c
  1913  000FF4  26D9               	addwf	fsr2l,f,c
  1914  000FF6  5005               	movf	(fputc@fp+1)^0,w,c
  1915  000FF8  22DA               	addwfc	fsr2h,f,c
  1916  000FFA  EE10 F002          	lfsr	1,2
  1917  000FFE  5004               	movf	fputc@fp^0,w,c
  1918  001000  26E1               	addwf	fsr1l,f,c
  1919  001002  5005               	movf	(fputc@fp+1)^0,w,c
  1920  001004  22E2               	addwfc	fsr1h,f,c
  1921  001006  50DE               	movf	postinc2,w,c
  1922  001008  5CE6               	subwf	postinc1,w,c
  1923  00100A  50E6               	movf	postinc1,w,c
  1924  00100C  0A80               	xorlw	128
  1925  00100E  6E0A               	movwf	(??_fputc+4)^0,c
  1926  001010  50DE               	movf	postinc2,w,c
  1927  001012  0A80               	xorlw	128
  1928  001014  580A               	subwfb	(??_fputc+4)^0,w,c
  1929  001016  B0D8               	btfsc	status,0,c
  1930  001018  EF10  F008         	goto	u1181
  1931  00101C  EF12  F008         	goto	u1180
  1932  001020                     u1181:
  1933  001020  EF35  F008         	goto	l911
  1934  001024                     u1180:
  1935  001024                     l1800:
  1936  001024  EE20 F002          	lfsr	2,2
  1937  001028  5004               	movf	fputc@fp^0,w,c
  1938  00102A  26D9               	addwf	fsr2l,f,c
  1939  00102C  5005               	movf	(fputc@fp+1)^0,w,c
  1940  00102E  22DA               	addwfc	fsr2h,f,c
  1941  001030  CFDE F006          	movff	postinc2,??_fputc
  1942  001034  CFDD F007          	movff	postdec2,??_fputc+1
  1943  001038  C004  FFD9         	movff	fputc@fp,fsr2l
  1944  00103C  C005  FFDA         	movff	fputc@fp+1,fsr2h
  1945  001040  CFDE F008          	movff	postinc2,??_fputc+2
  1946  001044  CFDD F009          	movff	postdec2,??_fputc+3
  1947  001048  5006               	movf	??_fputc^0,w,c
  1948  00104A  2408               	addwf	(??_fputc+2)^0,w,c
  1949  00104C  6ED9               	movwf	fsr2l,c
  1950  00104E  5007               	movf	(??_fputc+1)^0,w,c
  1951  001050  2009               	addwfc	(??_fputc+3)^0,w,c
  1952  001052  6EDA               	movwf	fsr2h,c
  1953  001054  C002  FFDF         	movff	fputc@c,indf2
  1954  001058  EE20 F002          	lfsr	2,2
  1955  00105C  5004               	movf	fputc@fp^0,w,c
  1956  00105E  26D9               	addwf	fsr2l,f,c
  1957  001060  5005               	movf	(fputc@fp+1)^0,w,c
  1958  001062  22DA               	addwfc	fsr2h,f,c
  1959  001064  2ADE               	incf	postinc2,f,c
  1960  001066  0E00               	movlw	0
  1961  001068  22DD               	addwfc	postdec2,f,c
  1962  00106A                     l911:
  1963  00106A  0012               	return		;funcret
  1964  00106C                     __end_of_fputc:
  1965                           	callstack 0
  1966                           
  1967 ;; *************** function _putch *****************
  1968 ;; Defined at:
  1969 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\putch.c"
  1970 ;; Parameters:    Size  Location     Type
  1971 ;;  c               1    wreg     unsigned char 
  1972 ;; Auto vars:     Size  Location     Type
  1973 ;;  c               1    0[COMRAM] unsigned char 
  1974 ;; Return value:  Size  Location     Type
  1975 ;;                  1    wreg      void 
  1976 ;; Registers used:
  1977 ;;		wreg
  1978 ;; Tracked objects:
  1979 ;;		On entry : 0/0
  1980 ;;		On exit  : 0/0
  1981 ;;		Unchanged: 0/0
  1982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1983 ;;      Params:         0       0       0       0       0       0       0       0       0
  1984 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1985 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1986 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1987 ;;Total ram usage:        0 bytes
  1988 ;; Hardware stack levels used: 1
  1989 ;; Hardware stack levels required when called: 1
  1990 ;; This function calls:
  1991 ;;		Nothing
  1992 ;; This function is called by:
  1993 ;;		_fputc
  1994 ;; This function uses a non-reentrant model
  1995 ;;
  1996                           
  1997                           	psect	text9
  1998  001642                     __ptext9:
  1999                           	callstack 0
  2000  001642                     _putch:
  2001                           	callstack 25
  2002  001642  0012               	return		;funcret
  2003  001644                     __end_of_putch:
  2004                           	callstack 0
  2005                           
  2006 ;; *************** function _abs *****************
  2007 ;; Defined at:
  2008 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\abs.c"
  2009 ;; Parameters:    Size  Location     Type
  2010 ;;  a               2   19[COMRAM] int 
  2011 ;; Auto vars:     Size  Location     Type
  2012 ;;		None
  2013 ;; Return value:  Size  Location     Type
  2014 ;;                  2   19[COMRAM] int 
  2015 ;; Registers used:
  2016 ;;		wreg, status,2, status,0
  2017 ;; Tracked objects:
  2018 ;;		On entry : 0/0
  2019 ;;		On exit  : 0/0
  2020 ;;		Unchanged: 0/0
  2021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2022 ;;      Params:         2       0       0       0       0       0       0       0       0
  2023 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2024 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2025 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2026 ;;Total ram usage:        4 bytes
  2027 ;; Hardware stack levels used: 1
  2028 ;; Hardware stack levels required when called: 1
  2029 ;; This function calls:
  2030 ;;		Nothing
  2031 ;; This function is called by:
  2032 ;;		_dtoa
  2033 ;; This function uses a non-reentrant model
  2034 ;;
  2035                           
  2036                           	psect	text10
  2037  0014F0                     __ptext10:
  2038                           	callstack 0
  2039  0014F0                     _abs:
  2040                           	callstack 25
  2041  0014F0  BE15               	btfsc	(abs@a+1)^0,7,c
  2042  0014F2  EF85  F00A         	goto	u1380
  2043  0014F6  5015               	movf	(abs@a+1)^0,w,c
  2044  0014F8  E106               	bnz	u1381
  2045  0014FA  0414               	decf	abs@a^0,w,c
  2046  0014FC  B0D8               	btfsc	status,0,c
  2047  0014FE  EF83  F00A         	goto	u1381
  2048  001502  EF85  F00A         	goto	u1380
  2049  001506                     u1381:
  2050  001506  EF93  F00A         	goto	l896
  2051  00150A                     u1380:
  2052  00150A  C014  F016         	movff	abs@a,??_abs
  2053  00150E  C015  F017         	movff	abs@a+1,??_abs+1
  2054  001512  1E16               	comf	??_abs^0,f,c
  2055  001514  1E17               	comf	(??_abs+1)^0,f,c
  2056  001516  4A16               	infsnz	??_abs^0,f,c
  2057  001518  2A17               	incf	(??_abs+1)^0,f,c
  2058  00151A  C016  F014         	movff	??_abs,?_abs
  2059  00151E  C017  F015         	movff	??_abs+1,?_abs+1
  2060  001522  EF97  F00A         	goto	l899
  2061  001526                     l896:
  2062  001526  C014  F014         	movff	abs@a,?_abs
  2063  00152A  C015  F015         	movff	abs@a+1,?_abs+1
  2064  00152E                     l899:
  2065  00152E  0012               	return		;funcret
  2066  001530                     __end_of_abs:
  2067                           	callstack 0
  2068                           
  2069 ;; *************** function ___aomod *****************
  2070 ;; Defined at:
  2071 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\aomod.c"
  2072 ;; Parameters:    Size  Location     Type
  2073 ;;  dividend        8    1[COMRAM] long long 
  2074 ;;  divisor         8    9[COMRAM] long long 
  2075 ;; Auto vars:     Size  Location     Type
  2076 ;;  sign            1   18[COMRAM] unsigned char 
  2077 ;;  counter         1   17[COMRAM] unsigned char 
  2078 ;; Return value:  Size  Location     Type
  2079 ;;                  8    1[COMRAM] long long 
  2080 ;; Registers used:
  2081 ;;		wreg, status,2, status,0
  2082 ;; Tracked objects:
  2083 ;;		On entry : 0/0
  2084 ;;		On exit  : 0/0
  2085 ;;		Unchanged: 0/0
  2086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2087 ;;      Params:        16       0       0       0       0       0       0       0       0
  2088 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2089 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2090 ;;      Totals:        18       0       0       0       0       0       0       0       0
  2091 ;;Total ram usage:       18 bytes
  2092 ;; Hardware stack levels used: 1
  2093 ;; Hardware stack levels required when called: 1
  2094 ;; This function calls:
  2095 ;;		Nothing
  2096 ;; This function is called by:
  2097 ;;		_dtoa
  2098 ;; This function uses a non-reentrant model
  2099 ;;
  2100                           
  2101                           	psect	text11
  2102  000E3E                     __ptext11:
  2103                           	callstack 0
  2104  000E3E                     ___aomod:
  2105                           	callstack 25
  2106  000E3E  0E00               	movlw	0
  2107  000E40  6E13               	movwf	___aomod@sign^0,c
  2108  000E42  BE09               	btfsc	(___aomod@dividend+7)^0,7,c
  2109  000E44  EF28  F007         	goto	u1280
  2110  000E48  EF26  F007         	goto	u1281
  2111  000E4C                     u1281:
  2112  000E4C  EF3A  F007         	goto	l1874
  2113  000E50                     u1280:
  2114  000E50  1E09               	comf	(___aomod@dividend+7)^0,f,c
  2115  000E52  1E08               	comf	(___aomod@dividend+6)^0,f,c
  2116  000E54  1E07               	comf	(___aomod@dividend+5)^0,f,c
  2117  000E56  1E06               	comf	(___aomod@dividend+4)^0,f,c
  2118  000E58  1E05               	comf	(___aomod@dividend+3)^0,f,c
  2119  000E5A  1E04               	comf	(___aomod@dividend+2)^0,f,c
  2120  000E5C  1E03               	comf	(___aomod@dividend+1)^0,f,c
  2121  000E5E  6C02               	negf	___aomod@dividend^0,c
  2122  000E60  0E00               	movlw	0
  2123  000E62  2203               	addwfc	(___aomod@dividend+1)^0,f,c
  2124  000E64  2204               	addwfc	(___aomod@dividend+2)^0,f,c
  2125  000E66  2205               	addwfc	(___aomod@dividend+3)^0,f,c
  2126  000E68  2206               	addwfc	(___aomod@dividend+4)^0,f,c
  2127  000E6A  2207               	addwfc	(___aomod@dividend+5)^0,f,c
  2128  000E6C  2208               	addwfc	(___aomod@dividend+6)^0,f,c
  2129  000E6E  2209               	addwfc	(___aomod@dividend+7)^0,f,c
  2130  000E70  0E01               	movlw	1
  2131  000E72  6E13               	movwf	___aomod@sign^0,c
  2132  000E74                     l1874:
  2133  000E74  BE11               	btfsc	(___aomod@divisor+7)^0,7,c
  2134  000E76  EF41  F007         	goto	u1290
  2135  000E7A  EF3F  F007         	goto	u1291
  2136  000E7E                     u1291:
  2137  000E7E  EF51  F007         	goto	l1878
  2138  000E82                     u1290:
  2139  000E82  1E11               	comf	(___aomod@divisor+7)^0,f,c
  2140  000E84  1E10               	comf	(___aomod@divisor+6)^0,f,c
  2141  000E86  1E0F               	comf	(___aomod@divisor+5)^0,f,c
  2142  000E88  1E0E               	comf	(___aomod@divisor+4)^0,f,c
  2143  000E8A  1E0D               	comf	(___aomod@divisor+3)^0,f,c
  2144  000E8C  1E0C               	comf	(___aomod@divisor+2)^0,f,c
  2145  000E8E  1E0B               	comf	(___aomod@divisor+1)^0,f,c
  2146  000E90  6C0A               	negf	___aomod@divisor^0,c
  2147  000E92  0E00               	movlw	0
  2148  000E94  220B               	addwfc	(___aomod@divisor+1)^0,f,c
  2149  000E96  220C               	addwfc	(___aomod@divisor+2)^0,f,c
  2150  000E98  220D               	addwfc	(___aomod@divisor+3)^0,f,c
  2151  000E9A  220E               	addwfc	(___aomod@divisor+4)^0,f,c
  2152  000E9C  220F               	addwfc	(___aomod@divisor+5)^0,f,c
  2153  000E9E  2210               	addwfc	(___aomod@divisor+6)^0,f,c
  2154  000EA0  2211               	addwfc	(___aomod@divisor+7)^0,f,c
  2155  000EA2                     l1878:
  2156  000EA2  500A               	movf	___aomod@divisor^0,w,c
  2157  000EA4  100B               	iorwf	(___aomod@divisor+1)^0,w,c
  2158  000EA6  100C               	iorwf	(___aomod@divisor+2)^0,w,c
  2159  000EA8  100D               	iorwf	(___aomod@divisor+3)^0,w,c
  2160  000EAA  100E               	iorwf	(___aomod@divisor+4)^0,w,c
  2161  000EAC  100F               	iorwf	(___aomod@divisor+5)^0,w,c
  2162  000EAE  1010               	iorwf	(___aomod@divisor+6)^0,w,c
  2163  000EB0  1011               	iorwf	(___aomod@divisor+7)^0,w,c
  2164  000EB2  B4D8               	btfsc	status,2,c
  2165  000EB4  EF5E  F007         	goto	u1301
  2166  000EB8  EF60  F007         	goto	u1300
  2167  000EBC                     u1301:
  2168  000EBC  EFA8  F007         	goto	l1894
  2169  000EC0                     u1300:
  2170  000EC0  0E01               	movlw	1
  2171  000EC2  6E12               	movwf	___aomod@counter^0,c
  2172  000EC4  EF6E  F007         	goto	l1884
  2173  000EC8                     l1882:
  2174  000EC8  90D8               	bcf	status,0,c
  2175  000ECA  360A               	rlcf	___aomod@divisor^0,f,c
  2176  000ECC  360B               	rlcf	(___aomod@divisor+1)^0,f,c
  2177  000ECE  360C               	rlcf	(___aomod@divisor+2)^0,f,c
  2178  000ED0  360D               	rlcf	(___aomod@divisor+3)^0,f,c
  2179  000ED2  360E               	rlcf	(___aomod@divisor+4)^0,f,c
  2180  000ED4  360F               	rlcf	(___aomod@divisor+5)^0,f,c
  2181  000ED6  3610               	rlcf	(___aomod@divisor+6)^0,f,c
  2182  000ED8  3611               	rlcf	(___aomod@divisor+7)^0,f,c
  2183  000EDA  2A12               	incf	___aomod@counter^0,f,c
  2184  000EDC                     l1884:
  2185  000EDC  AE11               	btfss	(___aomod@divisor+7)^0,7,c
  2186  000EDE  EF73  F007         	goto	u1311
  2187  000EE2  EF75  F007         	goto	u1310
  2188  000EE6                     u1311:
  2189  000EE6  EF64  F007         	goto	l1882
  2190  000EEA                     u1310:
  2191  000EEA                     l1886:
  2192  000EEA  500A               	movf	___aomod@divisor^0,w,c
  2193  000EEC  5C02               	subwf	___aomod@dividend^0,w,c
  2194  000EEE  500B               	movf	(___aomod@divisor+1)^0,w,c
  2195  000EF0  5803               	subwfb	(___aomod@dividend+1)^0,w,c
  2196  000EF2  500C               	movf	(___aomod@divisor+2)^0,w,c
  2197  000EF4  5804               	subwfb	(___aomod@dividend+2)^0,w,c
  2198  000EF6  500D               	movf	(___aomod@divisor+3)^0,w,c
  2199  000EF8  5805               	subwfb	(___aomod@dividend+3)^0,w,c
  2200  000EFA  500E               	movf	(___aomod@divisor+4)^0,w,c
  2201  000EFC  5806               	subwfb	(___aomod@dividend+4)^0,w,c
  2202  000EFE  500F               	movf	(___aomod@divisor+5)^0,w,c
  2203  000F00  5807               	subwfb	(___aomod@dividend+5)^0,w,c
  2204  000F02  5010               	movf	(___aomod@divisor+6)^0,w,c
  2205  000F04  5808               	subwfb	(___aomod@dividend+6)^0,w,c
  2206  000F06  5011               	movf	(___aomod@divisor+7)^0,w,c
  2207  000F08  5809               	subwfb	(___aomod@dividend+7)^0,w,c
  2208  000F0A  A0D8               	btfss	status,0,c
  2209  000F0C  EF8A  F007         	goto	u1321
  2210  000F10  EF8C  F007         	goto	u1320
  2211  000F14                     u1321:
  2212  000F14  EF9C  F007         	goto	l1890
  2213  000F18                     u1320:
  2214  000F18  500A               	movf	___aomod@divisor^0,w,c
  2215  000F1A  5E02               	subwf	___aomod@dividend^0,f,c
  2216  000F1C  500B               	movf	(___aomod@divisor+1)^0,w,c
  2217  000F1E  5A03               	subwfb	(___aomod@dividend+1)^0,f,c
  2218  000F20  500C               	movf	(___aomod@divisor+2)^0,w,c
  2219  000F22  5A04               	subwfb	(___aomod@dividend+2)^0,f,c
  2220  000F24  500D               	movf	(___aomod@divisor+3)^0,w,c
  2221  000F26  5A05               	subwfb	(___aomod@dividend+3)^0,f,c
  2222  000F28  500E               	movf	(___aomod@divisor+4)^0,w,c
  2223  000F2A  5A06               	subwfb	(___aomod@dividend+4)^0,f,c
  2224  000F2C  500F               	movf	(___aomod@divisor+5)^0,w,c
  2225  000F2E  5A07               	subwfb	(___aomod@dividend+5)^0,f,c
  2226  000F30  5010               	movf	(___aomod@divisor+6)^0,w,c
  2227  000F32  5A08               	subwfb	(___aomod@dividend+6)^0,f,c
  2228  000F34  5011               	movf	(___aomod@divisor+7)^0,w,c
  2229  000F36  5A09               	subwfb	(___aomod@dividend+7)^0,f,c
  2230  000F38                     l1890:
  2231  000F38  90D8               	bcf	status,0,c
  2232  000F3A  3211               	rrcf	(___aomod@divisor+7)^0,f,c
  2233  000F3C  3210               	rrcf	(___aomod@divisor+6)^0,f,c
  2234  000F3E  320F               	rrcf	(___aomod@divisor+5)^0,f,c
  2235  000F40  320E               	rrcf	(___aomod@divisor+4)^0,f,c
  2236  000F42  320D               	rrcf	(___aomod@divisor+3)^0,f,c
  2237  000F44  320C               	rrcf	(___aomod@divisor+2)^0,f,c
  2238  000F46  320B               	rrcf	(___aomod@divisor+1)^0,f,c
  2239  000F48  320A               	rrcf	___aomod@divisor^0,f,c
  2240  000F4A  2E12               	decfsz	___aomod@counter^0,f,c
  2241  000F4C  EF75  F007         	goto	l1886
  2242  000F50                     l1894:
  2243  000F50  5013               	movf	___aomod@sign^0,w,c
  2244  000F52  B4D8               	btfsc	status,2,c
  2245  000F54  EFAE  F007         	goto	u1331
  2246  000F58  EFB0  F007         	goto	u1330
  2247  000F5C                     u1331:
  2248  000F5C  EFC0  F007         	goto	l1898
  2249  000F60                     u1330:
  2250  000F60  1E09               	comf	(___aomod@dividend+7)^0,f,c
  2251  000F62  1E08               	comf	(___aomod@dividend+6)^0,f,c
  2252  000F64  1E07               	comf	(___aomod@dividend+5)^0,f,c
  2253  000F66  1E06               	comf	(___aomod@dividend+4)^0,f,c
  2254  000F68  1E05               	comf	(___aomod@dividend+3)^0,f,c
  2255  000F6A  1E04               	comf	(___aomod@dividend+2)^0,f,c
  2256  000F6C  1E03               	comf	(___aomod@dividend+1)^0,f,c
  2257  000F6E  6C02               	negf	___aomod@dividend^0,c
  2258  000F70  0E00               	movlw	0
  2259  000F72  2203               	addwfc	(___aomod@dividend+1)^0,f,c
  2260  000F74  2204               	addwfc	(___aomod@dividend+2)^0,f,c
  2261  000F76  2205               	addwfc	(___aomod@dividend+3)^0,f,c
  2262  000F78  2206               	addwfc	(___aomod@dividend+4)^0,f,c
  2263  000F7A  2207               	addwfc	(___aomod@dividend+5)^0,f,c
  2264  000F7C  2208               	addwfc	(___aomod@dividend+6)^0,f,c
  2265  000F7E  2209               	addwfc	(___aomod@dividend+7)^0,f,c
  2266  000F80                     l1898:
  2267  000F80  C002  F002         	movff	___aomod@dividend,?___aomod
  2268  000F84  C003  F003         	movff	___aomod@dividend+1,?___aomod+1
  2269  000F88  C004  F004         	movff	___aomod@dividend+2,?___aomod+2
  2270  000F8C  C005  F005         	movff	___aomod@dividend+3,?___aomod+3
  2271  000F90  C006  F006         	movff	___aomod@dividend+4,?___aomod+4
  2272  000F94  C007  F007         	movff	___aomod@dividend+5,?___aomod+5
  2273  000F98  C008  F008         	movff	___aomod@dividend+6,?___aomod+6
  2274  000F9C  C009  F009         	movff	___aomod@dividend+7,?___aomod+7
  2275  000FA0  0012               	return		;funcret
  2276  000FA2                     __end_of___aomod:
  2277                           	callstack 0
  2278                           
  2279 ;; *************** function ___aodiv *****************
  2280 ;; Defined at:
  2281 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\aodiv.c"
  2282 ;; Parameters:    Size  Location     Type
  2283 ;;  dividend        8    1[COMRAM] long long 
  2284 ;;  divisor         8    9[COMRAM] long long 
  2285 ;; Auto vars:     Size  Location     Type
  2286 ;;  quotient        8   19[COMRAM] long long 
  2287 ;;  sign            1   18[COMRAM] unsigned char 
  2288 ;;  counter         1   17[COMRAM] unsigned char 
  2289 ;; Return value:  Size  Location     Type
  2290 ;;                  8    1[COMRAM] long long 
  2291 ;; Registers used:
  2292 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2293 ;; Tracked objects:
  2294 ;;		On entry : 0/0
  2295 ;;		On exit  : 0/0
  2296 ;;		Unchanged: 0/0
  2297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2298 ;;      Params:        16       0       0       0       0       0       0       0       0
  2299 ;;      Locals:        10       0       0       0       0       0       0       0       0
  2300 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2301 ;;      Totals:        26       0       0       0       0       0       0       0       0
  2302 ;;Total ram usage:       26 bytes
  2303 ;; Hardware stack levels used: 1
  2304 ;; Hardware stack levels required when called: 1
  2305 ;; This function calls:
  2306 ;;		Nothing
  2307 ;; This function is called by:
  2308 ;;		_dtoa
  2309 ;; This function uses a non-reentrant model
  2310 ;;
  2311                           
  2312                           	psect	text12
  2313  000CB6                     __ptext12:
  2314                           	callstack 0
  2315  000CB6                     ___aodiv:
  2316                           	callstack 25
  2317  000CB6  0E00               	movlw	0
  2318  000CB8  6E13               	movwf	___aodiv@sign^0,c
  2319  000CBA  BE11               	btfsc	(___aodiv@divisor+7)^0,7,c
  2320  000CBC  EF64  F006         	goto	u1210
  2321  000CC0  EF62  F006         	goto	u1211
  2322  000CC4                     u1211:
  2323  000CC4  EF76  F006         	goto	l1830
  2324  000CC8                     u1210:
  2325  000CC8  1E11               	comf	(___aodiv@divisor+7)^0,f,c
  2326  000CCA  1E10               	comf	(___aodiv@divisor+6)^0,f,c
  2327  000CCC  1E0F               	comf	(___aodiv@divisor+5)^0,f,c
  2328  000CCE  1E0E               	comf	(___aodiv@divisor+4)^0,f,c
  2329  000CD0  1E0D               	comf	(___aodiv@divisor+3)^0,f,c
  2330  000CD2  1E0C               	comf	(___aodiv@divisor+2)^0,f,c
  2331  000CD4  1E0B               	comf	(___aodiv@divisor+1)^0,f,c
  2332  000CD6  6C0A               	negf	___aodiv@divisor^0,c
  2333  000CD8  0E00               	movlw	0
  2334  000CDA  220B               	addwfc	(___aodiv@divisor+1)^0,f,c
  2335  000CDC  220C               	addwfc	(___aodiv@divisor+2)^0,f,c
  2336  000CDE  220D               	addwfc	(___aodiv@divisor+3)^0,f,c
  2337  000CE0  220E               	addwfc	(___aodiv@divisor+4)^0,f,c
  2338  000CE2  220F               	addwfc	(___aodiv@divisor+5)^0,f,c
  2339  000CE4  2210               	addwfc	(___aodiv@divisor+6)^0,f,c
  2340  000CE6  2211               	addwfc	(___aodiv@divisor+7)^0,f,c
  2341  000CE8  0E01               	movlw	1
  2342  000CEA  6E13               	movwf	___aodiv@sign^0,c
  2343  000CEC                     l1830:
  2344  000CEC  BE09               	btfsc	(___aodiv@dividend+7)^0,7,c
  2345  000CEE  EF7D  F006         	goto	u1220
  2346  000CF2  EF7B  F006         	goto	u1221
  2347  000CF6                     u1221:
  2348  000CF6  EF8F  F006         	goto	l1836
  2349  000CFA                     u1220:
  2350  000CFA  1E09               	comf	(___aodiv@dividend+7)^0,f,c
  2351  000CFC  1E08               	comf	(___aodiv@dividend+6)^0,f,c
  2352  000CFE  1E07               	comf	(___aodiv@dividend+5)^0,f,c
  2353  000D00  1E06               	comf	(___aodiv@dividend+4)^0,f,c
  2354  000D02  1E05               	comf	(___aodiv@dividend+3)^0,f,c
  2355  000D04  1E04               	comf	(___aodiv@dividend+2)^0,f,c
  2356  000D06  1E03               	comf	(___aodiv@dividend+1)^0,f,c
  2357  000D08  6C02               	negf	___aodiv@dividend^0,c
  2358  000D0A  0E00               	movlw	0
  2359  000D0C  2203               	addwfc	(___aodiv@dividend+1)^0,f,c
  2360  000D0E  2204               	addwfc	(___aodiv@dividend+2)^0,f,c
  2361  000D10  2205               	addwfc	(___aodiv@dividend+3)^0,f,c
  2362  000D12  2206               	addwfc	(___aodiv@dividend+4)^0,f,c
  2363  000D14  2207               	addwfc	(___aodiv@dividend+5)^0,f,c
  2364  000D16  2208               	addwfc	(___aodiv@dividend+6)^0,f,c
  2365  000D18  2209               	addwfc	(___aodiv@dividend+7)^0,f,c
  2366  000D1A  0E01               	movlw	1
  2367  000D1C  1A13               	xorwf	___aodiv@sign^0,f,c
  2368  000D1E                     l1836:
  2369  000D1E  EE20  F014         	lfsr	2,___aodiv@quotient
  2370  000D22  0E07               	movlw	7
  2371  000D24                     u1231:
  2372  000D24  6ADE               	clrf	postinc2,c
  2373  000D26  06E8               	decf	wreg,f,c
  2374  000D28  E2FD               	bc	u1231
  2375  000D2A  500A               	movf	___aodiv@divisor^0,w,c
  2376  000D2C  100B               	iorwf	(___aodiv@divisor+1)^0,w,c
  2377  000D2E  100C               	iorwf	(___aodiv@divisor+2)^0,w,c
  2378  000D30  100D               	iorwf	(___aodiv@divisor+3)^0,w,c
  2379  000D32  100E               	iorwf	(___aodiv@divisor+4)^0,w,c
  2380  000D34  100F               	iorwf	(___aodiv@divisor+5)^0,w,c
  2381  000D36  1010               	iorwf	(___aodiv@divisor+6)^0,w,c
  2382  000D38  1011               	iorwf	(___aodiv@divisor+7)^0,w,c
  2383  000D3A  B4D8               	btfsc	status,2,c
  2384  000D3C  EFA2  F006         	goto	u1241
  2385  000D40  EFA4  F006         	goto	u1240
  2386  000D44                     u1241:
  2387  000D44  EFF6  F006         	goto	l1858
  2388  000D48                     u1240:
  2389  000D48  0E01               	movlw	1
  2390  000D4A  6E12               	movwf	___aodiv@counter^0,c
  2391  000D4C  EFB2  F006         	goto	l1844
  2392  000D50                     l1842:
  2393  000D50  90D8               	bcf	status,0,c
  2394  000D52  360A               	rlcf	___aodiv@divisor^0,f,c
  2395  000D54  360B               	rlcf	(___aodiv@divisor+1)^0,f,c
  2396  000D56  360C               	rlcf	(___aodiv@divisor+2)^0,f,c
  2397  000D58  360D               	rlcf	(___aodiv@divisor+3)^0,f,c
  2398  000D5A  360E               	rlcf	(___aodiv@divisor+4)^0,f,c
  2399  000D5C  360F               	rlcf	(___aodiv@divisor+5)^0,f,c
  2400  000D5E  3610               	rlcf	(___aodiv@divisor+6)^0,f,c
  2401  000D60  3611               	rlcf	(___aodiv@divisor+7)^0,f,c
  2402  000D62  2A12               	incf	___aodiv@counter^0,f,c
  2403  000D64                     l1844:
  2404  000D64  AE11               	btfss	(___aodiv@divisor+7)^0,7,c
  2405  000D66  EFB7  F006         	goto	u1251
  2406  000D6A  EFB9  F006         	goto	u1250
  2407  000D6E                     u1251:
  2408  000D6E  EFA8  F006         	goto	l1842
  2409  000D72                     u1250:
  2410  000D72                     l1846:
  2411  000D72  90D8               	bcf	status,0,c
  2412  000D74  3614               	rlcf	___aodiv@quotient^0,f,c
  2413  000D76  3615               	rlcf	(___aodiv@quotient+1)^0,f,c
  2414  000D78  3616               	rlcf	(___aodiv@quotient+2)^0,f,c
  2415  000D7A  3617               	rlcf	(___aodiv@quotient+3)^0,f,c
  2416  000D7C  3618               	rlcf	(___aodiv@quotient+4)^0,f,c
  2417  000D7E  3619               	rlcf	(___aodiv@quotient+5)^0,f,c
  2418  000D80  361A               	rlcf	(___aodiv@quotient+6)^0,f,c
  2419  000D82  361B               	rlcf	(___aodiv@quotient+7)^0,f,c
  2420  000D84  500A               	movf	___aodiv@divisor^0,w,c
  2421  000D86  5C02               	subwf	___aodiv@dividend^0,w,c
  2422  000D88  500B               	movf	(___aodiv@divisor+1)^0,w,c
  2423  000D8A  5803               	subwfb	(___aodiv@dividend+1)^0,w,c
  2424  000D8C  500C               	movf	(___aodiv@divisor+2)^0,w,c
  2425  000D8E  5804               	subwfb	(___aodiv@dividend+2)^0,w,c
  2426  000D90  500D               	movf	(___aodiv@divisor+3)^0,w,c
  2427  000D92  5805               	subwfb	(___aodiv@dividend+3)^0,w,c
  2428  000D94  500E               	movf	(___aodiv@divisor+4)^0,w,c
  2429  000D96  5806               	subwfb	(___aodiv@dividend+4)^0,w,c
  2430  000D98  500F               	movf	(___aodiv@divisor+5)^0,w,c
  2431  000D9A  5807               	subwfb	(___aodiv@dividend+5)^0,w,c
  2432  000D9C  5010               	movf	(___aodiv@divisor+6)^0,w,c
  2433  000D9E  5808               	subwfb	(___aodiv@dividend+6)^0,w,c
  2434  000DA0  5011               	movf	(___aodiv@divisor+7)^0,w,c
  2435  000DA2  5809               	subwfb	(___aodiv@dividend+7)^0,w,c
  2436  000DA4  A0D8               	btfss	status,0,c
  2437  000DA6  EFD7  F006         	goto	u1261
  2438  000DAA  EFD9  F006         	goto	u1260
  2439  000DAE                     u1261:
  2440  000DAE  EFEA  F006         	goto	l1854
  2441  000DB2                     u1260:
  2442  000DB2  500A               	movf	___aodiv@divisor^0,w,c
  2443  000DB4  5E02               	subwf	___aodiv@dividend^0,f,c
  2444  000DB6  500B               	movf	(___aodiv@divisor+1)^0,w,c
  2445  000DB8  5A03               	subwfb	(___aodiv@dividend+1)^0,f,c
  2446  000DBA  500C               	movf	(___aodiv@divisor+2)^0,w,c
  2447  000DBC  5A04               	subwfb	(___aodiv@dividend+2)^0,f,c
  2448  000DBE  500D               	movf	(___aodiv@divisor+3)^0,w,c
  2449  000DC0  5A05               	subwfb	(___aodiv@dividend+3)^0,f,c
  2450  000DC2  500E               	movf	(___aodiv@divisor+4)^0,w,c
  2451  000DC4  5A06               	subwfb	(___aodiv@dividend+4)^0,f,c
  2452  000DC6  500F               	movf	(___aodiv@divisor+5)^0,w,c
  2453  000DC8  5A07               	subwfb	(___aodiv@dividend+5)^0,f,c
  2454  000DCA  5010               	movf	(___aodiv@divisor+6)^0,w,c
  2455  000DCC  5A08               	subwfb	(___aodiv@dividend+6)^0,f,c
  2456  000DCE  5011               	movf	(___aodiv@divisor+7)^0,w,c
  2457  000DD0  5A09               	subwfb	(___aodiv@dividend+7)^0,f,c
  2458  000DD2  8014               	bsf	___aodiv@quotient^0,0,c
  2459  000DD4                     l1854:
  2460  000DD4  90D8               	bcf	status,0,c
  2461  000DD6  3211               	rrcf	(___aodiv@divisor+7)^0,f,c
  2462  000DD8  3210               	rrcf	(___aodiv@divisor+6)^0,f,c
  2463  000DDA  320F               	rrcf	(___aodiv@divisor+5)^0,f,c
  2464  000DDC  320E               	rrcf	(___aodiv@divisor+4)^0,f,c
  2465  000DDE  320D               	rrcf	(___aodiv@divisor+3)^0,f,c
  2466  000DE0  320C               	rrcf	(___aodiv@divisor+2)^0,f,c
  2467  000DE2  320B               	rrcf	(___aodiv@divisor+1)^0,f,c
  2468  000DE4  320A               	rrcf	___aodiv@divisor^0,f,c
  2469  000DE6  2E12               	decfsz	___aodiv@counter^0,f,c
  2470  000DE8  EFB9  F006         	goto	l1846
  2471  000DEC                     l1858:
  2472  000DEC  5013               	movf	___aodiv@sign^0,w,c
  2473  000DEE  B4D8               	btfsc	status,2,c
  2474  000DF0  EFFC  F006         	goto	u1271
  2475  000DF4  EFFE  F006         	goto	u1270
  2476  000DF8                     u1271:
  2477  000DF8  EF0E  F007         	goto	l1862
  2478  000DFC                     u1270:
  2479  000DFC  1E1B               	comf	(___aodiv@quotient+7)^0,f,c
  2480  000DFE  1E1A               	comf	(___aodiv@quotient+6)^0,f,c
  2481  000E00  1E19               	comf	(___aodiv@quotient+5)^0,f,c
  2482  000E02  1E18               	comf	(___aodiv@quotient+4)^0,f,c
  2483  000E04  1E17               	comf	(___aodiv@quotient+3)^0,f,c
  2484  000E06  1E16               	comf	(___aodiv@quotient+2)^0,f,c
  2485  000E08  1E15               	comf	(___aodiv@quotient+1)^0,f,c
  2486  000E0A  6C14               	negf	___aodiv@quotient^0,c
  2487  000E0C  0E00               	movlw	0
  2488  000E0E  2215               	addwfc	(___aodiv@quotient+1)^0,f,c
  2489  000E10  2216               	addwfc	(___aodiv@quotient+2)^0,f,c
  2490  000E12  2217               	addwfc	(___aodiv@quotient+3)^0,f,c
  2491  000E14  2218               	addwfc	(___aodiv@quotient+4)^0,f,c
  2492  000E16  2219               	addwfc	(___aodiv@quotient+5)^0,f,c
  2493  000E18  221A               	addwfc	(___aodiv@quotient+6)^0,f,c
  2494  000E1A  221B               	addwfc	(___aodiv@quotient+7)^0,f,c
  2495  000E1C                     l1862:
  2496  000E1C  C014  F002         	movff	___aodiv@quotient,?___aodiv
  2497  000E20  C015  F003         	movff	___aodiv@quotient+1,?___aodiv+1
  2498  000E24  C016  F004         	movff	___aodiv@quotient+2,?___aodiv+2
  2499  000E28  C017  F005         	movff	___aodiv@quotient+3,?___aodiv+3
  2500  000E2C  C018  F006         	movff	___aodiv@quotient+4,?___aodiv+4
  2501  000E30  C019  F007         	movff	___aodiv@quotient+5,?___aodiv+5
  2502  000E34  C01A  F008         	movff	___aodiv@quotient+6,?___aodiv+6
  2503  000E38  C01B  F009         	movff	___aodiv@quotient+7,?___aodiv+7
  2504  000E3C  0012               	return		;funcret
  2505  000E3E                     __end_of___aodiv:
  2506                           	callstack 0
  2507                           
  2508 ;; *************** function _setupTmr0 *****************
  2509 ;; Defined at:
  2510 ;;		line 44 in file "main.c"
  2511 ;; Parameters:    Size  Location     Type
  2512 ;;		None
  2513 ;; Auto vars:     Size  Location     Type
  2514 ;;		None
  2515 ;; Return value:  Size  Location     Type
  2516 ;;                  1    wreg      void 
  2517 ;; Registers used:
  2518 ;;		wreg, status,2
  2519 ;; Tracked objects:
  2520 ;;		On entry : 0/0
  2521 ;;		On exit  : 0/0
  2522 ;;		Unchanged: 0/0
  2523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2524 ;;      Params:         0       0       0       0       0       0       0       0       0
  2525 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2526 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2527 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2528 ;;Total ram usage:        0 bytes
  2529 ;; Hardware stack levels used: 1
  2530 ;; Hardware stack levels required when called: 1
  2531 ;; This function calls:
  2532 ;;		Nothing
  2533 ;; This function is called by:
  2534 ;;		_main
  2535 ;; This function uses a non-reentrant model
  2536 ;;
  2537                           
  2538                           	psect	text13
  2539  001624                     __ptext13:
  2540                           	callstack 0
  2541  001624                     _setupTmr0:
  2542                           	callstack 29
  2543  001624                     
  2544                           ;main.c: 45:   T08BIT = 0;
  2545  001624  9CD5               	bcf	4053,6,c	;volatile
  2546                           
  2547                           ;main.c: 46:   T0CS = 0;
  2548  001626  9AD5               	bcf	4053,5,c	;volatile
  2549                           
  2550                           ;main.c: 47:   PSA = 1;
  2551  001628  86D5               	bsf	4053,3,c	;volatile
  2552  00162A                     
  2553                           ;main.c: 48:   TMR0H = 0x3C;
  2554  00162A  0E3C               	movlw	60
  2555  00162C  6ED7               	movwf	215,c	;volatile
  2556                           
  2557                           ;main.c: 49:   TMR0L = 0xAF;
  2558  00162E  0EAF               	movlw	175
  2559  001630  6ED6               	movwf	214,c	;volatile
  2560  001632                     
  2561                           ;main.c: 50:   TMR0ON = 1;
  2562  001632  8ED5               	bsf	4053,7,c	;volatile
  2563  001634  0012               	return		;funcret
  2564  001636                     __end_of_setupTmr0:
  2565                           	callstack 0
  2566                           
  2567 ;; *************** function _setupInt *****************
  2568 ;; Defined at:
  2569 ;;		line 38 in file "main.c"
  2570 ;; Parameters:    Size  Location     Type
  2571 ;;		None
  2572 ;; Auto vars:     Size  Location     Type
  2573 ;;		None
  2574 ;; Return value:  Size  Location     Type
  2575 ;;                  1    wreg      void 
  2576 ;; Registers used:
  2577 ;;		None
  2578 ;; Tracked objects:
  2579 ;;		On entry : 0/0
  2580 ;;		On exit  : 0/0
  2581 ;;		Unchanged: 0/0
  2582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2583 ;;      Params:         0       0       0       0       0       0       0       0       0
  2584 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2585 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2586 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2587 ;;Total ram usage:        0 bytes
  2588 ;; Hardware stack levels used: 1
  2589 ;; Hardware stack levels required when called: 1
  2590 ;; This function calls:
  2591 ;;		Nothing
  2592 ;; This function is called by:
  2593 ;;		_main
  2594 ;; This function uses a non-reentrant model
  2595 ;;
  2596                           
  2597                           	psect	text14
  2598  001636                     __ptext14:
  2599                           	callstack 0
  2600  001636                     _setupInt:
  2601                           	callstack 29
  2602  001636                     
  2603                           ;main.c: 39:   GIE = 1;
  2604  001636  8EF2               	bsf	4082,7,c	;volatile
  2605                           
  2606                           ;main.c: 40:   INT0IE = 1;
  2607  001638  88F2               	bsf	4082,4,c	;volatile
  2608                           
  2609                           ;main.c: 41:   INT0IF = 0;
  2610  00163A  92F2               	bcf	4082,1,c	;volatile
  2611                           
  2612                           ;main.c: 42:   INTEDG0 = 0;
  2613  00163C  9CF1               	bcf	4081,6,c	;volatile
  2614  00163E  0012               	return		;funcret
  2615  001640                     __end_of_setupInt:
  2616                           	callstack 0
  2617                           
  2618 ;; *************** function ___wmul *****************
  2619 ;; Defined at:
  2620 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\Umul16.c"
  2621 ;; Parameters:    Size  Location     Type
  2622 ;;  multiplier      2    1[COMRAM] unsigned int 
  2623 ;;  multiplicand    2    3[COMRAM] unsigned int 
  2624 ;; Auto vars:     Size  Location     Type
  2625 ;;  product         2    5[COMRAM] unsigned int 
  2626 ;; Return value:  Size  Location     Type
  2627 ;;                  2    1[COMRAM] unsigned int 
  2628 ;; Registers used:
  2629 ;;		wreg, status,2, status,0, prodl, prodh
  2630 ;; Tracked objects:
  2631 ;;		On entry : 0/0
  2632 ;;		On exit  : 0/0
  2633 ;;		Unchanged: 0/0
  2634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2635 ;;      Params:         4       0       0       0       0       0       0       0       0
  2636 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2637 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2638 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2639 ;;Total ram usage:        6 bytes
  2640 ;; Hardware stack levels used: 1
  2641 ;; Hardware stack levels required when called: 1
  2642 ;; This function calls:
  2643 ;;		Nothing
  2644 ;; This function is called by:
  2645 ;;		_main
  2646 ;; This function uses a non-reentrant model
  2647 ;;
  2648                           
  2649                           	psect	text15
  2650  0015DE                     __ptext15:
  2651                           	callstack 0
  2652  0015DE                     ___wmul:
  2653                           	callstack 29
  2654  0015DE  5002               	movf	___wmul@multiplier^0,w,c
  2655  0015E0  0204               	mulwf	___wmul@multiplicand^0,c
  2656  0015E2  CFF3 F006          	movff	prodl,___wmul@product
  2657  0015E6  CFF4 F007          	movff	prodh,___wmul@product+1
  2658  0015EA  5002               	movf	___wmul@multiplier^0,w,c
  2659  0015EC  0205               	mulwf	(___wmul@multiplicand+1)^0,c
  2660  0015EE  50F3               	movf	243,w,c
  2661  0015F0  2607               	addwf	(___wmul@product+1)^0,f,c
  2662  0015F2  5003               	movf	(___wmul@multiplier+1)^0,w,c
  2663  0015F4  0204               	mulwf	___wmul@multiplicand^0,c
  2664  0015F6  50F3               	movf	243,w,c
  2665  0015F8  2607               	addwf	(___wmul@product+1)^0,f,c
  2666  0015FA  C006  F002         	movff	___wmul@product,?___wmul
  2667  0015FE  C007  F003         	movff	___wmul@product+1,?___wmul+1
  2668  001602  0012               	return		;funcret
  2669  001604                     __end_of___wmul:
  2670                           	callstack 0
  2671                           
  2672 ;; *************** function _Lcd_Write_String *****************
  2673 ;; Defined at:
  2674 ;;		line 88 in file "./lcd.h"
  2675 ;; Parameters:    Size  Location     Type
  2676 ;;  a               2    5[COMRAM] PTR unsigned char 
  2677 ;;		 -> linha2(16), linha1(16), 
  2678 ;; Auto vars:     Size  Location     Type
  2679 ;;  i               2    7[COMRAM] int 
  2680 ;; Return value:  Size  Location     Type
  2681 ;;                  1    wreg      void 
  2682 ;; Registers used:
  2683 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2684 ;; Tracked objects:
  2685 ;;		On entry : 0/0
  2686 ;;		On exit  : 0/0
  2687 ;;		Unchanged: 0/0
  2688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2689 ;;      Params:         2       0       0       0       0       0       0       0       0
  2690 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2691 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2692 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2693 ;;Total ram usage:        4 bytes
  2694 ;; Hardware stack levels used: 1
  2695 ;; Hardware stack levels required when called: 3
  2696 ;; This function calls:
  2697 ;;		_Lcd_Write_Char
  2698 ;; This function is called by:
  2699 ;;		_main
  2700 ;; This function uses a non-reentrant model
  2701 ;;
  2702                           
  2703                           	psect	text16
  2704  001530                     __ptext16:
  2705                           	callstack 0
  2706  001530                     _Lcd_Write_String:
  2707                           	callstack 27
  2708  001530                     
  2709                           ;./lcd.h: 89:     int i;;./lcd.h: 90:     for (i = 0; a[i] != '\0'; i++)
  2710  001530  0E00               	movlw	0
  2711  001532  6E09               	movwf	(Lcd_Write_String@i+1)^0,c
  2712  001534  0E00               	movlw	0
  2713  001536  6E08               	movwf	Lcd_Write_String@i^0,c
  2714  001538  EFA9  F00A         	goto	l1706
  2715  00153C                     l1702:
  2716                           
  2717                           ;./lcd.h: 91:         Lcd_Write_Char(a[i]);
  2718  00153C  5008               	movf	Lcd_Write_String@i^0,w,c
  2719  00153E  2406               	addwf	Lcd_Write_String@a^0,w,c
  2720  001540  6ED9               	movwf	fsr2l,c
  2721  001542  5009               	movf	(Lcd_Write_String@i+1)^0,w,c
  2722  001544  2007               	addwfc	(Lcd_Write_String@a+1)^0,w,c
  2723  001546  6EDA               	movwf	fsr2h,c
  2724  001548  50DF               	movf	indf2,w,c
  2725  00154A  ECB8  F00A         	call	_Lcd_Write_Char
  2726  00154E  4A08               	infsnz	Lcd_Write_String@i^0,f,c
  2727  001550  2A09               	incf	(Lcd_Write_String@i+1)^0,f,c
  2728  001552                     l1706:
  2729  001552  5008               	movf	Lcd_Write_String@i^0,w,c
  2730  001554  2406               	addwf	Lcd_Write_String@a^0,w,c
  2731  001556  6ED9               	movwf	fsr2l,c
  2732  001558  5009               	movf	(Lcd_Write_String@i+1)^0,w,c
  2733  00155A  2007               	addwfc	(Lcd_Write_String@a+1)^0,w,c
  2734  00155C  6EDA               	movwf	fsr2h,c
  2735  00155E  50DF               	movf	indf2,w,c
  2736  001560  A4D8               	btfss	status,2,c
  2737  001562  EFB5  F00A         	goto	u1081
  2738  001566  EFB7  F00A         	goto	u1080
  2739  00156A                     u1081:
  2740  00156A  EF9E  F00A         	goto	l1702
  2741  00156E                     u1080:
  2742  00156E  0012               	return		;funcret
  2743  001570                     __end_of_Lcd_Write_String:
  2744                           	callstack 0
  2745                           
  2746 ;; *************** function _Lcd_Write_Char *****************
  2747 ;; Defined at:
  2748 ;;		line 73 in file "./lcd.h"
  2749 ;; Parameters:    Size  Location     Type
  2750 ;;  a               1    wreg     unsigned char 
  2751 ;; Auto vars:     Size  Location     Type
  2752 ;;  a               1    4[COMRAM] unsigned char 
  2753 ;;  y               1    3[COMRAM] unsigned char 
  2754 ;;  temp            1    2[COMRAM] unsigned char 
  2755 ;; Return value:  Size  Location     Type
  2756 ;;                  1    wreg      void 
  2757 ;; Registers used:
  2758 ;;		wreg, status,2, status,0, cstack
  2759 ;; Tracked objects:
  2760 ;;		On entry : 0/0
  2761 ;;		On exit  : 0/0
  2762 ;;		Unchanged: 0/0
  2763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2764 ;;      Params:         0       0       0       0       0       0       0       0       0
  2765 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2766 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2767 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2768 ;;Total ram usage:        3 bytes
  2769 ;; Hardware stack levels used: 1
  2770 ;; Hardware stack levels required when called: 2
  2771 ;; This function calls:
  2772 ;;		_Lcd_Port
  2773 ;; This function is called by:
  2774 ;;		_Lcd_Write_String
  2775 ;; This function uses a non-reentrant model
  2776 ;;
  2777                           
  2778                           	psect	text17
  2779  001570                     __ptext17:
  2780                           	callstack 0
  2781  001570                     _Lcd_Write_Char:
  2782                           	callstack 27
  2783                           
  2784                           ;incstack = 0
  2785                           ;Lcd_Write_Char@a stored from wreg
  2786  001570  6E05               	movwf	Lcd_Write_Char@a^0,c
  2787  001572                     
  2788                           ;./lcd.h: 74:     char temp, y;;./lcd.h: 75:     temp = a & 0x0F;
  2789  001572  5005               	movf	Lcd_Write_Char@a^0,w,c
  2790  001574  0B0F               	andlw	15
  2791  001576  6E03               	movwf	Lcd_Write_Char@temp^0,c
  2792                           
  2793                           ;./lcd.h: 76:     y = a & 0xF0;
  2794  001578  5005               	movf	Lcd_Write_Char@a^0,w,c
  2795  00157A  0BF0               	andlw	240
  2796  00157C  6E04               	movwf	Lcd_Write_Char@y^0,c
  2797  00157E                     
  2798                           ;./lcd.h: 77:     LATD2 = 1;
  2799  00157E  848C               	bsf	3980,2,c	;volatile
  2800  001580                     
  2801                           ;./lcd.h: 78:     Lcd_Port(y >> 4);
  2802  001580  3804               	swapf	Lcd_Write_Char@y^0,w,c
  2803  001582  0B0F               	andlw	15
  2804  001584  ECDE  F009         	call	_Lcd_Port
  2805  001588                     
  2806                           ;./lcd.h: 79:     LATD3 = 1;
  2807  001588  868C               	bsf	3980,3,c	;volatile
  2808  00158A                     
  2809                           ;./lcd.h: 80:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  2810  00158A  0E0D               	movlw	13
  2811  00158C                     u1607:
  2812  00158C  2EE8               	decfsz	wreg,f,c
  2813  00158E  D7FE               	bra	u1607
  2814  001590  F000               	nop	
  2815  001592                     
  2816                           ;./lcd.h: 81:     LATD3 = 0;
  2817  001592  968C               	bcf	3980,3,c	;volatile
  2818  001594                     
  2819                           ;./lcd.h: 82:     Lcd_Port(temp);
  2820  001594  5003               	movf	Lcd_Write_Char@temp^0,w,c
  2821  001596  ECDE  F009         	call	_Lcd_Port
  2822  00159A                     
  2823                           ;./lcd.h: 83:     LATD3 = 1;
  2824  00159A  868C               	bsf	3980,3,c	;volatile
  2825  00159C                     
  2826                           ;./lcd.h: 84:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  2827  00159C  0E0D               	movlw	13
  2828  00159E                     u1617:
  2829  00159E  2EE8               	decfsz	wreg,f,c
  2830  0015A0  D7FE               	bra	u1617
  2831  0015A2  F000               	nop	
  2832  0015A4                     
  2833                           ;./lcd.h: 85:     LATD3 = 0;
  2834  0015A4  968C               	bcf	3980,3,c	;volatile
  2835  0015A6  0012               	return		;funcret
  2836  0015A8                     __end_of_Lcd_Write_Char:
  2837                           	callstack 0
  2838                           
  2839 ;; *************** function _Lcd_Set_Cursor *****************
  2840 ;; Defined at:
  2841 ;;		line 38 in file "./lcd.h"
  2842 ;; Parameters:    Size  Location     Type
  2843 ;;  a               1    wreg     unsigned char 
  2844 ;;  b               1    4[COMRAM] unsigned char 
  2845 ;; Auto vars:     Size  Location     Type
  2846 ;;  a               1    5[COMRAM] unsigned char 
  2847 ;;  temp            1    8[COMRAM] unsigned char 
  2848 ;;  y               1    7[COMRAM] unsigned char 
  2849 ;;  z               1    6[COMRAM] unsigned char 
  2850 ;; Return value:  Size  Location     Type
  2851 ;;                  1    wreg      void 
  2852 ;; Registers used:
  2853 ;;		wreg, status,2, status,0, cstack
  2854 ;; Tracked objects:
  2855 ;;		On entry : 0/0
  2856 ;;		On exit  : 0/0
  2857 ;;		Unchanged: 0/0
  2858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2859 ;;      Params:         1       0       0       0       0       0       0       0       0
  2860 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2861 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2862 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2863 ;;Total ram usage:        5 bytes
  2864 ;; Hardware stack levels used: 1
  2865 ;; Hardware stack levels required when called: 3
  2866 ;; This function calls:
  2867 ;;		_Lcd_Cmd
  2868 ;; This function is called by:
  2869 ;;		_main
  2870 ;; This function uses a non-reentrant model
  2871 ;;
  2872                           
  2873                           	psect	text18
  2874  0012F4                     __ptext18:
  2875                           	callstack 0
  2876  0012F4                     _Lcd_Set_Cursor:
  2877                           	callstack 27
  2878                           
  2879                           ;incstack = 0
  2880                           ;Lcd_Set_Cursor@a stored from wreg
  2881  0012F4  6E06               	movwf	Lcd_Set_Cursor@a^0,c
  2882  0012F6                     
  2883                           ;./lcd.h: 39:     char temp, z, y;;./lcd.h: 40:     if (a == 1) {
  2884  0012F6  0406               	decf	Lcd_Set_Cursor@a^0,w,c
  2885  0012F8  A4D8               	btfss	status,2,c
  2886  0012FA  EF81  F009         	goto	u1061
  2887  0012FE  EF83  F009         	goto	u1060
  2888  001302                     u1061:
  2889  001302  EF94  F009         	goto	l1664
  2890  001306                     u1060:
  2891  001306                     
  2892                           ;./lcd.h: 41:         temp = 0x80 + b - 1;
  2893  001306  5005               	movf	Lcd_Set_Cursor@b^0,w,c
  2894  001308  0F7F               	addlw	127
  2895  00130A  6E09               	movwf	Lcd_Set_Cursor@temp^0,c
  2896                           
  2897                           ;./lcd.h: 42:         z = temp >> 4;
  2898  00130C  3809               	swapf	Lcd_Set_Cursor@temp^0,w,c
  2899  00130E  0B0F               	andlw	15
  2900  001310  6E07               	movwf	Lcd_Set_Cursor@z^0,c
  2901                           
  2902                           ;./lcd.h: 43:         y = temp & 0x0F;
  2903  001312  5009               	movf	Lcd_Set_Cursor@temp^0,w,c
  2904  001314  0B0F               	andlw	15
  2905  001316  6E08               	movwf	Lcd_Set_Cursor@y^0,c
  2906  001318                     
  2907                           ;./lcd.h: 44:         Lcd_Cmd(z);
  2908  001318  5007               	movf	Lcd_Set_Cursor@z^0,w,c
  2909  00131A  EC02  F00B         	call	_Lcd_Cmd
  2910  00131E                     
  2911                           ;./lcd.h: 45:         Lcd_Cmd(y);
  2912  00131E  5008               	movf	Lcd_Set_Cursor@y^0,w,c
  2913  001320  EC02  F00B         	call	_Lcd_Cmd
  2914                           
  2915                           ;./lcd.h: 46:     } else if (a == 2) {
  2916  001324  EFAC  F009         	goto	l77
  2917  001328                     l1664:
  2918  001328  0E02               	movlw	2
  2919  00132A  1806               	xorwf	Lcd_Set_Cursor@a^0,w,c
  2920  00132C  A4D8               	btfss	status,2,c
  2921  00132E  EF9B  F009         	goto	u1071
  2922  001332  EF9D  F009         	goto	u1070
  2923  001336                     u1071:
  2924  001336  EFAC  F009         	goto	l77
  2925  00133A                     u1070:
  2926  00133A                     
  2927                           ;./lcd.h: 47:         temp = 0xC0 + b - 1;
  2928  00133A  5005               	movf	Lcd_Set_Cursor@b^0,w,c
  2929  00133C  0FBF               	addlw	191
  2930  00133E  6E09               	movwf	Lcd_Set_Cursor@temp^0,c
  2931                           
  2932                           ;./lcd.h: 48:         z = temp >> 4;
  2933  001340  3809               	swapf	Lcd_Set_Cursor@temp^0,w,c
  2934  001342  0B0F               	andlw	15
  2935  001344  6E07               	movwf	Lcd_Set_Cursor@z^0,c
  2936                           
  2937                           ;./lcd.h: 49:         y = temp & 0x0F;
  2938  001346  5009               	movf	Lcd_Set_Cursor@temp^0,w,c
  2939  001348  0B0F               	andlw	15
  2940  00134A  6E08               	movwf	Lcd_Set_Cursor@y^0,c
  2941  00134C                     
  2942                           ;./lcd.h: 50:         Lcd_Cmd(z);
  2943  00134C  5007               	movf	Lcd_Set_Cursor@z^0,w,c
  2944  00134E  EC02  F00B         	call	_Lcd_Cmd
  2945  001352                     
  2946                           ;./lcd.h: 51:         Lcd_Cmd(y);
  2947  001352  5008               	movf	Lcd_Set_Cursor@y^0,w,c
  2948  001354  EC02  F00B         	call	_Lcd_Cmd
  2949  001358                     l77:
  2950  001358  0012               	return		;funcret
  2951  00135A                     __end_of_Lcd_Set_Cursor:
  2952                           	callstack 0
  2953                           
  2954 ;; *************** function _Lcd_Init *****************
  2955 ;; Defined at:
  2956 ;;		line 55 in file "./lcd.h"
  2957 ;; Parameters:    Size  Location     Type
  2958 ;;		None
  2959 ;; Auto vars:     Size  Location     Type
  2960 ;;		None
  2961 ;; Return value:  Size  Location     Type
  2962 ;;                  1    wreg      void 
  2963 ;; Registers used:
  2964 ;;		wreg, status,2, cstack
  2965 ;; Tracked objects:
  2966 ;;		On entry : 0/0
  2967 ;;		On exit  : 0/0
  2968 ;;		Unchanged: 0/0
  2969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2970 ;;      Params:         0       0       0       0       0       0       0       0       0
  2971 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2972 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2973 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2974 ;;Total ram usage:        1 bytes
  2975 ;; Hardware stack levels used: 1
  2976 ;; Hardware stack levels required when called: 3
  2977 ;; This function calls:
  2978 ;;		_Lcd_Cmd
  2979 ;;		_Lcd_Port
  2980 ;; This function is called by:
  2981 ;;		_main
  2982 ;; This function uses a non-reentrant model
  2983 ;;
  2984                           
  2985                           	psect	text19
  2986  001282                     __ptext19:
  2987                           	callstack 0
  2988  001282                     _Lcd_Init:
  2989                           	callstack 27
  2990  001282                     
  2991                           ;./lcd.h: 56:     Lcd_Port(0x00);
  2992  001282  0E00               	movlw	0
  2993  001284  ECDE  F009         	call	_Lcd_Port
  2994  001288                     
  2995                           ;./lcd.h: 57:     _delay((unsigned long)((20)*(4000000/4000.0)));
  2996  001288  0E1A               	movlw	26
  2997  00128A  6E05               	movwf	??_Lcd_Init^0,c
  2998  00128C  0EF8               	movlw	248
  2999  00128E                     u1627:
  3000  00128E  2EE8               	decfsz	wreg,f,c
  3001  001290  D7FE               	bra	u1627
  3002  001292  2E05               	decfsz	??_Lcd_Init^0,f,c
  3003  001294  D7FC               	bra	u1627
  3004  001296  D000               	nop2	
  3005  001298                     
  3006                           ;./lcd.h: 58:     Lcd_Cmd(0x03);
  3007  001298  0E03               	movlw	3
  3008  00129A  EC02  F00B         	call	_Lcd_Cmd
  3009  00129E                     
  3010                           ;./lcd.h: 59:     _delay((unsigned long)((5)*(4000000/4000.0)));
  3011  00129E  0E07               	movlw	7
  3012  0012A0  6E05               	movwf	??_Lcd_Init^0,c
  3013  0012A2  0E7D               	movlw	125
  3014  0012A4                     u1637:
  3015  0012A4  2EE8               	decfsz	wreg,f,c
  3016  0012A6  D7FE               	bra	u1637
  3017  0012A8  2E05               	decfsz	??_Lcd_Init^0,f,c
  3018  0012AA  D7FC               	bra	u1637
  3019  0012AC  F000               	nop	
  3020  0012AE                     
  3021                           ;./lcd.h: 60:     Lcd_Cmd(0x03);
  3022  0012AE  0E03               	movlw	3
  3023  0012B0  EC02  F00B         	call	_Lcd_Cmd
  3024  0012B4                     
  3025                           ;./lcd.h: 61:     _delay((unsigned long)((11)*(4000000/4000.0)));
  3026  0012B4  0E0F               	movlw	15
  3027  0012B6  6E05               	movwf	??_Lcd_Init^0,c
  3028  0012B8  0E48               	movlw	72
  3029  0012BA                     u1647:
  3030  0012BA  2EE8               	decfsz	wreg,f,c
  3031  0012BC  D7FE               	bra	u1647
  3032  0012BE  2E05               	decfsz	??_Lcd_Init^0,f,c
  3033  0012C0  D7FC               	bra	u1647
  3034  0012C2                     
  3035                           ;./lcd.h: 62:     Lcd_Cmd(0x03);
  3036  0012C2  0E03               	movlw	3
  3037  0012C4  EC02  F00B         	call	_Lcd_Cmd
  3038  0012C8                     
  3039                           ;./lcd.h: 64:     Lcd_Cmd(0x02);
  3040  0012C8  0E02               	movlw	2
  3041  0012CA  EC02  F00B         	call	_Lcd_Cmd
  3042  0012CE                     
  3043                           ;./lcd.h: 65:     Lcd_Cmd(0x02);
  3044  0012CE  0E02               	movlw	2
  3045  0012D0  EC02  F00B         	call	_Lcd_Cmd
  3046  0012D4                     
  3047                           ;./lcd.h: 66:     Lcd_Cmd(0x08);
  3048  0012D4  0E08               	movlw	8
  3049  0012D6  EC02  F00B         	call	_Lcd_Cmd
  3050  0012DA                     
  3051                           ;./lcd.h: 67:     Lcd_Cmd(0x00);
  3052  0012DA  0E00               	movlw	0
  3053  0012DC  EC02  F00B         	call	_Lcd_Cmd
  3054  0012E0                     
  3055                           ;./lcd.h: 68:     Lcd_Cmd(0x0C);
  3056  0012E0  0E0C               	movlw	12
  3057  0012E2  EC02  F00B         	call	_Lcd_Cmd
  3058  0012E6                     
  3059                           ;./lcd.h: 69:     Lcd_Cmd(0x00);
  3060  0012E6  0E00               	movlw	0
  3061  0012E8  EC02  F00B         	call	_Lcd_Cmd
  3062  0012EC                     
  3063                           ;./lcd.h: 70:     Lcd_Cmd(0x06);
  3064  0012EC  0E06               	movlw	6
  3065  0012EE  EC02  F00B         	call	_Lcd_Cmd
  3066  0012F2  0012               	return		;funcret
  3067  0012F4                     __end_of_Lcd_Init:
  3068                           	callstack 0
  3069                           
  3070 ;; *************** function _Lcd_Cmd *****************
  3071 ;; Defined at:
  3072 ;;		line 25 in file "./lcd.h"
  3073 ;; Parameters:    Size  Location     Type
  3074 ;;  a               1    wreg     unsigned char 
  3075 ;; Auto vars:     Size  Location     Type
  3076 ;;  a               1    3[COMRAM] unsigned char 
  3077 ;; Return value:  Size  Location     Type
  3078 ;;                  1    wreg      void 
  3079 ;; Registers used:
  3080 ;;		wreg, status,2, cstack
  3081 ;; Tracked objects:
  3082 ;;		On entry : 0/0
  3083 ;;		On exit  : 0/0
  3084 ;;		Unchanged: 0/0
  3085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3086 ;;      Params:         0       0       0       0       0       0       0       0       0
  3087 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3088 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3089 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3090 ;;Total ram usage:        2 bytes
  3091 ;; Hardware stack levels used: 1
  3092 ;; Hardware stack levels required when called: 2
  3093 ;; This function calls:
  3094 ;;		_Lcd_Port
  3095 ;; This function is called by:
  3096 ;;		_Lcd_Set_Cursor
  3097 ;;		_Lcd_Init
  3098 ;;		_Lcd_Clear
  3099 ;;		_Lcd_Shift_Right
  3100 ;;		_Lcd_Shift_Left
  3101 ;; This function uses a non-reentrant model
  3102 ;;
  3103                           
  3104                           	psect	text20
  3105  001604                     __ptext20:
  3106                           	callstack 0
  3107  001604                     _Lcd_Cmd:
  3108                           	callstack 27
  3109                           
  3110                           ;incstack = 0
  3111                           ;Lcd_Cmd@a stored from wreg
  3112  001604  6E04               	movwf	Lcd_Cmd@a^0,c
  3113  001606                     
  3114                           ;./lcd.h: 26:     LATD2 = 0;
  3115  001606  948C               	bcf	3980,2,c	;volatile
  3116  001608                     
  3117                           ;./lcd.h: 27:     Lcd_Port(a);
  3118  001608  5004               	movf	Lcd_Cmd@a^0,w,c
  3119  00160A  ECDE  F009         	call	_Lcd_Port
  3120  00160E                     
  3121                           ;./lcd.h: 28:     LATD3 = 1;
  3122  00160E  868C               	bsf	3980,3,c	;volatile
  3123  001610                     
  3124                           ;./lcd.h: 29:     _delay((unsigned long)((4)*(4000000/4000.0)));
  3125  001610  0E06               	movlw	6
  3126  001612  6E03               	movwf	??_Lcd_Cmd^0,c
  3127  001614  0E30               	movlw	48
  3128  001616                     u1657:
  3129  001616  2EE8               	decfsz	wreg,f,c
  3130  001618  D7FE               	bra	u1657
  3131  00161A  2E03               	decfsz	??_Lcd_Cmd^0,f,c
  3132  00161C  D7FC               	bra	u1657
  3133  00161E  D000               	nop2	
  3134  001620                     
  3135                           ;./lcd.h: 30:     LATD3 = 0;
  3136  001620  968C               	bcf	3980,3,c	;volatile
  3137  001622  0012               	return		;funcret
  3138  001624                     __end_of_Lcd_Cmd:
  3139                           	callstack 0
  3140                           
  3141 ;; *************** function _Lcd_Port *****************
  3142 ;; Defined at:
  3143 ;;		line 3 in file "./lcd.h"
  3144 ;; Parameters:    Size  Location     Type
  3145 ;;  a               1    wreg     unsigned char 
  3146 ;; Auto vars:     Size  Location     Type
  3147 ;;  a               1    1[COMRAM] unsigned char 
  3148 ;; Return value:  Size  Location     Type
  3149 ;;                  1    wreg      void 
  3150 ;; Registers used:
  3151 ;;		wreg
  3152 ;; Tracked objects:
  3153 ;;		On entry : 0/0
  3154 ;;		On exit  : 0/0
  3155 ;;		Unchanged: 0/0
  3156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3157 ;;      Params:         0       0       0       0       0       0       0       0       0
  3158 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3159 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3160 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3161 ;;Total ram usage:        1 bytes
  3162 ;; Hardware stack levels used: 1
  3163 ;; Hardware stack levels required when called: 1
  3164 ;; This function calls:
  3165 ;;		Nothing
  3166 ;; This function is called by:
  3167 ;;		_Lcd_Cmd
  3168 ;;		_Lcd_Init
  3169 ;;		_Lcd_Write_Char
  3170 ;; This function uses a non-reentrant model
  3171 ;;
  3172                           
  3173                           	psect	text21
  3174  0013BC                     __ptext21:
  3175                           	callstack 0
  3176  0013BC                     _Lcd_Port:
  3177                           	callstack 27
  3178                           
  3179                           ;incstack = 0
  3180                           ;Lcd_Port@a stored from wreg
  3181  0013BC  6E02               	movwf	Lcd_Port@a^0,c
  3182  0013BE                     
  3183                           ;./lcd.h: 4:     if (a & 1)
  3184  0013BE  A002               	btfss	Lcd_Port@a^0,0,c
  3185  0013C0  EFE4  F009         	goto	u971
  3186  0013C4  EFE6  F009         	goto	u970
  3187  0013C8                     u971:
  3188  0013C8  EFE9  F009         	goto	l57
  3189  0013CC                     u970:
  3190  0013CC                     
  3191                           ;./lcd.h: 5:         LATD4 = 1;
  3192  0013CC  888C               	bsf	3980,4,c	;volatile
  3193  0013CE  EFEA  F009         	goto	l1564
  3194  0013D2                     l57:
  3195                           
  3196                           ;./lcd.h: 7:         LATD4 = 0;
  3197  0013D2  988C               	bcf	3980,4,c	;volatile
  3198  0013D4                     l1564:
  3199                           
  3200                           ;./lcd.h: 9:     if (a & 2)
  3201  0013D4  A202               	btfss	Lcd_Port@a^0,1,c
  3202  0013D6  EFEF  F009         	goto	u981
  3203  0013DA  EFF1  F009         	goto	u980
  3204  0013DE                     u981:
  3205  0013DE  EFF4  F009         	goto	l59
  3206  0013E2                     u980:
  3207  0013E2                     
  3208                           ;./lcd.h: 10:         LATD5 = 1;
  3209  0013E2  8A8C               	bsf	3980,5,c	;volatile
  3210  0013E4  EFF5  F009         	goto	l1568
  3211  0013E8                     l59:
  3212                           
  3213                           ;./lcd.h: 12:         LATD5 = 0;
  3214  0013E8  9A8C               	bcf	3980,5,c	;volatile
  3215  0013EA                     l1568:
  3216                           
  3217                           ;./lcd.h: 14:     if (a & 4)
  3218  0013EA  A402               	btfss	Lcd_Port@a^0,2,c
  3219  0013EC  EFFA  F009         	goto	u991
  3220  0013F0  EFFC  F009         	goto	u990
  3221  0013F4                     u991:
  3222  0013F4  EFFF  F009         	goto	l61
  3223  0013F8                     u990:
  3224  0013F8                     
  3225                           ;./lcd.h: 15:         LATD6 = 1;
  3226  0013F8  8C8C               	bsf	3980,6,c	;volatile
  3227  0013FA  EF00  F00A         	goto	l1572
  3228  0013FE                     l61:
  3229                           
  3230                           ;./lcd.h: 17:         LATD6 = 0;
  3231  0013FE  9C8C               	bcf	3980,6,c	;volatile
  3232  001400                     l1572:
  3233                           
  3234                           ;./lcd.h: 19:     if (a & 8)
  3235  001400  A602               	btfss	Lcd_Port@a^0,3,c
  3236  001402  EF05  F00A         	goto	u1001
  3237  001406  EF07  F00A         	goto	u1000
  3238  00140A                     u1001:
  3239  00140A  EF0A  F00A         	goto	l63
  3240  00140E                     u1000:
  3241  00140E                     
  3242                           ;./lcd.h: 20:         LATD7 = 1;
  3243  00140E  8E8C               	bsf	3980,7,c	;volatile
  3244  001410  EF0B  F00A         	goto	l65
  3245  001414                     l63:
  3246                           
  3247                           ;./lcd.h: 22:         LATD7 = 0;
  3248  001414  9E8C               	bcf	3980,7,c	;volatile
  3249  001416                     l65:
  3250  001416  0012               	return		;funcret
  3251  001418                     __end_of_Lcd_Port:
  3252                           	callstack 0
  3253                           
  3254 ;; *************** function _interrupcao *****************
  3255 ;; Defined at:
  3256 ;;		line 53 in file "main.c"
  3257 ;; Parameters:    Size  Location     Type
  3258 ;;		None
  3259 ;; Auto vars:     Size  Location     Type
  3260 ;;		None
  3261 ;; Return value:  Size  Location     Type
  3262 ;;                  1    wreg      void 
  3263 ;; Registers used:
  3264 ;;		wreg, status,2, status,0
  3265 ;; Tracked objects:
  3266 ;;		On entry : 0/0
  3267 ;;		On exit  : 0/0
  3268 ;;		Unchanged: 0/0
  3269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3270 ;;      Params:         0       0       0       0       0       0       0       0       0
  3271 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3272 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3273 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3274 ;;Total ram usage:        1 bytes
  3275 ;; Hardware stack levels used: 1
  3276 ;; This function calls:
  3277 ;;		Nothing
  3278 ;; This function is called by:
  3279 ;;		Interrupt level 2
  3280 ;; This function uses a non-reentrant model
  3281 ;;
  3282                           
  3283                           	psect	intcode
  3284  000008                     __pintcode:
  3285                           	callstack 0
  3286  000008                     _interrupcao:
  3287                           	callstack 22
  3288                           
  3289                           ;incstack = 0
  3290  000008  825D               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  3291  00000A  EDF7  F008         	call	int_func,f	;refresh shadow registers
  3292                           
  3293                           	psect	intcode_body
  3294  0011EE                     __pintcode_body:
  3295                           	callstack 22
  3296  0011EE                     int_func:
  3297                           	callstack 22
  3298  0011EE  0006               	pop		; remove dummy address from shadow register refresh
  3299  0011F0                     
  3300                           ;main.c: 55:   if (TMR0IF) {
  3301  0011F0  A4F2               	btfss	4082,2,c	;volatile
  3302  0011F2  EFFD  F008         	goto	i2u109_41
  3303  0011F6  EFFF  F008         	goto	i2u109_40
  3304  0011FA                     i2u109_41:
  3305  0011FA  EF2D  F009         	goto	i2l1758
  3306  0011FE                     i2u109_40:
  3307  0011FE                     
  3308                           ;main.c: 56:     if (cont >= periodo) {
  3309  0011FE  0100               	movlb	0	; () banked
  3310  001200  5166               	movf	_periodo& (0+255),w,b
  3311  001202  5DC0               	subwf	_cont& (0+255),w,b
  3312  001204  51C1               	movf	(_cont+1)& (0+255),w,b
  3313  001206  0A80               	xorlw	128
  3314  001208  6E01               	movwf	??_interrupcao^0,c
  3315  00120A  5167               	movf	(_periodo+1)& (0+255),w,b
  3316  00120C  0A80               	xorlw	128
  3317  00120E  5801               	subwfb	??_interrupcao^0,w,c
  3318  001210  A0D8               	btfss	status,0,c
  3319  001212  EF0D  F009         	goto	i2u110_41
  3320  001216  EF0F  F009         	goto	i2u110_40
  3321  00121A                     i2u110_41:
  3322  00121A  EF25  F009         	goto	i2l1748
  3323  00121E                     i2u110_40:
  3324  00121E                     
  3325                           ; BSR set to: 0
  3326                           ;main.c: 57:       LATDbits.LATD0 = !LATDbits.LATD0;
  3327  00121E  A08C               	btfss	140,0,c	;volatile
  3328  001220  EF14  F009         	goto	i2u111_41
  3329  001224  EF18  F009         	goto	i2u111_40
  3330  001228                     i2u111_41:
  3331  001228  6A01               	clrf	??_interrupcao^0,c
  3332  00122A  2A01               	incf	??_interrupcao^0,f,c
  3333  00122C  EF19  F009         	goto	i2u112_48
  3334  001230                     i2u111_40:
  3335  001230  6A01               	clrf	??_interrupcao^0,c
  3336  001232                     i2u112_48:
  3337  001232  508C               	movf	140,w,c	;volatile
  3338  001234  1801               	xorwf	??_interrupcao^0,w,c
  3339  001236  0BFE               	andlw	-2
  3340  001238  1801               	xorwf	??_interrupcao^0,w,c
  3341  00123A  6E8C               	movwf	140,c	;volatile
  3342  00123C                     
  3343                           ;main.c: 58:       cont = 1;
  3344  00123C  0E00               	movlw	0
  3345  00123E  0100               	movlb	0	; () banked
  3346  001240  6FC1               	movwf	(_cont+1)& (0+255),b
  3347  001242  0E01               	movlw	1
  3348  001244  6FC0               	movwf	_cont& (0+255),b
  3349                           
  3350                           ;main.c: 59:     } else {
  3351  001246  EF27  F009         	goto	i2l1750
  3352  00124A                     i2l1748:
  3353                           
  3354                           ; BSR set to: 0
  3355                           ;main.c: 60:       cont++;
  3356  00124A  4BC0               	infsnz	_cont& (0+255),f,b
  3357  00124C  2BC1               	incf	(_cont+1)& (0+255),f,b
  3358  00124E                     i2l1750:
  3359                           
  3360                           ; BSR set to: 0
  3361                           ;main.c: 62:     TMR0H = 0x3C;
  3362  00124E  0E3C               	movlw	60
  3363  001250  6ED7               	movwf	215,c	;volatile
  3364  001252                     
  3365                           ; BSR set to: 0
  3366                           ;main.c: 63:     TMR0L = 0xAF;
  3367  001252  0EAF               	movlw	175
  3368  001254  6ED6               	movwf	214,c	;volatile
  3369  001256                     
  3370                           ; BSR set to: 0
  3371                           ;main.c: 64:     TMR0IF = 0;
  3372  001256  94F2               	bcf	4082,2,c	;volatile
  3373  001258                     
  3374                           ; BSR set to: 0
  3375                           ;main.c: 65:     TMR0IE = 1;
  3376  001258  8AF2               	bsf	4082,5,c	;volatile
  3377  00125A                     i2l1758:
  3378                           
  3379                           ;main.c: 68:   if (INT0IF) {
  3380  00125A  A2F2               	btfss	4082,1,c	;volatile
  3381  00125C  EF32  F009         	goto	i2u113_41
  3382  001260  EF34  F009         	goto	i2u113_40
  3383  001264                     i2u113_41:
  3384  001264  EF3F  F009         	goto	i2l130
  3385  001268                     i2u113_40:
  3386  001268                     
  3387                           ;main.c: 70:     tecla = PORTE + 1;
  3388  001268  0E01               	movlw	1
  3389  00126A  2484               	addwf	132,w,c	;volatile
  3390  00126C  6E5B               	movwf	_tecla^0,c
  3391  00126E  6A5C               	clrf	(_tecla+1)^0,c
  3392  001270  0E00               	movlw	0
  3393  001272  225C               	addwfc	(_tecla+1)^0,f,c
  3394  001274                     
  3395                           ;main.c: 71:     periodo = tecla;
  3396  001274  C05B  F066         	movff	_tecla,_periodo
  3397  001278  C05C  F067         	movff	_tecla+1,_periodo+1
  3398  00127C                     
  3399                           ;main.c: 72:     INT0IF = 0;
  3400  00127C  92F2               	bcf	4082,1,c	;volatile
  3401  00127E                     i2l130:
  3402  00127E  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3403  001280  0011               	retfie		f
  3404  001282                     __end_of_interrupcao:
  3405                           	callstack 0
  3406                           
  3407                           	psect	rparam
  3408  0000                     
  3409                           	psect	temp
  3410  00005D                     btemp:
  3411                           	callstack 0
  3412  00005D                     	ds	1
  3413  0000                     int$flags	set	btemp
  3414  0000                     wtemp8	set	btemp+1
  3415  0000                     ttemp5	set	btemp+1
  3416  0000                     ttemp6	set	btemp+4
  3417  0000                     ttemp7	set	btemp+8
  3418                           
  3419                           	psect	idloc
  3420                           
  3421                           ;Config register IDLOC0 @ 0x200000
  3422                           ;	unspecified, using default values
  3423  200000                     	org	2097152
  3424  200000  FF                 	db	255
  3425                           
  3426                           ;Config register IDLOC1 @ 0x200001
  3427                           ;	unspecified, using default values
  3428  200001                     	org	2097153
  3429  200001  FF                 	db	255
  3430                           
  3431                           ;Config register IDLOC2 @ 0x200002
  3432                           ;	unspecified, using default values
  3433  200002                     	org	2097154
  3434  200002  FF                 	db	255
  3435                           
  3436                           ;Config register IDLOC3 @ 0x200003
  3437                           ;	unspecified, using default values
  3438  200003                     	org	2097155
  3439  200003  FF                 	db	255
  3440                           
  3441                           ;Config register IDLOC4 @ 0x200004
  3442                           ;	unspecified, using default values
  3443  200004                     	org	2097156
  3444  200004  FF                 	db	255
  3445                           
  3446                           ;Config register IDLOC5 @ 0x200005
  3447                           ;	unspecified, using default values
  3448  200005                     	org	2097157
  3449  200005  FF                 	db	255
  3450                           
  3451                           ;Config register IDLOC6 @ 0x200006
  3452                           ;	unspecified, using default values
  3453  200006                     	org	2097158
  3454  200006  FF                 	db	255
  3455                           
  3456                           ;Config register IDLOC7 @ 0x200007
  3457                           ;	unspecified, using default values
  3458  200007                     	org	2097159
  3459  200007  FF                 	db	255
  3460                           
  3461                           	psect	config
  3462                           
  3463                           ;Config register CONFIG1L @ 0x300000
  3464                           ;	unspecified, using default values
  3465                           ;	PLL Prescaler Selection bits
  3466                           ;	PLLDIV = 0x0, unprogrammed default
  3467                           ;	System Clock Postscaler Selection bits
  3468                           ;	CPUDIV = 0x0, unprogrammed default
  3469                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  3470                           ;	USBDIV = 0x0, unprogrammed default
  3471  300000                     	org	3145728
  3472  300000  00                 	db	0
  3473                           
  3474                           ;Config register CONFIG1H @ 0x300001
  3475                           ;	Oscillator Selection bits
  3476                           ;	FOSC = INTOSC_EC, Internal oscillator, CLKO function on RA6, EC used by USB (INTCKO)
  3477                           ;	Fail-Safe Clock Monitor Enable bit
  3478                           ;	FCMEN = 0x0, unprogrammed default
  3479                           ;	Internal/External Oscillator Switchover bit
  3480                           ;	IESO = 0x0, unprogrammed default
  3481  300001                     	org	3145729
  3482  300001  09                 	db	9
  3483                           
  3484                           ;Config register CONFIG2L @ 0x300002
  3485                           ;	unspecified, using default values
  3486                           ;	Power-up Timer Enable bit
  3487                           ;	PWRT = 0x1, unprogrammed default
  3488                           ;	Brown-out Reset Enable bits
  3489                           ;	BOR = 0x3, unprogrammed default
  3490                           ;	Brown-out Reset Voltage bits
  3491                           ;	BORV = 0x3, unprogrammed default
  3492                           ;	USB Voltage Regulator Enable bit
  3493                           ;	VREGEN = 0x0, unprogrammed default
  3494  300002                     	org	3145730
  3495  300002  1F                 	db	31
  3496                           
  3497                           ;Config register CONFIG2H @ 0x300003
  3498                           ;	Watchdog Timer Enable bit
  3499                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3500                           ;	Watchdog Timer Postscale Select bits
  3501                           ;	WDTPS = 0xF, unprogrammed default
  3502  300003                     	org	3145731
  3503  300003  1E                 	db	30
  3504                           
  3505                           ; Padding undefined space
  3506  300004                     	org	3145732
  3507  300004  FF                 	db	255
  3508                           
  3509                           ;Config register CONFIG3H @ 0x300005
  3510                           ;	CCP2 MUX bit
  3511                           ;	CCP2MX = 0x1, unprogrammed default
  3512                           ;	PORTB A/D Enable bit
  3513                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  3514                           ;	Low-Power Timer 1 Oscillator Enable bit
  3515                           ;	LPT1OSC = 0x0, unprogrammed default
  3516                           ;	MCLR Pin Enable bit
  3517                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR pin disabled
  3518  300005                     	org	3145733
  3519  300005  01                 	db	1
  3520                           
  3521                           ;Config register CONFIG4L @ 0x300006
  3522                           ;	unspecified, using default values
  3523                           ;	Stack Full/Underflow Reset Enable bit
  3524                           ;	STVREN = 0x1, unprogrammed default
  3525                           ;	Single-Supply ICSP Enable bit
  3526                           ;	LVP = 0x1, unprogrammed default
  3527                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  3528                           ;	ICPRT = 0x0, unprogrammed default
  3529                           ;	Extended Instruction Set Enable bit
  3530                           ;	XINST = 0x0, unprogrammed default
  3531                           ;	Background Debugger Enable bit
  3532                           ;	DEBUG = 0x1, unprogrammed default
  3533  300006                     	org	3145734
  3534  300006  85                 	db	133
  3535                           
  3536                           ; Padding undefined space
  3537  300007                     	org	3145735
  3538  300007  FF                 	db	255
  3539                           
  3540                           ;Config register CONFIG5L @ 0x300008
  3541                           ;	unspecified, using default values
  3542                           ;	Code Protection bit
  3543                           ;	CP0 = 0x1, unprogrammed default
  3544                           ;	Code Protection bit
  3545                           ;	CP1 = 0x1, unprogrammed default
  3546                           ;	Code Protection bit
  3547                           ;	CP2 = 0x1, unprogrammed default
  3548                           ;	Code Protection bit
  3549                           ;	CP3 = 0x1, unprogrammed default
  3550  300008                     	org	3145736
  3551  300008  0F                 	db	15
  3552                           
  3553                           ;Config register CONFIG5H @ 0x300009
  3554                           ;	unspecified, using default values
  3555                           ;	Boot Block Code Protection bit
  3556                           ;	CPB = 0x1, unprogrammed default
  3557                           ;	Data EEPROM Code Protection bit
  3558                           ;	CPD = 0x1, unprogrammed default
  3559  300009                     	org	3145737
  3560  300009  C0                 	db	192
  3561                           
  3562                           ;Config register CONFIG6L @ 0x30000A
  3563                           ;	unspecified, using default values
  3564                           ;	Write Protection bit
  3565                           ;	WRT0 = 0x1, unprogrammed default
  3566                           ;	Write Protection bit
  3567                           ;	WRT1 = 0x1, unprogrammed default
  3568                           ;	Write Protection bit
  3569                           ;	WRT2 = 0x1, unprogrammed default
  3570                           ;	Write Protection bit
  3571                           ;	WRT3 = 0x1, unprogrammed default
  3572  30000A                     	org	3145738
  3573  30000A  0F                 	db	15
  3574                           
  3575                           ;Config register CONFIG6H @ 0x30000B
  3576                           ;	unspecified, using default values
  3577                           ;	Configuration Register Write Protection bit
  3578                           ;	WRTC = 0x1, unprogrammed default
  3579                           ;	Boot Block Write Protection bit
  3580                           ;	WRTB = 0x1, unprogrammed default
  3581                           ;	Data EEPROM Write Protection bit
  3582                           ;	WRTD = 0x1, unprogrammed default
  3583  30000B                     	org	3145739
  3584  30000B  E0                 	db	224
  3585                           
  3586                           ;Config register CONFIG7L @ 0x30000C
  3587                           ;	unspecified, using default values
  3588                           ;	Table Read Protection bit
  3589                           ;	EBTR0 = 0x1, unprogrammed default
  3590                           ;	Table Read Protection bit
  3591                           ;	EBTR1 = 0x1, unprogrammed default
  3592                           ;	Table Read Protection bit
  3593                           ;	EBTR2 = 0x1, unprogrammed default
  3594                           ;	Table Read Protection bit
  3595                           ;	EBTR3 = 0x1, unprogrammed default
  3596  30000C                     	org	3145740
  3597  30000C  0F                 	db	15
  3598                           
  3599                           ;Config register CONFIG7H @ 0x30000D
  3600                           ;	unspecified, using default values
  3601                           ;	Boot Block Table Read Protection bit
  3602                           ;	EBTRB = 0x1, unprogrammed default
  3603  30000D                     	org	3145741
  3604  30000D  40                 	db	64
  3605                           tosu	equ	0xFFF
  3606                           tosh	equ	0xFFE
  3607                           tosl	equ	0xFFD
  3608                           stkptr	equ	0xFFC
  3609                           pclatu	equ	0xFFB
  3610                           pclath	equ	0xFFA
  3611                           pcl	equ	0xFF9
  3612                           tblptru	equ	0xFF8
  3613                           tblptrh	equ	0xFF7
  3614                           tblptrl	equ	0xFF6
  3615                           tablat	equ	0xFF5
  3616                           prodh	equ	0xFF4
  3617                           prodl	equ	0xFF3
  3618                           indf0	equ	0xFEF
  3619                           postinc0	equ	0xFEE
  3620                           postdec0	equ	0xFED
  3621                           preinc0	equ	0xFEC
  3622                           plusw0	equ	0xFEB
  3623                           fsr0h	equ	0xFEA
  3624                           fsr0l	equ	0xFE9
  3625                           wreg	equ	0xFE8
  3626                           indf1	equ	0xFE7
  3627                           postinc1	equ	0xFE6
  3628                           postdec1	equ	0xFE5
  3629                           preinc1	equ	0xFE4
  3630                           plusw1	equ	0xFE3
  3631                           fsr1h	equ	0xFE2
  3632                           fsr1l	equ	0xFE1
  3633                           bsr	equ	0xFE0
  3634                           indf2	equ	0xFDF
  3635                           postinc2	equ	0xFDE
  3636                           postdec2	equ	0xFDD
  3637                           preinc2	equ	0xFDC
  3638                           plusw2	equ	0xFDB
  3639                           fsr2h	equ	0xFDA
  3640                           fsr2l	equ	0xFD9
  3641                           status	equ	0xFD8

Data Sizes:
    Strings     33
    Constant    0
    Data        2
    BSS         86
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     86      92
    BANK0           160     16      98
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> linha2(BANK0[16]), linha1(BANK0[16]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_2(CODE[16]), STR_1(CODE[17]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 17
		 -> STR_2(CODE[16]), STR_1(CODE[17]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_2(CODE[16]), STR_1(CODE[17]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> linha2(BANK0[16]), linha1(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S634_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> linha2(BANK0[16]), linha1(BANK0[16]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> linha2(BANK0[16]), linha1(BANK0[16]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 16
		 -> linha2(BANK0[16]), linha1(BANK0[16]), 


Critical Paths under _main in COMRAM

    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _interrupcao in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->_vfprintf

Critical Paths under _interrupcao in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupcao in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupcao in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupcao in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupcao in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupcao in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interrupcao in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interrupcao in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   10150
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                             ___wmul
                           _setupInt
                          _setupTmr0
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6    8597
                                              2 BANK0     14     8      6
                             ___wmul (ARG)
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    7931
                                             80 COMRAM     6     0      6
                                              0 BANK0      2     2      0
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           42    36      6    7458
                                             64 COMRAM    16    10      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    5683
                                             28 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    3417
                                             17 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     220
                                              1 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1537
                                             10 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4    1037
                                              1 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     183
                                             19 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     613
                                              1 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     625
                                              1 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _setupTmr0                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupInt                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     403
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     4     2      2     420
                                              5 COMRAM     4     2      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     178
                                              2 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1     532
                                              4 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     198
                                              4 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0     110
                                              2 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _interrupcao                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   ___wmul
   _setupInt
   _setupTmr0
   _sprintf
     ___wmul (ARG)
     _vfprintf (ARG)
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
             _strlen
         _fputc

 _interrupcao (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     10      62       5       61.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     56      5C       1       97.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      BE      20        0.0%
DATA                 0      0      BE       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Sun Jun 06 11:43:14 2021

                       l61 13FE                         l63 1414                         l80 12F2  
                       l65 1416                         l57 13D2                         l59 13E8  
                       l83 15A6                         l68 1622                         l77 1358  
                       l89 156E        ___wmul@multiplicand 0004                        l121 1634  
                      l142 1602                        l118 163E                        l256 0E3C  
                      l269 0FA0                        l820 1468                        l911 106A  
                      l922 1642                        l850 10F2                        l852 112C  
                      l860 08CA                        l919 14AC                        l847 10B0  
                      l928 15DC                        l858 08C2                        l891 13B2  
                      l892 13BA                        l885 0CB4                        l878 0B00  
                      l896 1526                        l899 152E                        _GIE 007F97  
                      _PSA 007EAB                        u970 13CC                        u971 13C8  
                      u980 13E2                        u981 13DE                        u990 13F8  
                      u991 13F4                        _abs 14F0                        _pad 106C  
                      wreg 000FE8                       l2000 0B6E                       l2010 0C36  
                     l2002 0B92                       ?_abs 0014                       l2020 0C72  
                     l2012 0C44                       l2004 0BDA                       l2014 0C58  
                     l2008 0C12                       l2024 0C7E                       l2032 135A  
                     l2040 1418                       l2026 0CA2                       l2018 0C64  
                     l2034 1362                       l2042 142A                       l2036 1370  
                     l2044 1432                       l2060 1164                       l2052 112E  
                     l2038 1396                       l2046 143A                       l2070 11C8  
                     l2062 116E                       l2054 1146                       l2048 1456  
                     l2072 11D2                       l2064 117A                       l2056 114A  
                     l2074 11DE                       l2066 117E                       l2058 114E  
                     l1620 1608                       l1700 1530                       l2068 1198  
                     l1622 160E                       l1630 157E                       l1702 153C  
                     l1710 1624                       l1560 13BE                       l1624 1610  
                     l1640 1594                       l1632 1580                       l1704 154E  
                     l1712 162A                       l1800 1024                       l1570 13F8  
                     l1562 13CC                       l1626 1620                       l1618 1606  
                     l1642 159A                       l1634 1588                       l1706 1552  
                     l1730 15FA                       l1714 1632                       l1810 148C  
                     l1572 1400                       l1564 13D4                       l1660 1318  
                     l1644 159C                       l1636 158A                       l1628 1572  
                     l1708 1636                       l1804 146A                       l1812 15A8  
                     l1574 140E                       l1566 13E2                       l1670 1352  
                     l1662 131E                       l1646 15A4                       l1638 1592  
                     l1830 0CEC                       l1822 0CB6                       l1806 1476  
                     l1814 15B4                       l1910 10A8                       l1902 106C  
                     l1568 13EA                       l1680 12AE                       l1672 1282  
                     l1664 1328                       l1656 12F6                       l1728 15DE  
                     l1840 0D48                       l1832 0CFA                       l1824 0CBA  
                     l1808 1488                       l1816 15B8                       l1920 1114  
                     l1912 10BC                       l1904 107A                       l1690 12D4  
                     l1682 12B4                       l1674 1288                       l1666 133A  
                     l1658 1306                       l1850 0DB2                       l1842 0D50  
                     l1834 0D1A                       l1826 0CC8                       l1818 15D0  
                     l1914 10D0                       l1906 108E                       l1930 0844  
                     l1692 12DA                       l1684 12C2                       l1676 1298  
                     l1668 134C                       l1860 0DFC                       l1852 0DD2  
                     l1844 0D64                       l1836 0D1E                       l1828 0CE8  
                     l1924 14F0                       l1916 10D4                       l1908 109C  
                     l1940 08B6                       l1932 086C                       l1694 12E0  
                     l1686 12C8                       l1678 129E                       l1862 0E1C  
                     l1854 0DD4                       l1846 0D72                       l1838 0D2A  
                     l1870 0E50                       l1926 150A                       l1790 0FA2  
                     l1918 1100                       l1950 0900                       l1942 08D2  
                     l1934 088C                       l1696 12E6                       l1688 12CE  
                     l1856 0DE6                       l1848 0D84                       l1880 0EC0  
                     l1872 0E70                       l1792 0FB4                       l1960 099E  
                     l1952 090A                       l1944 08E4                       l1936 089A  
                     l1928 0824                       l1698 12EC                       l1858 0DEC  
                     l1890 0F38                       l1882 0EC8                       l1874 0E74  
                     l1866 0E3E                       l1794 0FC6                       l1970 0A6E  
                     l1954 0910                       l1962 0A02                       l1946 08F2  
                     l1938 089C                       l1892 0F4A                       l1884 0EDC  
                     l1876 0E82                       l1868 0E42                       l1796 0FD0  
                     l1980 0AB4                       l1964 0A1C                       l1972 0A7C  
                     l1956 0992                       l1948 08F8                       l1886 0EEA  
                     l1894 0F50                       l1878 0EA2                       l1798 0FEE  
                     l1982 0AC0                       l1974 0A8E                       l1966 0A3A  
                     l1958 0998                       l1990 0B02                       ?_pad 0012  
                     l1896 0F60                       l1888 0F18                       l1984 0AC8  
                     l1976 0A9C                       l1968 0A54                       l1992 0B26  
                     l1898 0F80                       l1978 0AA2                       l1986 0AD8  
                     l1994 0B34                       l1996 0B46                       l1998 0B4A  
                     STR_1 0801                       STR_2 0812                       u1000 140E  
                     u1001 140A                       _T0CS 007EAD                       u1200 15D0  
                     u1201 15CC                       u1210 0CC8                       u1211 0CC4  
                     u1060 1306                       u1220 0CFA                       u1300 0EC0  
                     u1061 1302                       u1221 0CF6                       u1301 0EBC  
                     u1070 133A                       u1310 0EEA                       u1150 0FB4  
                     u1071 1336                       u1231 0D24                       u1311 0EE6  
                     u1151 0FB0                       u1080 156E                       u1240 0D48  
                     u1320 0F18                       u1160 0FC6                       u1400 0856  
                     u1081 156A                       u1241 0D44                       u1321 0F14  
                     u1161 0FC2                       u1250 0D72                       u1330 0F60  
                     u1170 0FEE                       u1410 086C                       u1251 0D6E  
                     u1331 0F5C                       u1171 0FEA                       u1411 0868  
                     u1260 0DB2                       u1180 1024                       u1340 107A  
                     u1500 0A7C                       u1420 089A                       u1261 0DAE  
                     u1181 1020                       u1341 1076                       u1501 0A78  
                     u1421 0896                       u1270 0DFC                       u1190 14AC  
                     u1350 109C                       u1510 0A8E                       u1430 08B6  
                     u1271 0DF8                       u1191 14A8                       u1351 1098  
                     u1511 0A8A                       u1431 08B2                       u1280 0E50  
                     u1360 10F2                       u1520 0A9C                       u1440 08E4  
                     u1281 0E4C                       u1361 10EE                       u1521 0A98  
                     u1441 08E0                       u1290 0E82                       u1370 1100  
                     u1530 0AB4                       u1450 08F2                       u1291 0E7E  
                     u1371 10FC                       u1531 0AB0                       u1451 08EE  
                     u1380 150A                       u1460 0A1C                       u1540 0B26  
                     u1381 1506                       u1461 0A18                       u1541 0B22  
                     u1470 0A3A                       u1390 0854                       u1550 0B6E  
                     u1607 158C                       u1471 0A36                       u1391 084E  
                     u1551 0B6A                       u1480 0A54                       u1560 0B92  
                     u1617 159E                       u1481 0A50                       u1561 0B8E  
                     u1490 0A6E                       u1570 0C36                       u1627 128E  
                     u1491 0A6A                       u1571 0C32                       u1580 13B2  
                     u1637 12A4                       u1581 13AE                       u1590 1198  
                     u1647 12BA                       u1591 1194                       u1657 1616  
                     abs@a 0014          ?_Lcd_Write_String 0006                       _dbuf 0070  
                     _cont 00C0                       _main 112E                       _dtoa 0824  
                     _prec 0057                       _nout 0060                       pad@i 0019  
                     pad@p 0016                       fsr1h 000FE2                       fsr2h 000FDA  
                     indf2 000FDF                       fsr1l 000FE1                       pad@w 001B  
                     fsr2l 000FD9                       btemp 005D                       prodh 000FF4  
                     prodl 000FF3                       start 000E         ??_Lcd_Write_String 0008  
          __end_of_Lcd_Cmd 1624               ___param_bank 000000                      ??_abs 0016  
                    ??_pad 0018            __end_of___aodiv 0E3E                      ?_main 0001  
                    ?_dtoa 001D            __end_of___aomod 0FA2                      _LATD2 007C62  
                    _LATD3 007C63                      _LATD4 007C64                      _LATD5 007C65  
                    _LATD6 007C66                      _LATD7 007C67                      i2l130 127E  
             vfpfcnvrt@fmt 0043                      _TMR0H 000FD7                      _TMR0L 000FD6  
                    _PORTE 000F84    __size_of_Lcd_Set_Cursor 0066                      _TRISB 000F93  
                    _TRISD 000F95                      _TRISE 000F96                      _flags 0059  
                    _fputc 0FA2                      _fputs 146A                      _tecla 005B  
                    pad@fp 0012                      _width 0062                      _putch 1642  
                    dtoa@d 001F                      dtoa@i 003F                      dtoa@n 0037  
                    dtoa@p 0031                      dtoa@s 0035                      dtoa@w 0033  
                    tablat 000FF5                      ttemp5 005E                      ttemp6 0061  
                    ttemp7 0065                      status 000FD8                      wtemp8 005E  
          __end_of_sprintf 146A           __end_of_Lcd_Init 12F4           __end_of_Lcd_Port 1418  
          __initialization 14AE               ?_interrupcao 0001               __end_of_main 11EE  
             __end_of_dtoa 0B02                     ??_main 0057                     ??_dtoa 0027  
            __activetblptr 000001                     ?_fputc 0002                     ?_fputs 000B  
                   _T08BIT 007EAE                     ?_putch 0001                     _INT0IE 007F94  
                   _INT0IF 007F91                     i2l1740 11F0                     i2l1750 124E  
                   i2l1742 11FE                     i2l1760 1268                     i2l1752 1252  
                   i2l1744 121E                     i2l1762 1274                     i2l1754 1256  
                   i2l1746 123C                     i2l1764 127C                     i2l1756 1258  
                   i2l1748 124A                     i2l1758 125A                     _OSCCON 000FD3  
                ??_Lcd_Cmd 0003                     _TMR0IE 007F95                     _TMR0IF 007F92  
                   _TMR0ON 007EAF    __size_of_Lcd_Write_Char 0038               vfprintf@cfmt 00B0  
                ??___aodiv 0012                  ??___aomod 0012                     ___wmul 15DE  
                   _linha1 00A0                     _linha2 0090                     clear_0 14CC  
                   isa$std 000001                     pad@buf 0014                     dtoa@fp 001D  
                   _strlen 15A8                     fputc@c 0002                     fputs@c 000F  
                   fputs@i 0010                     fputs@s 000B               __mediumconst 0000  
         __end_of_setupInt 1640                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8                     putch@c 0001           __end_of_vfprintf 13BC  
                ??_sprintf 0057            Lcd_Set_Cursor@a 0006            Lcd_Set_Cursor@b 0005  
          Lcd_Set_Cursor@y 0008            Lcd_Set_Cursor@z 0007                 __accesstop 0060  
  __end_of__initialization 14DE              ___rparam_used 000001             __pcstackCOMRAM 0001  
             __pidataBANK0 1640              __end_of_fputc 106C              __end_of_fputs 14AE  
            __end_of_putch 1644             _Lcd_Set_Cursor 12F4                  ?_Lcd_Init 0001  
                ?_Lcd_Port 0001                    ??_fputc 0006                    ??_fputs 000F  
                  ??_putch 0002                 __pbssBANK0 0060                    ?___wmul 0002  
     __size_of_interrupcao 127A  __size_of_Lcd_Write_String 0040     __end_of_Lcd_Set_Cursor 135A  
                  ?_strlen 0002                    _INTEDG0 007F8E         __size_of_setupTmr0 0012  
       __size_of_vfpfcnvrt 01B4                 ??_Lcd_Init 0005                 ??_Lcd_Port 0002  
           _Lcd_Write_Char 1570                    _Lcd_Cmd 1604                    __Hparam 0000  
                  __Lparam 0000                    _Numero1 006E                    _Numero2 006C  
                ?_setupInt 0001                    ___aodiv 0CB6                    ___aomod 0E3E  
          __size_of___wmul 0026                  ?_vfprintf 0051               __psmallconst 0800  
                  __pcinit 14AE                    __ramtop 0800            ?_Lcd_Set_Cursor 0005  
                  __ptext0 112E                    __ptext1 1418                    __ptext2 135A  
                  __ptext3 0B02                    __ptext4 0824                    __ptext5 106C  
                  __ptext6 15A8                    __ptext7 146A                    __ptext8 0FA2  
                  __ptext9 1642            __size_of_strlen 0036               __size_of_abs 0040  
             __size_of_pad 00C2                    _periodo 0066                    _sprintf 1418  
   __end_of_Lcd_Write_Char 15A8             __pintcode_body 11EE       end_of_initialization 14DE  
                  fputc@fp 0004                    int_func 11EE                    fputs@fp 000D  
        __end_of_setupTmr0 1636          __end_of_vfpfcnvrt 0CB6                 ??_setupInt 0002  
                  postdec2 000FDD                    postinc0 000FEE                    postinc1 000FE6  
                  postinc2 000FDE                  Lcd_Port@a 0002                 ??_vfprintf 0057  
                  strlen@a 0004                    strlen@s 0002            ?_Lcd_Write_Char 0001  
        Lcd_Write_String@a 0006          Lcd_Write_String@i 0008                vfpfcnvrt@ap 0045  
              vfpfcnvrt@fp 0041                vfpfcnvrt@ll 0049             __end_of___wmul 1604  
         _Lcd_Write_String 1530             __end_of_strlen 15DE        start_initialization 14AE  
              __end_of_abs 1530                __end_of_pad 112E          __size_of_Lcd_Init 0072  
        __size_of_Lcd_Port 005C                vfprintf@fmt 0053                   ??___wmul 0006  
              __pdataBANK0 00C0            Lcd_Write_Char@a 0005            Lcd_Write_Char@y 0004  
                 ??_strlen 0004                __pbssCOMRAM 0057              __pcstackBANK0 00B0  
         ___aodiv@dividend 0002                   ?_Lcd_Cmd 0001              ??_interrupcao 0001  
         ??_Lcd_Set_Cursor 0006                  __pintcode 0008                   ?___aodiv 0002  
                 ?___aomod 0002           ___aodiv@quotient 0014          __size_of_setupInt 000A  
        __size_of_vfprintf 0062                __smallconst 0800                   ?_sprintf 00B2  
           __size_of_fputc 00CA             __size_of_fputs 0044             __size_of_putch 0002  
           ___wmul@product 0006                   _LATDbits 000F8C           _periodo_anterior 0064  
                 i2u110_40 121E                   i2u110_41 121A                   i2u111_40 1230  
                 i2u111_41 1228                   i2u113_40 1268                   i2u112_48 1232  
                 i2u113_41 1264                   i2u109_40 11FE                   i2u109_41 11FA  
                 Lcd_Cmd@a 0004                  _resultado 0068                  _setupTmr0 1624  
                _vfpfcnvrt 0B02        __end_of_interrupcao 1282                 _ADCON1bits 000FC1  
        ___wmul@multiplier 0002           ??_Lcd_Write_Char 0003                   _Lcd_Init 1282  
                 _Lcd_Port 13BC   __end_of_Lcd_Write_String 1570           __size_of_Lcd_Cmd 0020  
                 __Hrparam 0000                 vfprintf@ap 0055                   __Lrparam 0000  
               vfprintf@fp 0051               __Lsmallconst 0800                 ?_setupTmr0 0001  
         __size_of___aodiv 0188           __size_of___aomod 0164                 ?_vfpfcnvrt 0041  
          ___aodiv@divisor 000A            ___aodiv@counter 0012                 sprintf@fmt 00B4  
                 _dtoa$707 002F                   __ptext10 14F0                   __ptext11 0E3E  
                 __ptext20 1604                   __ptext12 0CB6                   __ptext21 13BC  
                 __ptext13 1624                   __ptext14 1636                   __ptext15 15DE  
                 __ptext16 1530                   __ptext17 1570                   __ptext18 12F4  
                 __ptext19 1282           __size_of_sprintf 0052                   _controle 006A  
            __size_of_main 00C0              __size_of_dtoa 02DE                _interrupcao 0008  
                 isa$xinst 000000                   _setupInt 1636                   int$flags 005D  
                 _vfprintf 135A           ___aomod@dividend 0002         Lcd_Write_Char@temp 0003  
                 intlevel2 0000                  sprintf@ap 00B8                ??_setupTmr0 0002  
          ___aomod@divisor 000A                ??_vfpfcnvrt 0047            ___aomod@counter 0012  
       Lcd_Set_Cursor@temp 0009                   sprintf@f 00BA                   sprintf@s 00B2  
             ___aodiv@sign 0013               ___aomod@sign 0013  
